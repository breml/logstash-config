// Code generated by pigeon; DO NOT EDIT.

package config

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/breml/logstash-config/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "init",
			pos:  position{line: 7, col: 1, offset: 171},
			expr: &actionExpr{
				pos: position{line: 8, col: 5, offset: 182},
				run: (*parser).calloninit1,
				expr: &seqExpr{
					pos: position{line: 8, col: 5, offset: 182},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 8, col: 5, offset: 182},
							run: (*parser).calloninit3,
						},
						&labeledExpr{
							pos:   position{line: 10, col: 7, offset: 220},
							label: "conf",
							expr: &choiceExpr{
								pos: position{line: 11, col: 9, offset: 235},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 11, col: 9, offset: 235},
										run: (*parser).calloninit6,
										expr: &seqExpr{
											pos: position{line: 11, col: 9, offset: 235},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 11, col: 9, offset: 235},
													label: "conf",
													expr: &ruleRefExpr{
														pos:  position{line: 11, col: 14, offset: 240},
														name: "config",
													},
												},
												&notExpr{
													pos: position{line: 624, col: 7, offset: 13711},
													expr: &anyMatcher{
														line: 624, col: 8, offset: 13712,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 13, col: 13, offset: 294},
										run: (*parser).calloninit12,
										expr: &seqExpr{
											pos: position{line: 13, col: 13, offset: 294},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 47, col: 5, offset: 1000},
													expr: &choiceExpr{
														pos: position{line: 47, col: 6, offset: 1001},
														alternatives: []interface{}{
															&oneOrMoreExpr{
																pos: position{line: 40, col: 5, offset: 858},
																expr: &seqExpr{
																	pos: position{line: 40, col: 6, offset: 859},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 40, col: 6, offset: 859},
																			expr: &oneOrMoreExpr{
																				pos: position{line: 54, col: 5, offset: 1124},
																				expr: &charClassMatcher{
																					pos:        position{line: 54, col: 5, offset: 1124},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 40, col: 18, offset: 871},
																			val:        "#",
																			ignoreCase: false,
																			want:       "\"#\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 40, col: 22, offset: 875},
																			expr: &charClassMatcher{
																				pos:        position{line: 40, col: 22, offset: 875},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 40, col: 31, offset: 884},
																			expr: &litMatcher{
																				pos:        position{line: 40, col: 31, offset: 884},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 40, col: 38, offset: 891},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 40, col: 38, offset: 891},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&notExpr{
																					pos: position{line: 624, col: 7, offset: 13711},
																					expr: &anyMatcher{
																						line: 624, col: 8, offset: 13712,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 624, col: 7, offset: 13711},
													expr: &anyMatcher{
														line: 624, col: 8, offset: 13712,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "config",
			pos:  position{line: 26, col: 1, offset: 583},
			expr: &actionExpr{
				pos: position{line: 27, col: 5, offset: 596},
				run: (*parser).callonconfig1,
				expr: &seqExpr{
					pos: position{line: 27, col: 5, offset: 596},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 27, col: 7, offset: 598},
							label: "ps",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 10, offset: 601},
								name: "pluginSection",
							},
						},
						&labeledExpr{
							pos:   position{line: 27, col: 24, offset: 615},
							label: "pss",
							expr: &zeroOrMoreExpr{
								pos: position{line: 27, col: 28, offset: 619},
								expr: &actionExpr{
									pos: position{line: 28, col: 9, offset: 629},
									run: (*parser).callonconfig25,
									expr: &seqExpr{
										pos: position{line: 28, col: 9, offset: 629},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 28, col: 11, offset: 631},
												label: "ps",
												expr: &ruleRefExpr{
													pos:  position{line: 28, col: 14, offset: 634},
													name: "pluginSection",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 624, col: 7, offset: 13711},
							expr: &anyMatcher{
								line: 624, col: 8, offset: 13712,
							},
						},
					},
				},
			},
		},
		{
			name: "pluginSection",
			pos:  position{line: 63, col: 1, offset: 1281},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 1301},
				run: (*parser).callonpluginSection1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 1301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 64, col: 5, offset: 1301},
							label: "pt",
							expr: &choiceExpr{
								pos: position{line: 88, col: 5, offset: 1739},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 88, col: 5, offset: 1739},
										run: (*parser).callonpluginSection5,
										expr: &litMatcher{
											pos:        position{line: 88, col: 5, offset: 1739},
											val:        "input",
											ignoreCase: false,
											want:       "\"input\"",
										},
									},
									&actionExpr{
										pos: position{line: 90, col: 9, offset: 1787},
										run: (*parser).callonpluginSection7,
										expr: &litMatcher{
											pos:        position{line: 90, col: 9, offset: 1787},
											val:        "filter",
											ignoreCase: false,
											want:       "\"filter\"",
										},
									},
									&actionExpr{
										pos: position{line: 92, col: 9, offset: 1837},
										run: (*parser).callonpluginSection9,
										expr: &litMatcher{
											pos:        position{line: 92, col: 9, offset: 1837},
											val:        "output",
											ignoreCase: false,
											want:       "\"output\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 94, col: 9, offset: 1887},
										run: (*parser).callonpluginSection11,
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 64, col: 21, offset: 1317},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 64, col: 27, offset: 1323},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 64, col: 32, offset: 1328},
								expr: &actionExpr{
									pos: position{line: 65, col: 9, offset: 1338},
									run: (*parser).callonpluginSection51,
									expr: &seqExpr{
										pos: position{line: 65, col: 9, offset: 1338},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 65, col: 9, offset: 1338},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 65, col: 13, offset: 1342},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 69, col: 9, offset: 1416},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 69, col: 9, offset: 1416},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 69, col: 15, offset: 1422},
									run: (*parser).callonpluginSection75,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "branchOrPlugin",
			pos:  position{line: 80, col: 1, offset: 1613},
			expr: &choiceExpr{
				pos: position{line: 81, col: 5, offset: 1634},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 1634},
						name: "branch",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 14, offset: 1643},
						name: "plugin",
					},
				},
			},
		},
		{
			name: "plugin",
			pos:  position{line: 125, col: 1, offset: 2526},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 2539},
				run: (*parser).callonplugin1,
				expr: &seqExpr{
					pos: position{line: 126, col: 5, offset: 2539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 126, col: 5, offset: 2539},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 150, col: 7, offset: 3064},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 150, col: 7, offset: 3064},
										run: (*parser).callonplugin5,
										expr: &oneOrMoreExpr{
											pos: position{line: 150, col: 8, offset: 3065},
											expr: &charClassMatcher{
												pos:        position{line: 150, col: 8, offset: 3065},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 152, col: 9, offset: 3126},
										run: (*parser).callonplugin8,
										expr: &labeledExpr{
											pos:   position{line: 152, col: 9, offset: 3126},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 225, col: 5, offset: 4729},
												run: (*parser).callonplugin10,
												expr: &labeledExpr{
													pos:   position{line: 225, col: 5, offset: 4729},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 225, col: 11, offset: 4735},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 225, col: 11, offset: 4735},
																run: (*parser).callonplugin13,
																expr: &labeledExpr{
																	pos:   position{line: 225, col: 11, offset: 4735},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 199, col: 5, offset: 4153},
																		run: (*parser).callonplugin15,
																		expr: &seqExpr{
																			pos: position{line: 199, col: 7, offset: 4155},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 199, col: 7, offset: 4155},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 199, col: 11, offset: 4159},
																					expr: &choiceExpr{
																						pos: position{line: 199, col: 13, offset: 4161},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 199, col: 13, offset: 4161},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 199, col: 20, offset: 4168},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 199, col: 20, offset: 4168},
																										expr: &litMatcher{
																											pos:        position{line: 199, col: 21, offset: 4169},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 199, col: 25, offset: 4173,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 200, col: 9, offset: 4188},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 200, col: 9, offset: 4188},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 200, col: 15, offset: 4194},
																							run: (*parser).callonplugin27,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 9, offset: 4847},
																run: (*parser).callonplugin28,
																expr: &labeledExpr{
																	pos:   position{line: 227, col: 9, offset: 4847},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 212, col: 5, offset: 4462},
																		run: (*parser).callonplugin30,
																		expr: &seqExpr{
																			pos: position{line: 212, col: 7, offset: 4464},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 212, col: 7, offset: 4464},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 212, col: 11, offset: 4468},
																					expr: &choiceExpr{
																						pos: position{line: 212, col: 13, offset: 4470},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 212, col: 13, offset: 4470},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 212, col: 20, offset: 4477},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 212, col: 20, offset: 4477},
																										expr: &litMatcher{
																											pos:        position{line: 212, col: 21, offset: 4478},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 212, col: 25, offset: 4482,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 213, col: 9, offset: 4497},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 213, col: 9, offset: 4497},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 213, col: 15, offset: 4503},
																							run: (*parser).callonplugin42,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 126, col: 17, offset: 2551},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 23, offset: 2557},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 34, offset: 2568},
								expr: &actionExpr{
									pos: position{line: 127, col: 9, offset: 2578},
									run: (*parser).callonplugin82,
									expr: &seqExpr{
										pos: position{line: 127, col: 9, offset: 2578},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 127, col: 9, offset: 2578},
												label: "attribute",
												expr: &ruleRefExpr{
													pos:  position{line: 127, col: 19, offset: 2588},
													name: "attribute",
												},
											},
											&labeledExpr{
												pos:   position{line: 127, col: 29, offset: 2598},
												label: "attrs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 127, col: 35, offset: 2604},
													expr: &actionExpr{
														pos: position{line: 128, col: 13, offset: 2618},
														run: (*parser).callonplugin88,
														expr: &seqExpr{
															pos: position{line: 128, col: 13, offset: 2618},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 54, col: 5, offset: 1124},
																	expr: &charClassMatcher{
																		pos:        position{line: 54, col: 5, offset: 1124},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 47, col: 5, offset: 1000},
																	expr: &choiceExpr{
																		pos: position{line: 47, col: 6, offset: 1001},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 40, col: 5, offset: 858},
																				expr: &seqExpr{
																					pos: position{line: 40, col: 6, offset: 859},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 6, offset: 859},
																							expr: &oneOrMoreExpr{
																								pos: position{line: 54, col: 5, offset: 1124},
																								expr: &charClassMatcher{
																									pos:        position{line: 54, col: 5, offset: 1124},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 40, col: 18, offset: 871},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 40, col: 22, offset: 875},
																							expr: &charClassMatcher{
																								pos:        position{line: 40, col: 22, offset: 875},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 31, offset: 884},
																							expr: &litMatcher{
																								pos:        position{line: 40, col: 31, offset: 884},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 40, col: 38, offset: 891},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 40, col: 38, offset: 891},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&notExpr{
																									pos: position{line: 624, col: 7, offset: 13711},
																									expr: &anyMatcher{
																										line: 624, col: 8, offset: 13712,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 54, col: 5, offset: 1124},
																				expr: &charClassMatcher{
																					pos:        position{line: 54, col: 5, offset: 1124},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 128, col: 26, offset: 2631},
																	label: "attribute",
																	expr: &ruleRefExpr{
																		pos:  position{line: 128, col: 36, offset: 2641},
																		name: "attribute",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 135, col: 9, offset: 2795},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 9, offset: 2795},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 135, col: 15, offset: 2801},
									run: (*parser).callonplugin132,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute",
			pos:  position{line: 161, col: 1, offset: 3280},
			expr: &actionExpr{
				pos: position{line: 162, col: 5, offset: 3296},
				run: (*parser).callonattribute1,
				expr: &seqExpr{
					pos: position{line: 162, col: 5, offset: 3296},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 162, col: 5, offset: 3296},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 150, col: 7, offset: 3064},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 150, col: 7, offset: 3064},
										run: (*parser).callonattribute5,
										expr: &oneOrMoreExpr{
											pos: position{line: 150, col: 8, offset: 3065},
											expr: &charClassMatcher{
												pos:        position{line: 150, col: 8, offset: 3065},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 152, col: 9, offset: 3126},
										run: (*parser).callonattribute8,
										expr: &labeledExpr{
											pos:   position{line: 152, col: 9, offset: 3126},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 225, col: 5, offset: 4729},
												run: (*parser).callonattribute10,
												expr: &labeledExpr{
													pos:   position{line: 225, col: 5, offset: 4729},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 225, col: 11, offset: 4735},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 225, col: 11, offset: 4735},
																run: (*parser).callonattribute13,
																expr: &labeledExpr{
																	pos:   position{line: 225, col: 11, offset: 4735},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 199, col: 5, offset: 4153},
																		run: (*parser).callonattribute15,
																		expr: &seqExpr{
																			pos: position{line: 199, col: 7, offset: 4155},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 199, col: 7, offset: 4155},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 199, col: 11, offset: 4159},
																					expr: &choiceExpr{
																						pos: position{line: 199, col: 13, offset: 4161},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 199, col: 13, offset: 4161},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 199, col: 20, offset: 4168},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 199, col: 20, offset: 4168},
																										expr: &litMatcher{
																											pos:        position{line: 199, col: 21, offset: 4169},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 199, col: 25, offset: 4173,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 200, col: 9, offset: 4188},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 200, col: 9, offset: 4188},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 200, col: 15, offset: 4194},
																							run: (*parser).callonattribute27,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 9, offset: 4847},
																run: (*parser).callonattribute28,
																expr: &labeledExpr{
																	pos:   position{line: 227, col: 9, offset: 4847},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 212, col: 5, offset: 4462},
																		run: (*parser).callonattribute30,
																		expr: &seqExpr{
																			pos: position{line: 212, col: 7, offset: 4464},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 212, col: 7, offset: 4464},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 212, col: 11, offset: 4468},
																					expr: &choiceExpr{
																						pos: position{line: 212, col: 13, offset: 4470},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 212, col: 13, offset: 4470},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 212, col: 20, offset: 4477},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 212, col: 20, offset: 4477},
																										expr: &litMatcher{
																											pos:        position{line: 212, col: 21, offset: 4478},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 212, col: 25, offset: 4482,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 213, col: 9, offset: 4497},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 213, col: 9, offset: 4497},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 213, col: 15, offset: 4503},
																							run: (*parser).callonattribute42,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 162, col: 17, offset: 3308},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 162, col: 24, offset: 3315},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 30, offset: 3321},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "value",
			pos:  position{line: 170, col: 1, offset: 3458},
			expr: &choiceExpr{
				pos: position{line: 171, col: 5, offset: 3470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 171, col: 5, offset: 3470},
						name: "plugin",
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 3908},
						run: (*parser).callonvalue3,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 3908},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 190, col: 5, offset: 3908},
									val:        "[_A-Za-z]",
									chars:      []rune{'_'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 190, col: 15, offset: 3918},
									expr: &charClassMatcher{
										pos:        position{line: 190, col: 15, offset: 3918},
										val:        "[_A-Za-z0-9]",
										chars:      []rune{'_'},
										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 4729},
						run: (*parser).callonvalue8,
						expr: &labeledExpr{
							pos:   position{line: 225, col: 5, offset: 4729},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 225, col: 11, offset: 4735},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 225, col: 11, offset: 4735},
										run: (*parser).callonvalue11,
										expr: &labeledExpr{
											pos:   position{line: 225, col: 11, offset: 4735},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 199, col: 5, offset: 4153},
												run: (*parser).callonvalue13,
												expr: &seqExpr{
													pos: position{line: 199, col: 7, offset: 4155},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 199, col: 7, offset: 4155},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 199, col: 11, offset: 4159},
															expr: &choiceExpr{
																pos: position{line: 199, col: 13, offset: 4161},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 199, col: 13, offset: 4161},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 199, col: 20, offset: 4168},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 199, col: 20, offset: 4168},
																				expr: &litMatcher{
																					pos:        position{line: 199, col: 21, offset: 4169},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 199, col: 25, offset: 4173,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 200, col: 9, offset: 4188},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 200, col: 9, offset: 4188},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 200, col: 15, offset: 4194},
																	run: (*parser).callonvalue25,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 227, col: 9, offset: 4847},
										run: (*parser).callonvalue26,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 9, offset: 4847},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 212, col: 5, offset: 4462},
												run: (*parser).callonvalue28,
												expr: &seqExpr{
													pos: position{line: 212, col: 7, offset: 4464},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 212, col: 7, offset: 4464},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 212, col: 11, offset: 4468},
															expr: &choiceExpr{
																pos: position{line: 212, col: 13, offset: 4470},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 212, col: 13, offset: 4470},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 212, col: 20, offset: 4477},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 212, col: 20, offset: 4477},
																				expr: &litMatcher{
																					pos:        position{line: 212, col: 21, offset: 4478},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 212, col: 25, offset: 4482,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 213, col: 9, offset: 4497},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 213, col: 9, offset: 4497},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 213, col: 15, offset: 4503},
																	run: (*parser).callonvalue40,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 5382},
						run: (*parser).callonvalue41,
						expr: &seqExpr{
							pos: position{line: 252, col: 5, offset: 5382},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 252, col: 5, offset: 5382},
									expr: &litMatcher{
										pos:        position{line: 252, col: 5, offset: 5382},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 252, col: 10, offset: 5387},
									expr: &charClassMatcher{
										pos:        position{line: 252, col: 10, offset: 5387},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 252, col: 17, offset: 5394},
									expr: &seqExpr{
										pos: position{line: 252, col: 18, offset: 5395},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 252, col: 18, offset: 5395},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 252, col: 22, offset: 5399},
												expr: &charClassMatcher{
													pos:        position{line: 252, col: 22, offset: 5399},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 48, offset: 3513},
						name: "array",
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 56, offset: 3521},
						name: "hash",
					},
					&andCodeExpr{
						pos: position{line: 171, col: 63, offset: 3528},
						run: (*parser).callonvalue54,
					},
				},
			},
		},
		{
			name: "array",
			pos:  position{line: 268, col: 1, offset: 5716},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 5728},
				run: (*parser).callonarray1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 5728},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 5728},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 11, offset: 5734},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 17, offset: 5740},
								expr: &actionExpr{
									pos: position{line: 270, col: 9, offset: 5750},
									run: (*parser).callonarray24,
									expr: &seqExpr{
										pos: position{line: 270, col: 9, offset: 5750},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 270, col: 9, offset: 5750},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 270, col: 15, offset: 5756},
													name: "value",
												},
											},
											&labeledExpr{
												pos:   position{line: 270, col: 21, offset: 5762},
												label: "values",
												expr: &zeroOrMoreExpr{
													pos: position{line: 270, col: 28, offset: 5769},
													expr: &actionExpr{
														pos: position{line: 271, col: 13, offset: 5783},
														run: (*parser).callonarray30,
														expr: &seqExpr{
															pos: position{line: 271, col: 13, offset: 5783},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 47, col: 5, offset: 1000},
																	expr: &choiceExpr{
																		pos: position{line: 47, col: 6, offset: 1001},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 40, col: 5, offset: 858},
																				expr: &seqExpr{
																					pos: position{line: 40, col: 6, offset: 859},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 6, offset: 859},
																							expr: &oneOrMoreExpr{
																								pos: position{line: 54, col: 5, offset: 1124},
																								expr: &charClassMatcher{
																									pos:        position{line: 54, col: 5, offset: 1124},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 40, col: 18, offset: 871},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 40, col: 22, offset: 875},
																							expr: &charClassMatcher{
																								pos:        position{line: 40, col: 22, offset: 875},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 31, offset: 884},
																							expr: &litMatcher{
																								pos:        position{line: 40, col: 31, offset: 884},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 40, col: 38, offset: 891},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 40, col: 38, offset: 891},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&notExpr{
																									pos: position{line: 624, col: 7, offset: 13711},
																									expr: &anyMatcher{
																										line: 624, col: 8, offset: 13712,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 54, col: 5, offset: 1124},
																				expr: &charClassMatcher{
																					pos:        position{line: 54, col: 5, offset: 1124},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 271, col: 15, offset: 5785},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 47, col: 5, offset: 1000},
																	expr: &choiceExpr{
																		pos: position{line: 47, col: 6, offset: 1001},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 40, col: 5, offset: 858},
																				expr: &seqExpr{
																					pos: position{line: 40, col: 6, offset: 859},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 6, offset: 859},
																							expr: &oneOrMoreExpr{
																								pos: position{line: 54, col: 5, offset: 1124},
																								expr: &charClassMatcher{
																									pos:        position{line: 54, col: 5, offset: 1124},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 40, col: 18, offset: 871},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 40, col: 22, offset: 875},
																							expr: &charClassMatcher{
																								pos:        position{line: 40, col: 22, offset: 875},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 40, col: 31, offset: 884},
																							expr: &litMatcher{
																								pos:        position{line: 40, col: 31, offset: 884},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 40, col: 38, offset: 891},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 40, col: 38, offset: 891},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&notExpr{
																									pos: position{line: 624, col: 7, offset: 13711},
																									expr: &anyMatcher{
																										line: 624, col: 8, offset: 13712,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 54, col: 5, offset: 1124},
																				expr: &charClassMatcher{
																					pos:        position{line: 54, col: 5, offset: 1124},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 271, col: 21, offset: 5791},
																	label: "value",
																	expr: &ruleRefExpr{
																		pos:  position{line: 271, col: 27, offset: 5797},
																		name: "value",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 278, col: 9, offset: 5940},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 9, offset: 5940},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&andCodeExpr{
									pos: position{line: 278, col: 15, offset: 5946},
									run: (*parser).callonarray91,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hash",
			pos:  position{line: 294, col: 1, offset: 6196},
			expr: &actionExpr{
				pos: position{line: 295, col: 5, offset: 6207},
				run: (*parser).callonhash1,
				expr: &seqExpr{
					pos: position{line: 295, col: 5, offset: 6207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 295, col: 5, offset: 6207},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 295, col: 11, offset: 6213},
							label: "entries",
							expr: &zeroOrOneExpr{
								pos: position{line: 295, col: 19, offset: 6221},
								expr: &ruleRefExpr{
									pos:  position{line: 295, col: 19, offset: 6221},
									name: "hashentries",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 296, col: 9, offset: 6246},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 296, col: 9, offset: 6246},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 296, col: 15, offset: 6252},
									run: (*parser).callonhash45,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentries",
			pos:  position{line: 308, col: 1, offset: 6491},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 6509},
				run: (*parser).callonhashentries1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 6509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 309, col: 5, offset: 6509},
							label: "hashentry",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 15, offset: 6519},
								name: "hashentry",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 25, offset: 6529},
							label: "hashentries1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 38, offset: 6542},
								expr: &actionExpr{
									pos: position{line: 310, col: 9, offset: 6552},
									run: (*parser).callonhashentries7,
									expr: &seqExpr{
										pos: position{line: 310, col: 9, offset: 6552},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 310, col: 20, offset: 6563},
												label: "hashentry",
												expr: &ruleRefExpr{
													pos:  position{line: 310, col: 30, offset: 6573},
													name: "hashentry",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentry",
			pos:  position{line: 322, col: 1, offset: 6825},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 6841},
				run: (*parser).callonhashentry1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 6841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 6841},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 323, col: 11, offset: 6847},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 252, col: 5, offset: 5382},
										run: (*parser).callonhashentry5,
										expr: &seqExpr{
											pos: position{line: 252, col: 5, offset: 5382},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 252, col: 5, offset: 5382},
													expr: &litMatcher{
														pos:        position{line: 252, col: 5, offset: 5382},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 252, col: 10, offset: 5387},
													expr: &charClassMatcher{
														pos:        position{line: 252, col: 10, offset: 5387},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 252, col: 17, offset: 5394},
													expr: &seqExpr{
														pos: position{line: 252, col: 18, offset: 5395},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 252, col: 18, offset: 5395},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 252, col: 22, offset: 5399},
																expr: &charClassMatcher{
																	pos:        position{line: 252, col: 22, offset: 5399},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 190, col: 5, offset: 3908},
										run: (*parser).callonhashentry16,
										expr: &seqExpr{
											pos: position{line: 190, col: 5, offset: 3908},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 190, col: 5, offset: 3908},
													val:        "[_A-Za-z]",
													chars:      []rune{'_'},
													ranges:     []rune{'A', 'Z', 'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&oneOrMoreExpr{
													pos: position{line: 190, col: 15, offset: 3918},
													expr: &charClassMatcher{
														pos:        position{line: 190, col: 15, offset: 3918},
														val:        "[_A-Za-z0-9]",
														chars:      []rune{'_'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 225, col: 5, offset: 4729},
										run: (*parser).callonhashentry21,
										expr: &labeledExpr{
											pos:   position{line: 225, col: 5, offset: 4729},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 225, col: 11, offset: 4735},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 225, col: 11, offset: 4735},
														run: (*parser).callonhashentry24,
														expr: &labeledExpr{
															pos:   position{line: 225, col: 11, offset: 4735},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 199, col: 5, offset: 4153},
																run: (*parser).callonhashentry26,
																expr: &seqExpr{
																	pos: position{line: 199, col: 7, offset: 4155},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 199, col: 7, offset: 4155},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 199, col: 11, offset: 4159},
																			expr: &choiceExpr{
																				pos: position{line: 199, col: 13, offset: 4161},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 199, col: 13, offset: 4161},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 199, col: 20, offset: 4168},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 199, col: 20, offset: 4168},
																								expr: &litMatcher{
																									pos:        position{line: 199, col: 21, offset: 4169},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 199, col: 25, offset: 4173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 200, col: 9, offset: 4188},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 200, col: 9, offset: 4188},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 200, col: 15, offset: 4194},
																					run: (*parser).callonhashentry38,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 227, col: 9, offset: 4847},
														run: (*parser).callonhashentry39,
														expr: &labeledExpr{
															pos:   position{line: 227, col: 9, offset: 4847},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 212, col: 5, offset: 4462},
																run: (*parser).callonhashentry41,
																expr: &seqExpr{
																	pos: position{line: 212, col: 7, offset: 4464},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 212, col: 7, offset: 4464},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 212, col: 11, offset: 4468},
																			expr: &choiceExpr{
																				pos: position{line: 212, col: 13, offset: 4470},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 212, col: 13, offset: 4470},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 212, col: 20, offset: 4477},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 212, col: 20, offset: 4477},
																								expr: &litMatcher{
																									pos:        position{line: 212, col: 21, offset: 4478},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 212, col: 25, offset: 4482,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 213, col: 9, offset: 4497},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 213, col: 9, offset: 4497},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 213, col: 15, offset: 4503},
																					run: (*parser).callonhashentry53,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 46, offset: 6882},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 53, offset: 6889},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 59, offset: 6895},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "branch",
			pos:  position{line: 334, col: 1, offset: 7062},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 7075},
				run: (*parser).callonbranch1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 7075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 335, col: 5, offset: 7075},
							label: "ifBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 13, offset: 7083},
								name: "ifCond",
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 20, offset: 7090},
							label: "elseIfBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 335, col: 33, offset: 7103},
								expr: &actionExpr{
									pos: position{line: 336, col: 9, offset: 7113},
									run: (*parser).callonbranch7,
									expr: &seqExpr{
										pos: position{line: 336, col: 9, offset: 7113},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 336, col: 11, offset: 7115},
												label: "eib",
												expr: &ruleRefExpr{
													pos:  position{line: 336, col: 15, offset: 7119},
													name: "elseIf",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 12, offset: 7185},
							label: "elseBlock",
							expr: &zeroOrOneExpr{
								pos: position{line: 339, col: 22, offset: 7195},
								expr: &actionExpr{
									pos: position{line: 340, col: 13, offset: 7209},
									run: (*parser).callonbranch31,
									expr: &seqExpr{
										pos: position{line: 340, col: 13, offset: 7209},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 340, col: 15, offset: 7211},
												label: "eb",
												expr: &ruleRefExpr{
													pos:  position{line: 340, col: 18, offset: 7214},
													name: "elseCond",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ifCond",
			pos:  position{line: 352, col: 1, offset: 7462},
			expr: &actionExpr{
				pos: position{line: 353, col: 5, offset: 7475},
				run: (*parser).callonifCond1,
				expr: &seqExpr{
					pos: position{line: 353, col: 5, offset: 7475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 5, offset: 7475},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 12, offset: 7482},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 17, offset: 7487},
								name: "condition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 29, offset: 7499},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 35, offset: 7505},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 353, col: 40, offset: 7510},
								expr: &actionExpr{
									pos: position{line: 354, col: 13, offset: 7524},
									run: (*parser).callonifCond63,
									expr: &seqExpr{
										pos: position{line: 354, col: 13, offset: 7524},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 354, col: 13, offset: 7524},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 354, col: 17, offset: 7528},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 358, col: 13, offset: 7618},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 13, offset: 7618},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 358, col: 19, offset: 7624},
									run: (*parser).callonifCond87,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseIf",
			pos:  position{line: 370, col: 1, offset: 7898},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 7911},
				run: (*parser).callonelseIf1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 7911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 7911},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 371, col: 14, offset: 7920},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 21, offset: 7927},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 26, offset: 7932},
								name: "condition",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 371, col: 38, offset: 7944},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 44, offset: 7950},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 371, col: 49, offset: 7955},
								expr: &actionExpr{
									pos: position{line: 372, col: 9, offset: 7965},
									run: (*parser).callonelseIf82,
									expr: &seqExpr{
										pos: position{line: 372, col: 9, offset: 7965},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 372, col: 9, offset: 7965},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 372, col: 13, offset: 7969},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 376, col: 9, offset: 8043},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 376, col: 9, offset: 8043},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 376, col: 15, offset: 8049},
									run: (*parser).callonelseIf106,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseCond",
			pos:  position{line: 388, col: 1, offset: 8291},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 8306},
				run: (*parser).callonelseCond1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 8306},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 8306},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 14, offset: 8315},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 389, col: 20, offset: 8321},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 389, col: 25, offset: 8326},
								expr: &actionExpr{
									pos: position{line: 390, col: 9, offset: 8336},
									run: (*parser).callonelseCond43,
									expr: &seqExpr{
										pos: position{line: 390, col: 9, offset: 8336},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 390, col: 9, offset: 8336},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 390, col: 13, offset: 8340},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 394, col: 9, offset: 8414},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 394, col: 9, offset: 8414},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 394, col: 15, offset: 8420},
									run: (*parser).callonelseCond67,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 406, col: 1, offset: 8669},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 8685},
				run: (*parser).calloncondition1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 8685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 407, col: 5, offset: 8685},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 10, offset: 8690},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 407, col: 21, offset: 8701},
							label: "conds",
							expr: &zeroOrMoreExpr{
								pos: position{line: 407, col: 27, offset: 8707},
								expr: &actionExpr{
									pos: position{line: 408, col: 9, offset: 8717},
									run: (*parser).calloncondition7,
									expr: &seqExpr{
										pos: position{line: 408, col: 9, offset: 8717},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 408, col: 11, offset: 8719},
												label: "bo",
												expr: &actionExpr{
													pos: position{line: 594, col: 5, offset: 13060},
													run: (*parser).calloncondition28,
													expr: &choiceExpr{
														pos: position{line: 594, col: 6, offset: 13061},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 594, col: 6, offset: 13061},
																val:        "and",
																ignoreCase: false,
																want:       "\"and\"",
															},
															&litMatcher{
																pos:        position{line: 594, col: 14, offset: 13069},
																val:        "or",
																ignoreCase: false,
																want:       "\"or\"",
															},
															&litMatcher{
																pos:        position{line: 594, col: 21, offset: 13076},
																val:        "xor",
																ignoreCase: false,
																want:       "\"xor\"",
															},
															&litMatcher{
																pos:        position{line: 594, col: 29, offset: 13084},
																val:        "nand",
																ignoreCase: false,
																want:       "\"nand\"",
															},
															&andCodeExpr{
																pos: position{line: 594, col: 38, offset: 13093},
																run: (*parser).calloncondition34,
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 47, col: 5, offset: 1000},
												expr: &choiceExpr{
													pos: position{line: 47, col: 6, offset: 1001},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 40, col: 5, offset: 858},
															expr: &seqExpr{
																pos: position{line: 40, col: 6, offset: 859},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 6, offset: 859},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 54, col: 5, offset: 1124},
																			expr: &charClassMatcher{
																				pos:        position{line: 54, col: 5, offset: 1124},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 40, col: 18, offset: 871},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 40, col: 22, offset: 875},
																		expr: &charClassMatcher{
																			pos:        position{line: 40, col: 22, offset: 875},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 40, col: 31, offset: 884},
																		expr: &litMatcher{
																			pos:        position{line: 40, col: 31, offset: 884},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 40, col: 38, offset: 891},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 40, col: 38, offset: 891},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 624, col: 7, offset: 13711},
																				expr: &anyMatcher{
																					line: 624, col: 8, offset: 13712,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 54, col: 5, offset: 1124},
															expr: &charClassMatcher{
																pos:        position{line: 54, col: 5, offset: 1124},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 408, col: 32, offset: 8740},
												label: "cond",
												expr: &ruleRefExpr{
													pos:  position{line: 408, col: 37, offset: 8745},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "expression",
			pos:  position{line: 427, col: 1, offset: 9144},
			expr: &choiceExpr{
				pos: position{line: 429, col: 9, offset: 9171},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 430, col: 13, offset: 9185},
						run: (*parser).callonexpression2,
						expr: &seqExpr{
							pos: position{line: 430, col: 13, offset: 9185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 430, col: 13, offset: 9185},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 430, col: 19, offset: 9191},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 430, col: 24, offset: 9196},
										name: "condition",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 430, col: 36, offset: 9208},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 434, col: 9, offset: 9295},
						name: "negativeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 9, offset: 9322},
						name: "inExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 9, offset: 9343},
						name: "notInExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 437, col: 9, offset: 9367},
						name: "compareExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 9, offset: 9393},
						name: "regexpExpression",
					},
					&actionExpr{
						pos: position{line: 439, col: 9, offset: 9418},
						run: (*parser).callonexpression49,
						expr: &labeledExpr{
							pos:   position{line: 439, col: 9, offset: 9418},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 12, offset: 9421},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "negativeExpression",
			pos:  position{line: 452, col: 1, offset: 9705},
			expr: &choiceExpr{
				pos: position{line: 454, col: 9, offset: 9740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 13, offset: 9754},
						run: (*parser).callonnegativeExpression2,
						expr: &seqExpr{
							pos: position{line: 455, col: 13, offset: 9754},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 455, col: 13, offset: 9754},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 455, col: 19, offset: 9760},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 455, col: 25, offset: 9766},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 30, offset: 9771},
										name: "condition",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 456, col: 17, offset: 9801},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 456, col: 17, offset: 9801},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
										&andCodeExpr{
											pos: position{line: 456, col: 23, offset: 9807},
											run: (*parser).callonnegativeExpression64,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 11, offset: 10007},
						run: (*parser).callonnegativeExpression65,
						expr: &seqExpr{
							pos: position{line: 464, col: 11, offset: 10007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 464, col: 11, offset: 10007},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 47, col: 5, offset: 1000},
									expr: &choiceExpr{
										pos: position{line: 47, col: 6, offset: 1001},
										alternatives: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 40, col: 5, offset: 858},
												expr: &seqExpr{
													pos: position{line: 40, col: 6, offset: 859},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 40, col: 6, offset: 859},
															expr: &oneOrMoreExpr{
																pos: position{line: 54, col: 5, offset: 1124},
																expr: &charClassMatcher{
																	pos:        position{line: 54, col: 5, offset: 1124},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&litMatcher{
															pos:        position{line: 40, col: 18, offset: 871},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 40, col: 22, offset: 875},
															expr: &charClassMatcher{
																pos:        position{line: 40, col: 22, offset: 875},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 40, col: 31, offset: 884},
															expr: &litMatcher{
																pos:        position{line: 40, col: 31, offset: 884},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 40, col: 38, offset: 891},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 40, col: 38, offset: 891},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 624, col: 7, offset: 13711},
																	expr: &anyMatcher{
																		line: 624, col: 8, offset: 13712,
																	},
																},
															},
														},
													},
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 54, col: 5, offset: 1124},
												expr: &charClassMatcher{
													pos:        position{line: 54, col: 5, offset: 1124},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 464, col: 17, offset: 10013},
									label: "sel",
									expr: &actionExpr{
										pos: position{line: 606, col: 5, offset: 13345},
										run: (*parser).callonnegativeExpression87,
										expr: &labeledExpr{
											pos:   position{line: 606, col: 5, offset: 13345},
											label: "ses",
											expr: &oneOrMoreExpr{
												pos: position{line: 606, col: 9, offset: 13349},
												expr: &actionExpr{
													pos: position{line: 616, col: 5, offset: 13536},
													run: (*parser).callonnegativeExpression90,
													expr: &seqExpr{
														pos: position{line: 616, col: 5, offset: 13536},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 616, col: 5, offset: 13536},
																val:        "[",
																ignoreCase: false,
																want:       "\"[\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 616, col: 9, offset: 13540},
																expr: &charClassMatcher{
																	pos:        position{line: 616, col: 9, offset: 13540},
																	val:        "[^][,]",
																	chars:      []rune{']', '[', ','},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&choiceExpr{
																pos: position{line: 617, col: 9, offset: 13559},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 617, col: 9, offset: 13559},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 617, col: 15, offset: 13565},
																		run: (*parser).callonnegativeExpression97,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "inExpression",
			pos:  position{line: 475, col: 1, offset: 10216},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 10235},
				run: (*parser).calloninExpression1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 10235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 10235},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 8, offset: 10238},
								name: "rvalue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 495, col: 5, offset: 10611},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 495, col: 5, offset: 10611},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&andCodeExpr{
									pos: position{line: 495, col: 12, offset: 10618},
									run: (*parser).calloninExpression25,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 30, offset: 10260},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 33, offset: 10263},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "notInExpression",
			pos:  position{line: 485, col: 1, offset: 10442},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 10464},
				run: (*parser).callonnotInExpression1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 10464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 486, col: 5, offset: 10464},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 8, offset: 10467},
								name: "rvalue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 504, col: 5, offset: 10760},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 504, col: 5, offset: 10760},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 504, col: 5, offset: 10760},
											val:        "not ",
											ignoreCase: false,
											want:       "\"not \"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 47, col: 5, offset: 1000},
											expr: &choiceExpr{
												pos: position{line: 47, col: 6, offset: 1001},
												alternatives: []interface{}{
													&oneOrMoreExpr{
														pos: position{line: 40, col: 5, offset: 858},
														expr: &seqExpr{
															pos: position{line: 40, col: 6, offset: 859},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 40, col: 6, offset: 859},
																	expr: &oneOrMoreExpr{
																		pos: position{line: 54, col: 5, offset: 1124},
																		expr: &charClassMatcher{
																			pos:        position{line: 54, col: 5, offset: 1124},
																			val:        "[ \\t\\r\\n]",
																			chars:      []rune{' ', '\t', '\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 40, col: 18, offset: 871},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 40, col: 22, offset: 875},
																	expr: &charClassMatcher{
																		pos:        position{line: 40, col: 22, offset: 875},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 40, col: 31, offset: 884},
																	expr: &litMatcher{
																		pos:        position{line: 40, col: 31, offset: 884},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 40, col: 38, offset: 891},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 40, col: 38, offset: 891},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 624, col: 7, offset: 13711},
																			expr: &anyMatcher{
																				line: 624, col: 8, offset: 13712,
																			},
																		},
																	},
																},
															},
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 504, col: 14, offset: 10769},
											val:        "in",
											ignoreCase: false,
											want:       "\"in\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 504, col: 21, offset: 10776},
									run: (*parser).callonnotInExpression45,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 33, offset: 10492},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 36, offset: 10495},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "rvalue",
			pos:  position{line: 515, col: 1, offset: 11102},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 11115},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 4729},
						run: (*parser).callonrvalue2,
						expr: &labeledExpr{
							pos:   position{line: 225, col: 5, offset: 4729},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 225, col: 11, offset: 4735},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 225, col: 11, offset: 4735},
										run: (*parser).callonrvalue5,
										expr: &labeledExpr{
											pos:   position{line: 225, col: 11, offset: 4735},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 199, col: 5, offset: 4153},
												run: (*parser).callonrvalue7,
												expr: &seqExpr{
													pos: position{line: 199, col: 7, offset: 4155},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 199, col: 7, offset: 4155},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 199, col: 11, offset: 4159},
															expr: &choiceExpr{
																pos: position{line: 199, col: 13, offset: 4161},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 199, col: 13, offset: 4161},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 199, col: 20, offset: 4168},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 199, col: 20, offset: 4168},
																				expr: &litMatcher{
																					pos:        position{line: 199, col: 21, offset: 4169},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 199, col: 25, offset: 4173,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 200, col: 9, offset: 4188},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 200, col: 9, offset: 4188},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 200, col: 15, offset: 4194},
																	run: (*parser).callonrvalue19,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 227, col: 9, offset: 4847},
										run: (*parser).callonrvalue20,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 9, offset: 4847},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 212, col: 5, offset: 4462},
												run: (*parser).callonrvalue22,
												expr: &seqExpr{
													pos: position{line: 212, col: 7, offset: 4464},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 212, col: 7, offset: 4464},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 212, col: 11, offset: 4468},
															expr: &choiceExpr{
																pos: position{line: 212, col: 13, offset: 4470},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 212, col: 13, offset: 4470},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 212, col: 20, offset: 4477},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 212, col: 20, offset: 4477},
																				expr: &litMatcher{
																					pos:        position{line: 212, col: 21, offset: 4478},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 212, col: 25, offset: 4482,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 213, col: 9, offset: 4497},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 213, col: 9, offset: 4497},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 213, col: 15, offset: 4503},
																	run: (*parser).callonrvalue34,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 5382},
						run: (*parser).callonrvalue35,
						expr: &seqExpr{
							pos: position{line: 252, col: 5, offset: 5382},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 252, col: 5, offset: 5382},
									expr: &litMatcher{
										pos:        position{line: 252, col: 5, offset: 5382},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 252, col: 10, offset: 5387},
									expr: &charClassMatcher{
										pos:        position{line: 252, col: 10, offset: 5387},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 252, col: 17, offset: 5394},
									expr: &seqExpr{
										pos: position{line: 252, col: 18, offset: 5395},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 252, col: 18, offset: 5395},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 252, col: 22, offset: 5399},
												expr: &charClassMatcher{
													pos:        position{line: 252, col: 22, offset: 5399},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 13345},
						run: (*parser).callonrvalue46,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 5, offset: 13345},
							label: "ses",
							expr: &oneOrMoreExpr{
								pos: position{line: 606, col: 9, offset: 13349},
								expr: &actionExpr{
									pos: position{line: 616, col: 5, offset: 13536},
									run: (*parser).callonrvalue49,
									expr: &seqExpr{
										pos: position{line: 616, col: 5, offset: 13536},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 616, col: 5, offset: 13536},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 616, col: 9, offset: 13540},
												expr: &charClassMatcher{
													pos:        position{line: 616, col: 9, offset: 13540},
													val:        "[^][,]",
													chars:      []rune{']', '[', ','},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&choiceExpr{
												pos: position{line: 617, col: 9, offset: 13559},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 617, col: 9, offset: 13559},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
													&andCodeExpr{
														pos: position{line: 617, col: 15, offset: 13565},
														run: (*parser).callonrvalue56,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 516, col: 39, offset: 11149},
						name: "array",
					},
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 5102},
						run: (*parser).callonrvalue58,
						expr: &seqExpr{
							pos: position{line: 238, col: 7, offset: 5104},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 238, col: 7, offset: 5104},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 238, col: 11, offset: 5108},
									expr: &choiceExpr{
										pos: position{line: 238, col: 13, offset: 5110},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 238, col: 13, offset: 5110},
												val:        "\\/",
												ignoreCase: false,
												want:       "\"\\\\/\"",
											},
											&seqExpr{
												pos: position{line: 238, col: 20, offset: 5117},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 238, col: 20, offset: 5117},
														expr: &litMatcher{
															pos:        position{line: 238, col: 21, offset: 5118},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
													},
													&anyMatcher{
														line: 238, col: 25, offset: 5122,
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 239, col: 9, offset: 5137},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 239, col: 9, offset: 5137},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
										&andCodeExpr{
											pos: position{line: 239, col: 15, offset: 5143},
											run: (*parser).callonrvalue70,
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 516, col: 56, offset: 11166},
						run: (*parser).callonrvalue71,
					},
				},
			},
		},
		{
			name: "compareExpression",
			pos:  position{line: 550, col: 1, offset: 11904},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 11928},
				run: (*parser).calloncompareExpression1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 11928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 5, offset: 11928},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 8, offset: 11931},
								name: "rvalue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 17, offset: 11940},
							label: "co",
							expr: &actionExpr{
								pos: position{line: 561, col: 5, offset: 12182},
								run: (*parser).calloncompareExpression24,
								expr: &choiceExpr{
									pos: position{line: 561, col: 6, offset: 12183},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 561, col: 6, offset: 12183},
											val:        "==",
											ignoreCase: false,
											want:       "\"==\"",
										},
										&litMatcher{
											pos:        position{line: 561, col: 13, offset: 12190},
											val:        "!=",
											ignoreCase: false,
											want:       "\"!=\"",
										},
										&litMatcher{
											pos:        position{line: 561, col: 20, offset: 12197},
											val:        "<=",
											ignoreCase: false,
											want:       "\"<=\"",
										},
										&litMatcher{
											pos:        position{line: 561, col: 27, offset: 12204},
											val:        ">=",
											ignoreCase: false,
											want:       "\">=\"",
										},
										&charClassMatcher{
											pos:        position{line: 561, col: 34, offset: 12211},
											val:        "[<>]",
											chars:      []rune{'<', '>'},
											ignoreCase: false,
											inverted:   false,
										},
										&andCodeExpr{
											pos: position{line: 561, col: 46, offset: 12223},
											run: (*parser).calloncompareExpression31,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 38, offset: 11961},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 41, offset: 11964},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "regexpExpression",
			pos:  position{line: 572, col: 1, offset: 12507},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 12530},
				run: (*parser).callonregexpExpression1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 12530},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 573, col: 5, offset: 12530},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 8, offset: 12533},
								name: "rvalue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 18, offset: 12543},
							label: "ro",
							expr: &actionExpr{
								pos: position{line: 582, col: 5, offset: 12760},
								run: (*parser).callonregexpExpression24,
								expr: &choiceExpr{
									pos: position{line: 582, col: 6, offset: 12761},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 582, col: 6, offset: 12761},
											val:        "=~",
											ignoreCase: false,
											want:       "\"=~\"",
										},
										&litMatcher{
											pos:        position{line: 582, col: 13, offset: 12768},
											val:        "!~",
											ignoreCase: false,
											want:       "\"!~\"",
										},
										&andCodeExpr{
											pos: position{line: 582, col: 20, offset: 12775},
											run: (*parser).callonregexpExpression28,
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 47, col: 5, offset: 1000},
							expr: &choiceExpr{
								pos: position{line: 47, col: 6, offset: 1001},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 40, col: 5, offset: 858},
										expr: &seqExpr{
											pos: position{line: 40, col: 6, offset: 859},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 40, col: 6, offset: 859},
													expr: &oneOrMoreExpr{
														pos: position{line: 54, col: 5, offset: 1124},
														expr: &charClassMatcher{
															pos:        position{line: 54, col: 5, offset: 1124},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 40, col: 18, offset: 871},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 40, col: 22, offset: 875},
													expr: &charClassMatcher{
														pos:        position{line: 40, col: 22, offset: 875},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 40, col: 31, offset: 884},
													expr: &litMatcher{
														pos:        position{line: 40, col: 31, offset: 884},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 40, col: 38, offset: 891},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 40, col: 38, offset: 891},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 624, col: 7, offset: 13711},
															expr: &anyMatcher{
																line: 624, col: 8, offset: 13712,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 54, col: 5, offset: 1124},
										expr: &charClassMatcher{
											pos:        position{line: 54, col: 5, offset: 1124},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 38, offset: 12563},
							label: "rv",
							expr: &choiceExpr{
								pos: position{line: 573, col: 42, offset: 12567},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 225, col: 5, offset: 4729},
										run: (*parser).callonregexpExpression49,
										expr: &labeledExpr{
											pos:   position{line: 225, col: 5, offset: 4729},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 225, col: 11, offset: 4735},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 225, col: 11, offset: 4735},
														run: (*parser).callonregexpExpression52,
														expr: &labeledExpr{
															pos:   position{line: 225, col: 11, offset: 4735},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 199, col: 5, offset: 4153},
																run: (*parser).callonregexpExpression54,
																expr: &seqExpr{
																	pos: position{line: 199, col: 7, offset: 4155},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 199, col: 7, offset: 4155},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 199, col: 11, offset: 4159},
																			expr: &choiceExpr{
																				pos: position{line: 199, col: 13, offset: 4161},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 199, col: 13, offset: 4161},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 199, col: 20, offset: 4168},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 199, col: 20, offset: 4168},
																								expr: &litMatcher{
																									pos:        position{line: 199, col: 21, offset: 4169},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 199, col: 25, offset: 4173,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 200, col: 9, offset: 4188},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 200, col: 9, offset: 4188},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 200, col: 15, offset: 4194},
																					run: (*parser).callonregexpExpression66,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 227, col: 9, offset: 4847},
														run: (*parser).callonregexpExpression67,
														expr: &labeledExpr{
															pos:   position{line: 227, col: 9, offset: 4847},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 212, col: 5, offset: 4462},
																run: (*parser).callonregexpExpression69,
																expr: &seqExpr{
																	pos: position{line: 212, col: 7, offset: 4464},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 212, col: 7, offset: 4464},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 212, col: 11, offset: 4468},
																			expr: &choiceExpr{
																				pos: position{line: 212, col: 13, offset: 4470},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 212, col: 13, offset: 4470},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 212, col: 20, offset: 4477},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 212, col: 20, offset: 4477},
																								expr: &litMatcher{
																									pos:        position{line: 212, col: 21, offset: 4478},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 212, col: 25, offset: 4482,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 213, col: 9, offset: 4497},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 213, col: 9, offset: 4497},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 213, col: 15, offset: 4503},
																					run: (*parser).callonregexpExpression81,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 238, col: 5, offset: 5102},
										run: (*parser).callonregexpExpression82,
										expr: &seqExpr{
											pos: position{line: 238, col: 7, offset: 5104},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 238, col: 7, offset: 5104},
													val:        "/",
													ignoreCase: false,
													want:       "\"/\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 238, col: 11, offset: 5108},
													expr: &choiceExpr{
														pos: position{line: 238, col: 13, offset: 5110},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 238, col: 13, offset: 5110},
																val:        "\\/",
																ignoreCase: false,
																want:       "\"\\\\/\"",
															},
															&seqExpr{
																pos: position{line: 238, col: 20, offset: 5117},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 238, col: 20, offset: 5117},
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 21, offset: 5118},
																			val:        "/",
																			ignoreCase: false,
																			want:       "\"/\"",
																		},
																	},
																	&anyMatcher{
																		line: 238, col: 25, offset: 5122,
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 239, col: 9, offset: 5137},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 239, col: 9, offset: 5137},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
														&andCodeExpr{
															pos: position{line: 239, col: 15, offset: 5143},
															run: (*parser).callonregexpExpression94,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) oninit3() (bool, error) {
	return initParser()

}

func (p *parser) calloninit3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit3()
}

func (c *current) oninit6(conf interface{}) (interface{}, error) {
	return ret(conf)

}

func (p *parser) calloninit6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit6(stack["conf"])
}

func (c *current) oninit12() (interface{}, error) {
	return ast.NewConfig(nil, nil, nil), nil

}

func (p *parser) calloninit12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit12()
}

func (c *current) oninit1(conf interface{}) (interface{}, error) {
	return ret(conf)

}

func (p *parser) calloninit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit1(stack["conf"])
}

func (c *current) onconfig25(ps interface{}) (interface{}, error) {
	return ret(ps)

}

func (p *parser) callonconfig25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig25(stack["ps"])
}

func (c *current) onconfig1(ps, pss interface{}) (interface{}, error) {
	return config(ps, pss)

}

func (p *parser) callonconfig1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig1(stack["ps"], stack["pss"])
}

func (c *current) onpluginSection5() (interface{}, error) {
	return ast.Input, nil

}

func (p *parser) callonpluginSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection5()
}

func (c *current) onpluginSection7() (interface{}, error) {
	return ast.Filter, nil

}

func (p *parser) callonpluginSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection7()
}

func (c *current) onpluginSection9() (interface{}, error) {
	return ast.Output, nil

}

func (p *parser) callonpluginSection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection9()
}

func (c *current) onpluginSection11() (bool, error) {
	return pushError("expect plugin type (input, filter, output)", c)

}

func (p *parser) callonpluginSection11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection11()
}

func (c *current) onpluginSection51(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonpluginSection51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection51(stack["bop"])
}

func (c *current) onpluginSection75() (bool, error) {
	return pushError("expect closing curly bracket", c)

}

func (p *parser) callonpluginSection75() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection75()
}

func (c *current) onpluginSection1(pt, bops interface{}) (interface{}, error) {
	return pluginSection(pt, bops)

}

func (p *parser) callonpluginSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection1(stack["pt"], stack["bops"])
}

func (c *current) onplugin5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonplugin5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin5()
}

func (c *current) onplugin27() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonplugin27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin27()
}

func (c *current) onplugin15() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonplugin15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin15()
}

func (c *current) onplugin13(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonplugin13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin13(stack["str"])
}

func (c *current) onplugin42() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonplugin42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin42()
}

func (c *current) onplugin30() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonplugin30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin30()
}

func (c *current) onplugin28(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonplugin28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin28(stack["str"])
}

func (c *current) onplugin10(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonplugin10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin10(stack["str"])
}

func (c *current) onplugin8(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonplugin8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin8(stack["value"])
}

func (c *current) onplugin88(attribute interface{}) (interface{}, error) {
	return ret(attribute)

}

func (p *parser) callonplugin88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin88(stack["attribute"])
}

func (c *current) onplugin82(attribute, attrs interface{}) (interface{}, error) {
	return attributes(attribute, attrs)

}

func (p *parser) callonplugin82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin82(stack["attribute"], stack["attrs"])
}

func (c *current) onplugin132() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonplugin132() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin132()
}

func (c *current) onplugin1(name, attributes interface{}) (interface{}, error) {
	return plugin(name, attributes)

}

func (p *parser) callonplugin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin1(stack["name"], stack["attributes"])
}

func (c *current) onattribute5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonattribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute5()
}

func (c *current) onattribute27() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonattribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute27()
}

func (c *current) onattribute15() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonattribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute15()
}

func (c *current) onattribute13(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonattribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute13(stack["str"])
}

func (c *current) onattribute42() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonattribute42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute42()
}

func (c *current) onattribute30() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonattribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute30()
}

func (c *current) onattribute28(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonattribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute28(stack["str"])
}

func (c *current) onattribute10(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonattribute10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute10(stack["str"])
}

func (c *current) onattribute8(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonattribute8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute8(stack["value"])
}

func (c *current) onattribute1(name, value interface{}) (interface{}, error) {
	return attribute(name, value)

}

func (p *parser) callonattribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute1(stack["name"], stack["value"])
}

func (c *current) onvalue3() (interface{}, error) {
	return ast.NewStringAttribute("", string(c.text), ast.Bareword), nil

}

func (p *parser) callonvalue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue3()
}

func (c *current) onvalue25() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonvalue25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue25()
}

func (c *current) onvalue13() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonvalue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue13()
}

func (c *current) onvalue11(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonvalue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue11(stack["str"])
}

func (c *current) onvalue40() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonvalue40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue40()
}

func (c *current) onvalue28() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonvalue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue28()
}

func (c *current) onvalue26(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonvalue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue26(stack["str"])
}

func (c *current) onvalue8(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonvalue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue8(stack["str"])
}

func (c *current) onvalue41() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonvalue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue41()
}

func (c *current) onvalue54() (bool, error) {
	return pushError("invalid value", c)

}

func (p *parser) callonvalue54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue54()
}

func (c *current) onarray30(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonarray30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray30(stack["value"])
}

func (c *current) onarray24(value, values interface{}) (interface{}, error) {
	return attributes(value, values)

}

func (p *parser) callonarray24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray24(stack["value"], stack["values"])
}

func (c *current) onarray91() (bool, error) {
	return fatalError("expect closing square bracket", c)

}

func (p *parser) callonarray91() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray91()
}

func (c *current) onarray1(value interface{}) (interface{}, error) {
	return array(value)

}

func (p *parser) callonarray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray1(stack["value"])
}

func (c *current) onhash45() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonhash45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash45()
}

func (c *current) onhash1(entries interface{}) (interface{}, error) {
	return hash(entries)

}

func (p *parser) callonhash1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash1(stack["entries"])
}

func (c *current) onhashentries7(hashentry interface{}) (interface{}, error) {
	return ret(hashentry)

}

func (p *parser) callonhashentries7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries7(stack["hashentry"])
}

func (c *current) onhashentries1(hashentry, hashentries1 interface{}) (interface{}, error) {
	return hashentries(hashentry, hashentries1)

}

func (p *parser) callonhashentries1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries1(stack["hashentry"], stack["hashentries1"])
}

func (c *current) onhashentry5() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonhashentry5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry5()
}

func (c *current) onhashentry16() (interface{}, error) {
	return ast.NewStringAttribute("", string(c.text), ast.Bareword), nil

}

func (p *parser) callonhashentry16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry16()
}

func (c *current) onhashentry38() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonhashentry38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry38()
}

func (c *current) onhashentry26() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonhashentry26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry26()
}

func (c *current) onhashentry24(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonhashentry24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry24(stack["str"])
}

func (c *current) onhashentry53() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonhashentry53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry53()
}

func (c *current) onhashentry41() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonhashentry41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry41()
}

func (c *current) onhashentry39(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonhashentry39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry39(stack["str"])
}

func (c *current) onhashentry21(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonhashentry21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry21(stack["str"])
}

func (c *current) onhashentry1(name, value interface{}) (interface{}, error) {
	return hashentry(name, value)

}

func (p *parser) callonhashentry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry1(stack["name"], stack["value"])
}

func (c *current) onbranch7(eib interface{}) (interface{}, error) {
	return ret(eib)

}

func (p *parser) callonbranch7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch7(stack["eib"])
}

func (c *current) onbranch31(eb interface{}) (interface{}, error) {
	return ret(eb)

}

func (p *parser) callonbranch31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch31(stack["eb"])
}

func (c *current) onbranch1(ifBlock, elseIfBlocks, elseBlock interface{}) (interface{}, error) {
	return branch(ifBlock, elseIfBlocks, elseBlock)

}

func (p *parser) callonbranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch1(stack["ifBlock"], stack["elseIfBlocks"], stack["elseBlock"])
}

func (c *current) onifCond63(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonifCond63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond63(stack["bop"])
}

func (c *current) onifCond87() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonifCond87() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond87()
}

func (c *current) onifCond1(cond, bops interface{}) (interface{}, error) {
	return ifBlock(cond, bops)

}

func (p *parser) callonifCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond1(stack["cond"], stack["bops"])
}

func (c *current) onelseIf82(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonelseIf82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf82(stack["bop"])
}

func (c *current) onelseIf106() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonelseIf106() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf106()
}

func (c *current) onelseIf1(cond, bops interface{}) (interface{}, error) {
	return elseIfBlock(cond, bops)

}

func (p *parser) callonelseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf1(stack["cond"], stack["bops"])
}

func (c *current) onelseCond43(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonelseCond43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond43(stack["bop"])
}

func (c *current) onelseCond67() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonelseCond67() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond67()
}

func (c *current) onelseCond1(bops interface{}) (interface{}, error) {
	return elseBlock(bops)

}

func (p *parser) callonelseCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond1(stack["bops"])
}

func (c *current) oncondition34() (bool, error) {
	return pushError("expect boolean operator (and, or, xor, nand)", c)

}

func (p *parser) calloncondition34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition34()
}

func (c *current) oncondition28() (interface{}, error) {
	return booleanOperator(string(c.text))

}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28()
}

func (c *current) oncondition7(bo, cond interface{}) (interface{}, error) {
	return expression(bo, cond)

}

func (p *parser) calloncondition7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition7(stack["bo"], stack["cond"])
}

func (c *current) oncondition1(cond, conds interface{}) (interface{}, error) {
	return condition(cond, conds)

}

func (p *parser) calloncondition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition1(stack["cond"], stack["conds"])
}

func (c *current) onexpression2(cond interface{}) (interface{}, error) {
	return conditionExpression(cond)

}

func (p *parser) callonexpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression2(stack["cond"])
}

func (c *current) onexpression49(rv interface{}) (interface{}, error) {
	return rvalue(rv)

}

func (p *parser) callonexpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression49(stack["rv"])
}

func (c *current) onnegativeExpression64() (bool, error) {
	return fatalError("expect closing parenthesis", c)

}

func (p *parser) callonnegativeExpression64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression64()
}

func (c *current) onnegativeExpression2(cond interface{}) (interface{}, error) {
	return negativeExpression(cond)

}

func (p *parser) callonnegativeExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression2(stack["cond"])
}

func (c *current) onnegativeExpression97() (bool, error) {
	return pushError("expect closing square bracket", c)

}

func (p *parser) callonnegativeExpression97() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression97()
}

func (c *current) onnegativeExpression90() (interface{}, error) {
	return selectorElement(string(c.text))

}

func (p *parser) callonnegativeExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression90()
}

func (c *current) onnegativeExpression87(ses interface{}) (interface{}, error) {
	return selector(ses)

}

func (p *parser) callonnegativeExpression87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression87(stack["ses"])
}

func (c *current) onnegativeExpression65(sel interface{}) (interface{}, error) {
	return negativeSelector(sel)

}

func (p *parser) callonnegativeExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression65(stack["sel"])
}

func (c *current) oninExpression25() (bool, error) {
	return pushError("expect in operator (in)", c)

}

func (p *parser) calloninExpression25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression25()
}

func (c *current) oninExpression1(lv, rv interface{}) (interface{}, error) {
	return inExpression(lv, rv)

}

func (p *parser) calloninExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression1(stack["lv"], stack["rv"])
}

func (c *current) onnotInExpression45() (bool, error) {
	return pushError("expect not in operator (not in)", c)

}

func (p *parser) callonnotInExpression45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression45()
}

func (c *current) onnotInExpression1(lv, rv interface{}) (interface{}, error) {
	return notInExpression(lv, rv)

}

func (p *parser) callonnotInExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression1(stack["lv"], stack["rv"])
}

func (c *current) onrvalue19() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonrvalue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue19()
}

func (c *current) onrvalue7() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonrvalue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue7()
}

func (c *current) onrvalue5(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonrvalue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue5(stack["str"])
}

func (c *current) onrvalue34() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonrvalue34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue34()
}

func (c *current) onrvalue22() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonrvalue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue22()
}

func (c *current) onrvalue20(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonrvalue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue20(stack["str"])
}

func (c *current) onrvalue2(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonrvalue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue2(stack["str"])
}

func (c *current) onrvalue35() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonrvalue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue35()
}

func (c *current) onrvalue56() (bool, error) {
	return pushError("expect closing square bracket", c)

}

func (p *parser) callonrvalue56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue56()
}

func (c *current) onrvalue49() (interface{}, error) {
	return selectorElement(string(c.text))

}

func (p *parser) callonrvalue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue49()
}

func (c *current) onrvalue46(ses interface{}) (interface{}, error) {
	return selector(ses)

}

func (p *parser) callonrvalue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue46(stack["ses"])
}

func (c *current) onrvalue70() (bool, error) {
	return fatalError("expect closing slash (/) for regexp", c)

}

func (p *parser) callonrvalue70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue70()
}

func (c *current) onrvalue58() (interface{}, error) {
	return regexp(c)

}

func (p *parser) callonrvalue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue58()
}

func (c *current) onrvalue71() (bool, error) {
	return pushError("invalid value for expression", c)

}

func (p *parser) callonrvalue71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue71()
}

func (c *current) oncompareExpression31() (bool, error) {
	return pushError("expect compare operator (==, !=, <=, >=, <, >)", c)

}

func (p *parser) calloncompareExpression31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression31()
}

func (c *current) oncompareExpression24() (interface{}, error) {
	return compareOperator(string(c.text))

}

func (p *parser) calloncompareExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression24()
}

func (c *current) oncompareExpression1(lv, co, rv interface{}) (interface{}, error) {
	return compareExpression(lv, co, rv)

}

func (p *parser) calloncompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression1(stack["lv"], stack["co"], stack["rv"])
}

func (c *current) onregexpExpression28() (bool, error) {
	return pushError("expect regexp comparison operator (=~, !~)", c)

}

func (p *parser) callonregexpExpression28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression28()
}

func (c *current) onregexpExpression24() (interface{}, error) {
	return regexpOperator(string(c.text))

}

func (p *parser) callonregexpExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression24()
}

func (c *current) onregexpExpression66() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonregexpExpression66() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression66()
}

func (c *current) onregexpExpression54() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonregexpExpression54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression54()
}

func (c *current) onregexpExpression52(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonregexpExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression52(stack["str"])
}

func (c *current) onregexpExpression81() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonregexpExpression81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression81()
}

func (c *current) onregexpExpression69() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonregexpExpression69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression69()
}

func (c *current) onregexpExpression67(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonregexpExpression67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression67(stack["str"])
}

func (c *current) onregexpExpression49(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonregexpExpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression49(stack["str"])
}

func (c *current) onregexpExpression94() (bool, error) {
	return fatalError("expect closing slash (/) for regexp", c)

}

func (p *parser) callonregexpExpression94() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression94()
}

func (c *current) onregexpExpression82() (interface{}, error) {
	return regexp(c)

}

func (p *parser) callonregexpExpression82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression82()
}

func (c *current) onregexpExpression1(lv, ro, rv interface{}) (interface{}, error) {
	return regexpExpression(lv, ro, rv)

}

func (p *parser) callonregexpExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression1(stack["lv"], stack["ro"], stack["rv"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) { // nolint: deadcode
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []interface{}
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

// nolint: structcheck
type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr        // nolint: structcheck
type notExpr expr        // nolint: structcheck
type zeroOrOneExpr expr  // nolint: structcheck
type zeroOrMoreExpr expr // nolint: structcheck
type oneOrMoreExpr expr  // nolint: structcheck

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
