// Code generated by pigeon; DO NOT EDIT.

package config

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/breml/logstash-config/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "init",
			pos:  position{line: 7, col: 1, offset: 171},
			expr: &actionExpr{
				pos: position{line: 8, col: 5, offset: 182},
				run: (*parser).calloninit1,
				expr: &seqExpr{
					pos: position{line: 8, col: 5, offset: 182},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 8, col: 5, offset: 182},
							run: (*parser).calloninit3,
						},
						&andCodeExpr{
							pos: position{line: 11, col: 5, offset: 224},
							run: (*parser).calloninit4,
						},
						&labeledExpr{
							pos:   position{line: 13, col: 7, offset: 263},
							label: "conf",
							expr: &choiceExpr{
								pos: position{line: 14, col: 9, offset: 278},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 14, col: 9, offset: 278},
										run: (*parser).calloninit7,
										expr: &seqExpr{
											pos: position{line: 14, col: 9, offset: 278},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 14, col: 9, offset: 278},
													label: "conf",
													expr: &ruleRefExpr{
														pos:  position{line: 14, col: 14, offset: 283},
														name: "config",
													},
												},
												&notExpr{
													pos: position{line: 649, col: 7, offset: 15207},
													expr: &anyMatcher{
														line: 649, col: 8, offset: 15208,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 16, col: 13, offset: 339},
										run: (*parser).calloninit13,
										expr: &seqExpr{
											pos: position{line: 16, col: 13, offset: 339},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).calloninit17,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).calloninit21,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloninit33,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 649, col: 7, offset: 15207},
													expr: &anyMatcher{
														line: 649, col: 8, offset: 15208,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "config",
			pos:  position{line: 29, col: 1, offset: 636},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 649},
				run: (*parser).callonconfig1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 30, col: 5, offset: 649},
							label: "psComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonconfig6,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonconfig10,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonconfig22,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 17, offset: 661},
							label: "ps",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 20, offset: 664},
								name: "pluginSection",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 34, offset: 678},
							label: "pss",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 38, offset: 682},
								expr: &actionExpr{
									pos: position{line: 31, col: 9, offset: 692},
									run: (*parser).callonconfig29,
									expr: &seqExpr{
										pos: position{line: 31, col: 9, offset: 692},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 31, col: 9, offset: 692},
												label: "psComment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonconfig34,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonconfig38,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonconfig50,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 31, col: 21, offset: 704},
												label: "ps",
												expr: &ruleRefExpr{
													pos:  position{line: 31, col: 24, offset: 707},
													name: "pluginSection",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 8, offset: 790},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonconfig58,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonconfig62,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonconfig74,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 649, col: 7, offset: 15207},
							expr: &anyMatcher{
								line: 649, col: 8, offset: 15208,
							},
						},
					},
				},
			},
		},
		{
			name: "pluginSection",
			pos:  position{line: 83, col: 1, offset: 1916},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 1936},
				run: (*parser).callonpluginSection1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 1936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 1936},
							label: "pt",
							expr: &choiceExpr{
								pos: position{line: 108, col: 5, offset: 2405},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 108, col: 5, offset: 2405},
										run: (*parser).callonpluginSection5,
										expr: &litMatcher{
											pos:        position{line: 108, col: 5, offset: 2405},
											val:        "input",
											ignoreCase: false,
											want:       "\"input\"",
										},
									},
									&actionExpr{
										pos: position{line: 110, col: 9, offset: 2453},
										run: (*parser).callonpluginSection7,
										expr: &litMatcher{
											pos:        position{line: 110, col: 9, offset: 2453},
											val:        "filter",
											ignoreCase: false,
											want:       "\"filter\"",
										},
									},
									&actionExpr{
										pos: position{line: 112, col: 9, offset: 2503},
										run: (*parser).callonpluginSection9,
										expr: &litMatcher{
											pos:        position{line: 112, col: 9, offset: 2503},
											val:        "output",
											ignoreCase: false,
											want:       "\"output\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 114, col: 9, offset: 2553},
										run: (*parser).callonpluginSection11,
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonpluginSection12,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonpluginSection15,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonpluginSection19,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonpluginSection31,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonpluginSection34,
						},
						&litMatcher{
							pos:        position{line: 84, col: 22, offset: 1953},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 26, offset: 1957},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 31, offset: 1962},
								expr: &actionExpr{
									pos: position{line: 85, col: 9, offset: 1972},
									run: (*parser).callonpluginSection38,
									expr: &labeledExpr{
										pos:   position{line: 85, col: 9, offset: 1972},
										label: "bop",
										expr: &ruleRefExpr{
											pos:  position{line: 85, col: 13, offset: 1976},
											name: "branchOrPlugin",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 8, offset: 2040},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonpluginSection44,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonpluginSection48,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonpluginSection60,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 89, col: 9, offset: 2066},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 9, offset: 2066},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 89, col: 15, offset: 2072},
									run: (*parser).callonpluginSection65,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "branchOrPlugin",
			pos:  position{line: 100, col: 1, offset: 2279},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 2300},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 2300},
						name: "branch",
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 14, offset: 2309},
						name: "plugin",
					},
				},
			},
		},
		{
			name: "plugin",
			pos:  position{line: 134, col: 1, offset: 3002},
			expr: &actionExpr{
				pos: position{line: 135, col: 5, offset: 3015},
				run: (*parser).callonplugin1,
				expr: &seqExpr{
					pos: position{line: 135, col: 5, offset: 3015},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 135, col: 5, offset: 3015},
							label: "comment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonplugin6,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonplugin10,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonplugin22,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 15, offset: 3025},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 159, col: 7, offset: 3647},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 159, col: 7, offset: 3647},
										run: (*parser).callonplugin27,
										expr: &oneOrMoreExpr{
											pos: position{line: 159, col: 8, offset: 3648},
											expr: &charClassMatcher{
												pos:        position{line: 159, col: 8, offset: 3648},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 161, col: 9, offset: 3712},
										run: (*parser).callonplugin30,
										expr: &labeledExpr{
											pos:   position{line: 161, col: 9, offset: 3712},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 234, col: 5, offset: 5280},
												run: (*parser).callonplugin32,
												expr: &labeledExpr{
													pos:   position{line: 234, col: 5, offset: 5280},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 234, col: 11, offset: 5286},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 234, col: 11, offset: 5286},
																run: (*parser).callonplugin35,
																expr: &labeledExpr{
																	pos:   position{line: 234, col: 11, offset: 5286},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 208, col: 5, offset: 4704},
																		run: (*parser).callonplugin37,
																		expr: &seqExpr{
																			pos: position{line: 208, col: 7, offset: 4706},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 208, col: 7, offset: 4706},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 208, col: 11, offset: 4710},
																					expr: &choiceExpr{
																						pos: position{line: 208, col: 13, offset: 4712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 208, col: 13, offset: 4712},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 208, col: 20, offset: 4719},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 208, col: 20, offset: 4719},
																										expr: &litMatcher{
																											pos:        position{line: 208, col: 21, offset: 4720},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 208, col: 25, offset: 4724,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 209, col: 9, offset: 4739},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 209, col: 9, offset: 4739},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 209, col: 15, offset: 4745},
																							run: (*parser).callonplugin49,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 9, offset: 5361},
																run: (*parser).callonplugin50,
																expr: &labeledExpr{
																	pos:   position{line: 236, col: 9, offset: 5361},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 221, col: 5, offset: 5013},
																		run: (*parser).callonplugin52,
																		expr: &seqExpr{
																			pos: position{line: 221, col: 7, offset: 5015},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 221, col: 7, offset: 5015},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 221, col: 11, offset: 5019},
																					expr: &choiceExpr{
																						pos: position{line: 221, col: 13, offset: 5021},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 221, col: 13, offset: 5021},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 221, col: 20, offset: 5028},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 221, col: 20, offset: 5028},
																										expr: &litMatcher{
																											pos:        position{line: 221, col: 21, offset: 5029},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 221, col: 25, offset: 5033,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 222, col: 9, offset: 5048},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 222, col: 9, offset: 5048},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 222, col: 15, offset: 5054},
																							run: (*parser).callonplugin64,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonplugin65,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonplugin68,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonplugin72,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonplugin84,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonplugin87,
						},
						&litMatcher{
							pos:        position{line: 135, col: 28, offset: 3038},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 32, offset: 3042},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 135, col: 43, offset: 3053},
								expr: &actionExpr{
									pos: position{line: 136, col: 9, offset: 3063},
									run: (*parser).callonplugin91,
									expr: &seqExpr{
										pos: position{line: 136, col: 9, offset: 3063},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 136, col: 9, offset: 3063},
												label: "comment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonplugin96,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonplugin100,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonplugin112,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 136, col: 19, offset: 3073},
												label: "attribute",
												expr: &ruleRefExpr{
													pos:  position{line: 136, col: 29, offset: 3083},
													name: "attribute",
												},
											},
											&labeledExpr{
												pos:   position{line: 136, col: 39, offset: 3093},
												label: "attrs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 136, col: 45, offset: 3099},
													expr: &actionExpr{
														pos: position{line: 137, col: 13, offset: 3113},
														run: (*parser).callonplugin119,
														expr: &seqExpr{
															pos: position{line: 137, col: 13, offset: 3113},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	run: (*parser).callonplugin121,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		expr: &charClassMatcher{
																			pos:        position{line: 69, col: 5, offset: 1563},
																			val:        "[ \\t\\r\\n]",
																			chars:      []rune{' ', '\t', '\r', '\n'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 137, col: 24, offset: 3124},
																	label: "comment",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 52, col: 5, offset: 1171},
																		expr: &choiceExpr{
																			pos: position{line: 52, col: 6, offset: 1172},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 43, col: 5, offset: 996},
																					run: (*parser).callonplugin127,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 43, col: 5, offset: 996},
																						expr: &seqExpr{
																							pos: position{line: 43, col: 6, offset: 997},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 6, offset: 997},
																									expr: &actionExpr{
																										pos: position{line: 69, col: 5, offset: 1563},
																										run: (*parser).callonplugin131,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 69, col: 5, offset: 1563},
																											expr: &charClassMatcher{
																												pos:        position{line: 69, col: 5, offset: 1563},
																												val:        "[ \\t\\r\\n]",
																												chars:      []rune{' ', '\t', '\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 43, col: 18, offset: 1009},
																									val:        "#",
																									ignoreCase: false,
																									want:       "\"#\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 43, col: 22, offset: 1013},
																									expr: &charClassMatcher{
																										pos:        position{line: 43, col: 22, offset: 1013},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 31, offset: 1022},
																									expr: &litMatcher{
																										pos:        position{line: 43, col: 31, offset: 1022},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 43, col: 38, offset: 1029},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 43, col: 38, offset: 1029},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&notExpr{
																											pos: position{line: 649, col: 7, offset: 15207},
																											expr: &anyMatcher{
																												line: 649, col: 8, offset: 15208,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonplugin143,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 137, col: 34, offset: 3134},
																	label: "attribute",
																	expr: &ruleRefExpr{
																		pos:  position{line: 137, col: 44, offset: 3144},
																		name: "attribute",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 8, offset: 3327},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonplugin151,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonplugin155,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonplugin167,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 144, col: 9, offset: 3353},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 144, col: 9, offset: 3353},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 144, col: 15, offset: 3359},
									run: (*parser).callonplugin172,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute",
			pos:  position{line: 170, col: 1, offset: 3868},
			expr: &actionExpr{
				pos: position{line: 171, col: 5, offset: 3884},
				run: (*parser).callonattribute1,
				expr: &seqExpr{
					pos: position{line: 171, col: 5, offset: 3884},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 171, col: 5, offset: 3884},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 159, col: 7, offset: 3647},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 159, col: 7, offset: 3647},
										run: (*parser).callonattribute5,
										expr: &oneOrMoreExpr{
											pos: position{line: 159, col: 8, offset: 3648},
											expr: &charClassMatcher{
												pos:        position{line: 159, col: 8, offset: 3648},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 161, col: 9, offset: 3712},
										run: (*parser).callonattribute8,
										expr: &labeledExpr{
											pos:   position{line: 161, col: 9, offset: 3712},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 234, col: 5, offset: 5280},
												run: (*parser).callonattribute10,
												expr: &labeledExpr{
													pos:   position{line: 234, col: 5, offset: 5280},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 234, col: 11, offset: 5286},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 234, col: 11, offset: 5286},
																run: (*parser).callonattribute13,
																expr: &labeledExpr{
																	pos:   position{line: 234, col: 11, offset: 5286},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 208, col: 5, offset: 4704},
																		run: (*parser).callonattribute15,
																		expr: &seqExpr{
																			pos: position{line: 208, col: 7, offset: 4706},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 208, col: 7, offset: 4706},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 208, col: 11, offset: 4710},
																					expr: &choiceExpr{
																						pos: position{line: 208, col: 13, offset: 4712},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 208, col: 13, offset: 4712},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 208, col: 20, offset: 4719},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 208, col: 20, offset: 4719},
																										expr: &litMatcher{
																											pos:        position{line: 208, col: 21, offset: 4720},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 208, col: 25, offset: 4724,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 209, col: 9, offset: 4739},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 209, col: 9, offset: 4739},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 209, col: 15, offset: 4745},
																							run: (*parser).callonattribute27,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 9, offset: 5361},
																run: (*parser).callonattribute28,
																expr: &labeledExpr{
																	pos:   position{line: 236, col: 9, offset: 5361},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 221, col: 5, offset: 5013},
																		run: (*parser).callonattribute30,
																		expr: &seqExpr{
																			pos: position{line: 221, col: 7, offset: 5015},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 221, col: 7, offset: 5015},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 221, col: 11, offset: 5019},
																					expr: &choiceExpr{
																						pos: position{line: 221, col: 13, offset: 5021},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 221, col: 13, offset: 5021},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 221, col: 20, offset: 5028},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 221, col: 20, offset: 5028},
																										expr: &litMatcher{
																											pos:        position{line: 221, col: 21, offset: 5029},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 221, col: 25, offset: 5033,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 222, col: 9, offset: 5048},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 222, col: 9, offset: 5048},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 222, col: 15, offset: 5054},
																							run: (*parser).callonattribute42,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonattribute43,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonattribute46,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonattribute50,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonattribute62,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonattribute65,
						},
						&litMatcher{
							pos:        position{line: 171, col: 18, offset: 3897},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonattribute67,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonattribute70,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonattribute74,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonattribute86,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonattribute89,
						},
						&labeledExpr{
							pos:   position{line: 171, col: 26, offset: 3905},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 32, offset: 3911},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "value",
			pos:  position{line: 179, col: 1, offset: 4050},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 4062},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 4062},
						name: "plugin",
					},
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 4498},
						run: (*parser).callonvalue3,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 4498},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 199, col: 5, offset: 4498},
									val:        "[_A-Za-z]",
									chars:      []rune{'_'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 199, col: 15, offset: 4508},
									expr: &charClassMatcher{
										pos:        position{line: 199, col: 15, offset: 4508},
										val:        "[_A-Za-z0-9]",
										chars:      []rune{'_'},
										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 234, col: 5, offset: 5280},
						run: (*parser).callonvalue8,
						expr: &labeledExpr{
							pos:   position{line: 234, col: 5, offset: 5280},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 234, col: 11, offset: 5286},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 234, col: 11, offset: 5286},
										run: (*parser).callonvalue11,
										expr: &labeledExpr{
											pos:   position{line: 234, col: 11, offset: 5286},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 208, col: 5, offset: 4704},
												run: (*parser).callonvalue13,
												expr: &seqExpr{
													pos: position{line: 208, col: 7, offset: 4706},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 208, col: 7, offset: 4706},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 208, col: 11, offset: 4710},
															expr: &choiceExpr{
																pos: position{line: 208, col: 13, offset: 4712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 208, col: 13, offset: 4712},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 208, col: 20, offset: 4719},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 208, col: 20, offset: 4719},
																				expr: &litMatcher{
																					pos:        position{line: 208, col: 21, offset: 4720},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 208, col: 25, offset: 4724,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 209, col: 9, offset: 4739},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 209, col: 9, offset: 4739},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 209, col: 15, offset: 4745},
																	run: (*parser).callonvalue25,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 236, col: 9, offset: 5361},
										run: (*parser).callonvalue26,
										expr: &labeledExpr{
											pos:   position{line: 236, col: 9, offset: 5361},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 221, col: 5, offset: 5013},
												run: (*parser).callonvalue28,
												expr: &seqExpr{
													pos: position{line: 221, col: 7, offset: 5015},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 221, col: 7, offset: 5015},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 221, col: 11, offset: 5019},
															expr: &choiceExpr{
																pos: position{line: 221, col: 13, offset: 5021},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 221, col: 13, offset: 5021},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 221, col: 20, offset: 5028},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 221, col: 20, offset: 5028},
																				expr: &litMatcher{
																					pos:        position{line: 221, col: 21, offset: 5029},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 221, col: 25, offset: 5033,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 222, col: 9, offset: 5048},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 222, col: 9, offset: 5048},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 222, col: 15, offset: 5054},
																	run: (*parser).callonvalue40,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 5861},
						run: (*parser).callonvalue41,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 5861},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 261, col: 5, offset: 5861},
									expr: &litMatcher{
										pos:        position{line: 261, col: 5, offset: 5861},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 261, col: 10, offset: 5866},
									expr: &charClassMatcher{
										pos:        position{line: 261, col: 10, offset: 5866},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 17, offset: 5873},
									expr: &seqExpr{
										pos: position{line: 261, col: 18, offset: 5874},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 261, col: 18, offset: 5874},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 261, col: 22, offset: 5878},
												expr: &charClassMatcher{
													pos:        position{line: 261, col: 22, offset: 5878},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 48, offset: 4105},
						name: "array",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 56, offset: 4113},
						name: "hash",
					},
					&andCodeExpr{
						pos: position{line: 180, col: 63, offset: 4120},
						run: (*parser).callonvalue54,
					},
				},
			},
		},
		{
			name: "array",
			pos:  position{line: 280, col: 1, offset: 6278},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 6290},
				run: (*parser).callonarray1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 6290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 6290},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 9, offset: 6294},
							label: "values",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 16, offset: 6301},
								expr: &actionExpr{
									pos: position{line: 282, col: 9, offset: 6311},
									run: (*parser).callonarray6,
									expr: &seqExpr{
										pos: position{line: 282, col: 9, offset: 6311},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 282, col: 9, offset: 6311},
												label: "comment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonarray11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonarray15,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonarray27,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 282, col: 19, offset: 6321},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 282, col: 25, offset: 6327},
													name: "value",
												},
											},
											&labeledExpr{
												pos:   position{line: 282, col: 31, offset: 6333},
												label: "values",
												expr: &zeroOrMoreExpr{
													pos: position{line: 282, col: 38, offset: 6340},
													expr: &actionExpr{
														pos: position{line: 283, col: 13, offset: 6354},
														run: (*parser).callonarray34,
														expr: &seqExpr{
															pos: position{line: 283, col: 13, offset: 6354},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 58, col: 7, offset: 1366},
																	run: (*parser).callonarray36,
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 58, col: 7, offset: 1366},
																		expr: &choiceExpr{
																			pos: position{line: 58, col: 8, offset: 1367},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 43, col: 5, offset: 996},
																					run: (*parser).callonarray39,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 43, col: 5, offset: 996},
																						expr: &seqExpr{
																							pos: position{line: 43, col: 6, offset: 997},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 6, offset: 997},
																									expr: &actionExpr{
																										pos: position{line: 69, col: 5, offset: 1563},
																										run: (*parser).callonarray43,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 69, col: 5, offset: 1563},
																											expr: &charClassMatcher{
																												pos:        position{line: 69, col: 5, offset: 1563},
																												val:        "[ \\t\\r\\n]",
																												chars:      []rune{' ', '\t', '\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 43, col: 18, offset: 1009},
																									val:        "#",
																									ignoreCase: false,
																									want:       "\"#\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 43, col: 22, offset: 1013},
																									expr: &charClassMatcher{
																										pos:        position{line: 43, col: 22, offset: 1013},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 31, offset: 1022},
																									expr: &litMatcher{
																										pos:        position{line: 43, col: 31, offset: 1022},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 43, col: 38, offset: 1029},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 43, col: 38, offset: 1029},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&notExpr{
																											pos: position{line: 649, col: 7, offset: 15207},
																											expr: &anyMatcher{
																												line: 649, col: 8, offset: 15208,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonarray55,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&stateCodeExpr{
																	pos: position{line: 60, col: 9, offset: 1423},
																	run: (*parser).callonarray58,
																},
																&litMatcher{
																	pos:        position{line: 283, col: 16, offset: 6357},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&labeledExpr{
																	pos:   position{line: 283, col: 20, offset: 6361},
																	label: "comment",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 52, col: 5, offset: 1171},
																		expr: &choiceExpr{
																			pos: position{line: 52, col: 6, offset: 1172},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 43, col: 5, offset: 996},
																					run: (*parser).callonarray63,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 43, col: 5, offset: 996},
																						expr: &seqExpr{
																							pos: position{line: 43, col: 6, offset: 997},
																							exprs: []interface{}{
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 6, offset: 997},
																									expr: &actionExpr{
																										pos: position{line: 69, col: 5, offset: 1563},
																										run: (*parser).callonarray67,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 69, col: 5, offset: 1563},
																											expr: &charClassMatcher{
																												pos:        position{line: 69, col: 5, offset: 1563},
																												val:        "[ \\t\\r\\n]",
																												chars:      []rune{' ', '\t', '\r', '\n'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 43, col: 18, offset: 1009},
																									val:        "#",
																									ignoreCase: false,
																									want:       "\"#\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 43, col: 22, offset: 1013},
																									expr: &charClassMatcher{
																										pos:        position{line: 43, col: 22, offset: 1013},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																								&zeroOrOneExpr{
																									pos: position{line: 43, col: 31, offset: 1022},
																									expr: &litMatcher{
																										pos:        position{line: 43, col: 31, offset: 1022},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 43, col: 38, offset: 1029},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 43, col: 38, offset: 1029},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&notExpr{
																											pos: position{line: 649, col: 7, offset: 15207},
																											expr: &anyMatcher{
																												line: 649, col: 8, offset: 15208,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonarray79,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 283, col: 30, offset: 6371},
																	label: "value",
																	expr: &ruleRefExpr{
																		pos:  position{line: 283, col: 36, offset: 6377},
																		name: "value",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 8, offset: 6549},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonarray87,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonarray91,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonarray103,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 290, col: 9, offset: 6575},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 290, col: 9, offset: 6575},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&andCodeExpr{
									pos: position{line: 290, col: 15, offset: 6581},
									run: (*parser).callonarray108,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hash",
			pos:  position{line: 308, col: 1, offset: 6920},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 6931},
				run: (*parser).callonhash1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 6931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 6931},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 9, offset: 6935},
							label: "entries",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 17, offset: 6943},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 17, offset: 6943},
									name: "hashentries",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 30, offset: 6956},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonhash10,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonhash14,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonhash26,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 310, col: 9, offset: 6982},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 310, col: 9, offset: 6982},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 310, col: 15, offset: 6988},
									run: (*parser).callonhash31,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentries",
			pos:  position{line: 322, col: 1, offset: 7243},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 7261},
				run: (*parser).callonhashentries1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 7261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 7261},
							label: "hashentry",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 15, offset: 7271},
								name: "hashentry",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 25, offset: 7281},
							label: "hashentries1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 323, col: 38, offset: 7294},
								expr: &actionExpr{
									pos: position{line: 324, col: 9, offset: 7304},
									run: (*parser).callonhashentries7,
									expr: &seqExpr{
										pos: position{line: 324, col: 9, offset: 7304},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												run: (*parser).callonhashentries9,
												expr: &oneOrMoreExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													expr: &charClassMatcher{
														pos:        position{line: 69, col: 5, offset: 1563},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 324, col: 20, offset: 7315},
												label: "hashentry",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 30, offset: 7325},
													name: "hashentry",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentry",
			pos:  position{line: 336, col: 1, offset: 7581},
			expr: &actionExpr{
				pos: position{line: 337, col: 5, offset: 7597},
				run: (*parser).callonhashentry1,
				expr: &seqExpr{
					pos: position{line: 337, col: 5, offset: 7597},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 5, offset: 7597},
							label: "comment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonhashentry6,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonhashentry10,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonhashentry22,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 15, offset: 7607},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 337, col: 21, offset: 7613},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 261, col: 5, offset: 5861},
										run: (*parser).callonhashentry27,
										expr: &seqExpr{
											pos: position{line: 261, col: 5, offset: 5861},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 261, col: 5, offset: 5861},
													expr: &litMatcher{
														pos:        position{line: 261, col: 5, offset: 5861},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 261, col: 10, offset: 5866},
													expr: &charClassMatcher{
														pos:        position{line: 261, col: 10, offset: 5866},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 261, col: 17, offset: 5873},
													expr: &seqExpr{
														pos: position{line: 261, col: 18, offset: 5874},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 261, col: 18, offset: 5874},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 261, col: 22, offset: 5878},
																expr: &charClassMatcher{
																	pos:        position{line: 261, col: 22, offset: 5878},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 199, col: 5, offset: 4498},
										run: (*parser).callonhashentry38,
										expr: &seqExpr{
											pos: position{line: 199, col: 5, offset: 4498},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 199, col: 5, offset: 4498},
													val:        "[_A-Za-z]",
													chars:      []rune{'_'},
													ranges:     []rune{'A', 'Z', 'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&oneOrMoreExpr{
													pos: position{line: 199, col: 15, offset: 4508},
													expr: &charClassMatcher{
														pos:        position{line: 199, col: 15, offset: 4508},
														val:        "[_A-Za-z0-9]",
														chars:      []rune{'_'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 234, col: 5, offset: 5280},
										run: (*parser).callonhashentry43,
										expr: &labeledExpr{
											pos:   position{line: 234, col: 5, offset: 5280},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 234, col: 11, offset: 5286},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 234, col: 11, offset: 5286},
														run: (*parser).callonhashentry46,
														expr: &labeledExpr{
															pos:   position{line: 234, col: 11, offset: 5286},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 208, col: 5, offset: 4704},
																run: (*parser).callonhashentry48,
																expr: &seqExpr{
																	pos: position{line: 208, col: 7, offset: 4706},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 208, col: 7, offset: 4706},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 208, col: 11, offset: 4710},
																			expr: &choiceExpr{
																				pos: position{line: 208, col: 13, offset: 4712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 208, col: 13, offset: 4712},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 208, col: 20, offset: 4719},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 208, col: 20, offset: 4719},
																								expr: &litMatcher{
																									pos:        position{line: 208, col: 21, offset: 4720},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 208, col: 25, offset: 4724,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 209, col: 9, offset: 4739},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 209, col: 9, offset: 4739},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 209, col: 15, offset: 4745},
																					run: (*parser).callonhashentry60,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 236, col: 9, offset: 5361},
														run: (*parser).callonhashentry61,
														expr: &labeledExpr{
															pos:   position{line: 236, col: 9, offset: 5361},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 221, col: 5, offset: 5013},
																run: (*parser).callonhashentry63,
																expr: &seqExpr{
																	pos: position{line: 221, col: 7, offset: 5015},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 221, col: 7, offset: 5015},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 221, col: 11, offset: 5019},
																			expr: &choiceExpr{
																				pos: position{line: 221, col: 13, offset: 5021},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 221, col: 13, offset: 5021},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 221, col: 20, offset: 5028},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 221, col: 20, offset: 5028},
																								expr: &litMatcher{
																									pos:        position{line: 221, col: 21, offset: 5029},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 221, col: 25, offset: 5033,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 222, col: 9, offset: 5048},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 222, col: 9, offset: 5048},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 222, col: 15, offset: 5054},
																					run: (*parser).callonhashentry75,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonhashentry76,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonhashentry79,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonhashentry83,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonhashentry95,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonhashentry98,
						},
						&litMatcher{
							pos:        position{line: 337, col: 57, offset: 7649},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonhashentry100,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonhashentry103,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonhashentry107,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonhashentry119,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonhashentry122,
						},
						&labeledExpr{
							pos:   position{line: 337, col: 65, offset: 7657},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 71, offset: 7663},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "branch",
			pos:  position{line: 350, col: 1, offset: 7897},
			expr: &actionExpr{
				pos: position{line: 351, col: 5, offset: 7910},
				run: (*parser).callonbranch1,
				expr: &seqExpr{
					pos: position{line: 351, col: 5, offset: 7910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 5, offset: 7910},
							label: "ifComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonbranch6,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonbranch10,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonbranch22,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 17, offset: 7922},
							label: "ifBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 25, offset: 7930},
								name: "ifCond",
							},
						},
						&labeledExpr{
							pos:   position{line: 351, col: 32, offset: 7937},
							label: "elseIfBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 351, col: 45, offset: 7950},
								expr: &actionExpr{
									pos: position{line: 352, col: 9, offset: 7960},
									run: (*parser).callonbranch29,
									expr: &seqExpr{
										pos: position{line: 352, col: 9, offset: 7960},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 352, col: 9, offset: 7960},
												label: "eibComment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonbranch34,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonbranch38,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonbranch50,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 352, col: 22, offset: 7973},
												label: "eib",
												expr: &ruleRefExpr{
													pos:  position{line: 352, col: 26, offset: 7977},
													name: "elseIf",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 12, offset: 8067},
							label: "elseBlock",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 22, offset: 8077},
								expr: &actionExpr{
									pos: position{line: 356, col: 13, offset: 8091},
									run: (*parser).callonbranch57,
									expr: &seqExpr{
										pos: position{line: 356, col: 13, offset: 8091},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 356, col: 13, offset: 8091},
												label: "ebComment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonbranch62,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonbranch66,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonbranch78,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 356, col: 25, offset: 8103},
												label: "eb",
												expr: &ruleRefExpr{
													pos:  position{line: 356, col: 28, offset: 8106},
													name: "elseCond",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ifCond",
			pos:  position{line: 371, col: 1, offset: 8515},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 8528},
				run: (*parser).callonifCond1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 8528},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 8528},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonifCond4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonifCond7,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonifCond11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonifCond23,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonifCond26,
						},
						&labeledExpr{
							pos:   position{line: 372, col: 13, offset: 8536},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 18, offset: 8541},
								name: "condition",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonifCond29,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonifCond32,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonifCond36,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonifCond48,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonifCond51,
						},
						&litMatcher{
							pos:        position{line: 372, col: 31, offset: 8554},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 35, offset: 8558},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 372, col: 40, offset: 8563},
								expr: &actionExpr{
									pos: position{line: 373, col: 13, offset: 8577},
									run: (*parser).callonifCond55,
									expr: &seqExpr{
										pos: position{line: 373, col: 13, offset: 8577},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 373, col: 13, offset: 8577},
												label: "comment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonifCond60,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonifCond64,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonifCond76,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 373, col: 23, offset: 8587},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 373, col: 27, offset: 8591},
													name: "branchOrPlugin",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 376, col: 12, offset: 8694},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonifCond84,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonifCond88,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonifCond100,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 377, col: 13, offset: 8724},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 377, col: 13, offset: 8724},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 377, col: 19, offset: 8730},
									run: (*parser).callonifCond105,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseIf",
			pos:  position{line: 392, col: 1, offset: 9147},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 9160},
				run: (*parser).callonelseIf1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 9160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 9160},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonelseIf4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseIf7,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseIf11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseIf23,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonelseIf26,
						},
						&litMatcher{
							pos:        position{line: 393, col: 15, offset: 9170},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonelseIf28,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseIf31,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseIf35,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseIf47,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonelseIf50,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 23, offset: 9178},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 28, offset: 9183},
								name: "condition",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonelseIf53,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseIf56,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseIf60,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseIf72,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonelseIf75,
						},
						&litMatcher{
							pos:        position{line: 393, col: 41, offset: 9196},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 393, col: 45, offset: 9200},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 393, col: 50, offset: 9205},
								expr: &actionExpr{
									pos: position{line: 394, col: 9, offset: 9215},
									run: (*parser).callonelseIf79,
									expr: &seqExpr{
										pos: position{line: 394, col: 9, offset: 9215},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 394, col: 9, offset: 9215},
												label: "comment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonelseIf84,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonelseIf88,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseIf100,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 394, col: 19, offset: 9225},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 394, col: 23, offset: 9229},
													name: "branchOrPlugin",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 8, offset: 9320},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseIf108,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseIf112,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseIf124,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 398, col: 9, offset: 9346},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 398, col: 9, offset: 9346},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 398, col: 15, offset: 9352},
									run: (*parser).callonelseIf129,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseCond",
			pos:  position{line: 413, col: 1, offset: 9737},
			expr: &actionExpr{
				pos: position{line: 414, col: 5, offset: 9752},
				run: (*parser).callonelseCond1,
				expr: &seqExpr{
					pos: position{line: 414, col: 5, offset: 9752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 414, col: 5, offset: 9752},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonelseCond4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseCond7,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseCond11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseCond23,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonelseCond26,
						},
						&litMatcher{
							pos:        position{line: 414, col: 15, offset: 9762},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 19, offset: 9766},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 414, col: 24, offset: 9771},
								expr: &actionExpr{
									pos: position{line: 415, col: 9, offset: 9781},
									run: (*parser).callonelseCond30,
									expr: &seqExpr{
										pos: position{line: 415, col: 9, offset: 9781},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 415, col: 9, offset: 9781},
												label: "comment",
												expr: &zeroOrMoreExpr{
													pos: position{line: 52, col: 5, offset: 1171},
													expr: &choiceExpr{
														pos: position{line: 52, col: 6, offset: 1172},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).callonelseCond35,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).callonelseCond39,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseCond51,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 415, col: 19, offset: 9791},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 415, col: 23, offset: 9795},
													name: "branchOrPlugin",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 418, col: 8, offset: 9886},
							label: "footerComment",
							expr: &zeroOrMoreExpr{
								pos: position{line: 52, col: 5, offset: 1171},
								expr: &choiceExpr{
									pos: position{line: 52, col: 6, offset: 1172},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonelseCond59,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonelseCond63,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonelseCond75,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 419, col: 9, offset: 9912},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 9, offset: 9912},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 419, col: 15, offset: 9918},
									run: (*parser).callonelseCond80,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 431, col: 1, offset: 10183},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 10199},
				run: (*parser).calloncondition1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 10199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 432, col: 5, offset: 10199},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 10, offset: 10204},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 21, offset: 10215},
							label: "conds",
							expr: &zeroOrMoreExpr{
								pos: position{line: 432, col: 27, offset: 10221},
								expr: &actionExpr{
									pos: position{line: 433, col: 9, offset: 10231},
									run: (*parser).calloncondition7,
									expr: &seqExpr{
										pos: position{line: 433, col: 9, offset: 10231},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 58, col: 7, offset: 1366},
												run: (*parser).calloncondition9,
												expr: &zeroOrMoreExpr{
													pos: position{line: 58, col: 7, offset: 1366},
													expr: &choiceExpr{
														pos: position{line: 58, col: 8, offset: 1367},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).calloncondition12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).calloncondition16,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloncondition28,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 60, col: 9, offset: 1423},
												run: (*parser).calloncondition31,
											},
											&labeledExpr{
												pos:   position{line: 433, col: 12, offset: 10234},
												label: "bo",
												expr: &actionExpr{
													pos: position{line: 619, col: 5, offset: 14580},
													run: (*parser).calloncondition33,
													expr: &choiceExpr{
														pos: position{line: 619, col: 6, offset: 14581},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 619, col: 6, offset: 14581},
																val:        "and",
																ignoreCase: false,
																want:       "\"and\"",
															},
															&litMatcher{
																pos:        position{line: 619, col: 14, offset: 14589},
																val:        "or",
																ignoreCase: false,
																want:       "\"or\"",
															},
															&litMatcher{
																pos:        position{line: 619, col: 21, offset: 14596},
																val:        "xor",
																ignoreCase: false,
																want:       "\"xor\"",
															},
															&litMatcher{
																pos:        position{line: 619, col: 29, offset: 14604},
																val:        "nand",
																ignoreCase: false,
																want:       "\"nand\"",
															},
															&andCodeExpr{
																pos: position{line: 619, col: 38, offset: 14613},
																run: (*parser).calloncondition39,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 58, col: 7, offset: 1366},
												run: (*parser).calloncondition40,
												expr: &zeroOrMoreExpr{
													pos: position{line: 58, col: 7, offset: 1366},
													expr: &choiceExpr{
														pos: position{line: 58, col: 8, offset: 1367},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 43, col: 5, offset: 996},
																run: (*parser).calloncondition43,
																expr: &oneOrMoreExpr{
																	pos: position{line: 43, col: 5, offset: 996},
																	expr: &seqExpr{
																		pos: position{line: 43, col: 6, offset: 997},
																		exprs: []interface{}{
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 6, offset: 997},
																				expr: &actionExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					run: (*parser).calloncondition47,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 69, col: 5, offset: 1563},
																						expr: &charClassMatcher{
																							pos:        position{line: 69, col: 5, offset: 1563},
																							val:        "[ \\t\\r\\n]",
																							chars:      []rune{' ', '\t', '\r', '\n'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 43, col: 18, offset: 1009},
																				val:        "#",
																				ignoreCase: false,
																				want:       "\"#\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 43, col: 22, offset: 1013},
																				expr: &charClassMatcher{
																					pos:        position{line: 43, col: 22, offset: 1013},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																			&zeroOrOneExpr{
																				pos: position{line: 43, col: 31, offset: 1022},
																				expr: &litMatcher{
																					pos:        position{line: 43, col: 31, offset: 1022},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 43, col: 38, offset: 1029},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 43, col: 38, offset: 1029},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&notExpr{
																						pos: position{line: 649, col: 7, offset: 15207},
																						expr: &anyMatcher{
																							line: 649, col: 8, offset: 15208,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloncondition59,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 60, col: 9, offset: 1423},
												run: (*parser).calloncondition62,
											},
											&labeledExpr{
												pos:   position{line: 433, col: 34, offset: 10256},
												label: "cond",
												expr: &ruleRefExpr{
													pos:  position{line: 433, col: 39, offset: 10261},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "expression",
			pos:  position{line: 452, col: 1, offset: 10664},
			expr: &choiceExpr{
				pos: position{line: 454, col: 9, offset: 10691},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 13, offset: 10705},
						run: (*parser).callonexpression2,
						expr: &seqExpr{
							pos: position{line: 455, col: 13, offset: 10705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 455, col: 13, offset: 10705},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonexpression5,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonexpression8,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonexpression12,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonexpression24,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonexpression27,
								},
								&labeledExpr{
									pos:   position{line: 455, col: 20, offset: 10712},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 25, offset: 10717},
										name: "condition",
									},
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonexpression30,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonexpression33,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonexpression37,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonexpression49,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonexpression52,
								},
								&litMatcher{
									pos:        position{line: 455, col: 38, offset: 10730},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 459, col: 9, offset: 10819},
						name: "negativeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 9, offset: 10846},
						name: "inExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 9, offset: 10867},
						name: "notInExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 9, offset: 10891},
						name: "compareExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 463, col: 9, offset: 10917},
						name: "regexpExpression",
					},
					&actionExpr{
						pos: position{line: 464, col: 9, offset: 10942},
						run: (*parser).callonexpression59,
						expr: &labeledExpr{
							pos:   position{line: 464, col: 9, offset: 10942},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 12, offset: 10945},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "negativeExpression",
			pos:  position{line: 477, col: 1, offset: 11230},
			expr: &choiceExpr{
				pos: position{line: 479, col: 9, offset: 11265},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 480, col: 13, offset: 11279},
						run: (*parser).callonnegativeExpression2,
						expr: &seqExpr{
							pos: position{line: 480, col: 13, offset: 11279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 480, col: 13, offset: 11279},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonnegativeExpression5,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonnegativeExpression8,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonnegativeExpression12,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonnegativeExpression24,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonnegativeExpression27,
								},
								&litMatcher{
									pos:        position{line: 480, col: 20, offset: 11286},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonnegativeExpression29,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonnegativeExpression32,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonnegativeExpression36,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonnegativeExpression48,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonnegativeExpression51,
								},
								&labeledExpr{
									pos:   position{line: 480, col: 27, offset: 11293},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 480, col: 32, offset: 11298},
										name: "condition",
									},
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonnegativeExpression54,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonnegativeExpression57,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonnegativeExpression61,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonnegativeExpression73,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonnegativeExpression76,
								},
								&choiceExpr{
									pos: position{line: 481, col: 17, offset: 11329},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 481, col: 17, offset: 11329},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
										&andCodeExpr{
											pos: position{line: 481, col: 23, offset: 11335},
											run: (*parser).callonnegativeExpression79,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 11, offset: 11536},
						run: (*parser).callonnegativeExpression80,
						expr: &seqExpr{
							pos: position{line: 489, col: 11, offset: 11536},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 489, col: 11, offset: 11536},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&actionExpr{
									pos: position{line: 58, col: 7, offset: 1366},
									run: (*parser).callonnegativeExpression83,
									expr: &zeroOrMoreExpr{
										pos: position{line: 58, col: 7, offset: 1366},
										expr: &choiceExpr{
											pos: position{line: 58, col: 8, offset: 1367},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 43, col: 5, offset: 996},
													run: (*parser).callonnegativeExpression86,
													expr: &oneOrMoreExpr{
														pos: position{line: 43, col: 5, offset: 996},
														expr: &seqExpr{
															pos: position{line: 43, col: 6, offset: 997},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	expr: &actionExpr{
																		pos: position{line: 69, col: 5, offset: 1563},
																		run: (*parser).callonnegativeExpression90,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 69, col: 5, offset: 1563},
																			expr: &charClassMatcher{
																				pos:        position{line: 69, col: 5, offset: 1563},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 43, col: 18, offset: 1009},
																	val:        "#",
																	ignoreCase: false,
																	want:       "\"#\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 43, col: 22, offset: 1013},
																	expr: &charClassMatcher{
																		pos:        position{line: 43, col: 22, offset: 1013},
																		val:        "[^\\r\\n]",
																		chars:      []rune{'\r', '\n'},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
																&zeroOrOneExpr{
																	pos: position{line: 43, col: 31, offset: 1022},
																	expr: &litMatcher{
																		pos:        position{line: 43, col: 31, offset: 1022},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
																&choiceExpr{
																	pos: position{line: 43, col: 38, offset: 1029},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 43, col: 38, offset: 1029},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&notExpr{
																			pos: position{line: 649, col: 7, offset: 15207},
																			expr: &anyMatcher{
																				line: 649, col: 8, offset: 15208,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 69, col: 5, offset: 1563},
													run: (*parser).callonnegativeExpression102,
													expr: &oneOrMoreExpr{
														pos: position{line: 69, col: 5, offset: 1563},
														expr: &charClassMatcher{
															pos:        position{line: 69, col: 5, offset: 1563},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 60, col: 9, offset: 1423},
									run: (*parser).callonnegativeExpression105,
								},
								&labeledExpr{
									pos:   position{line: 489, col: 18, offset: 11543},
									label: "sel",
									expr: &actionExpr{
										pos: position{line: 631, col: 5, offset: 14852},
										run: (*parser).callonnegativeExpression107,
										expr: &labeledExpr{
											pos:   position{line: 631, col: 5, offset: 14852},
											label: "ses",
											expr: &oneOrMoreExpr{
												pos: position{line: 631, col: 9, offset: 14856},
												expr: &actionExpr{
													pos: position{line: 641, col: 5, offset: 15045},
													run: (*parser).callonnegativeExpression110,
													expr: &seqExpr{
														pos: position{line: 641, col: 5, offset: 15045},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 641, col: 5, offset: 15045},
																val:        "[",
																ignoreCase: false,
																want:       "\"[\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 641, col: 9, offset: 15049},
																expr: &charClassMatcher{
																	pos:        position{line: 641, col: 9, offset: 15049},
																	val:        "[^][,]",
																	chars:      []rune{']', '[', ','},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&choiceExpr{
																pos: position{line: 642, col: 9, offset: 15068},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 642, col: 9, offset: 15068},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 642, col: 15, offset: 15074},
																		run: (*parser).callonnegativeExpression117,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "inExpression",
			pos:  position{line: 500, col: 1, offset: 11748},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 11767},
				run: (*parser).calloninExpression1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 11767},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 501, col: 5, offset: 11767},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 8, offset: 11770},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).calloninExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).calloninExpression8,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloninExpression12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).calloninExpression24,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).calloninExpression27,
						},
						&choiceExpr{
							pos: position{line: 520, col: 5, offset: 12151},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 520, col: 5, offset: 12151},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&andCodeExpr{
									pos: position{line: 520, col: 12, offset: 12158},
									run: (*parser).calloninExpression30,
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).calloninExpression31,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).calloninExpression34,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloninExpression38,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).calloninExpression50,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).calloninExpression53,
						},
						&labeledExpr{
							pos:   position{line: 501, col: 32, offset: 11794},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 35, offset: 11797},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "notInExpression",
			pos:  position{line: 510, col: 1, offset: 11978},
			expr: &actionExpr{
				pos: position{line: 511, col: 5, offset: 12000},
				run: (*parser).callonnotInExpression1,
				expr: &seqExpr{
					pos: position{line: 511, col: 5, offset: 12000},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 511, col: 5, offset: 12000},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 8, offset: 12003},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonnotInExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonnotInExpression8,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonnotInExpression12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonnotInExpression24,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonnotInExpression27,
						},
						&choiceExpr{
							pos: position{line: 529, col: 5, offset: 12299},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 529, col: 5, offset: 12299},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 529, col: 5, offset: 12299},
											val:        "not ",
											ignoreCase: false,
											want:       "\"not \"",
										},
										&actionExpr{
											pos: position{line: 58, col: 7, offset: 1366},
											run: (*parser).callonnotInExpression31,
											expr: &zeroOrMoreExpr{
												pos: position{line: 58, col: 7, offset: 1366},
												expr: &choiceExpr{
													pos: position{line: 58, col: 8, offset: 1367},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 43, col: 5, offset: 996},
															run: (*parser).callonnotInExpression34,
															expr: &oneOrMoreExpr{
																pos: position{line: 43, col: 5, offset: 996},
																expr: &seqExpr{
																	pos: position{line: 43, col: 6, offset: 997},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 6, offset: 997},
																			expr: &actionExpr{
																				pos: position{line: 69, col: 5, offset: 1563},
																				run: (*parser).callonnotInExpression38,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 69, col: 5, offset: 1563},
																					expr: &charClassMatcher{
																						pos:        position{line: 69, col: 5, offset: 1563},
																						val:        "[ \\t\\r\\n]",
																						chars:      []rune{' ', '\t', '\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 43, col: 18, offset: 1009},
																			val:        "#",
																			ignoreCase: false,
																			want:       "\"#\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 43, col: 22, offset: 1013},
																			expr: &charClassMatcher{
																				pos:        position{line: 43, col: 22, offset: 1013},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 31, offset: 1022},
																			expr: &litMatcher{
																				pos:        position{line: 43, col: 31, offset: 1022},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 43, col: 38, offset: 1029},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 43, col: 38, offset: 1029},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&notExpr{
																					pos: position{line: 649, col: 7, offset: 15207},
																					expr: &anyMatcher{
																						line: 649, col: 8, offset: 15208,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 69, col: 5, offset: 1563},
															run: (*parser).callonnotInExpression50,
															expr: &oneOrMoreExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																expr: &charClassMatcher{
																	pos:        position{line: 69, col: 5, offset: 1563},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 60, col: 9, offset: 1423},
											run: (*parser).callonnotInExpression53,
										},
										&litMatcher{
											pos:        position{line: 529, col: 15, offset: 12309},
											val:        "in",
											ignoreCase: false,
											want:       "\"in\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 529, col: 22, offset: 12316},
									run: (*parser).callonnotInExpression55,
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonnotInExpression56,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonnotInExpression59,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonnotInExpression63,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonnotInExpression75,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonnotInExpression78,
						},
						&labeledExpr{
							pos:   position{line: 511, col: 35, offset: 12030},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 38, offset: 12033},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "rvalue",
			pos:  position{line: 540, col: 1, offset: 12641},
			expr: &choiceExpr{
				pos: position{line: 541, col: 5, offset: 12654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 234, col: 5, offset: 5280},
						run: (*parser).callonrvalue2,
						expr: &labeledExpr{
							pos:   position{line: 234, col: 5, offset: 5280},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 234, col: 11, offset: 5286},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 234, col: 11, offset: 5286},
										run: (*parser).callonrvalue5,
										expr: &labeledExpr{
											pos:   position{line: 234, col: 11, offset: 5286},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 208, col: 5, offset: 4704},
												run: (*parser).callonrvalue7,
												expr: &seqExpr{
													pos: position{line: 208, col: 7, offset: 4706},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 208, col: 7, offset: 4706},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 208, col: 11, offset: 4710},
															expr: &choiceExpr{
																pos: position{line: 208, col: 13, offset: 4712},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 208, col: 13, offset: 4712},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 208, col: 20, offset: 4719},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 208, col: 20, offset: 4719},
																				expr: &litMatcher{
																					pos:        position{line: 208, col: 21, offset: 4720},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 208, col: 25, offset: 4724,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 209, col: 9, offset: 4739},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 209, col: 9, offset: 4739},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 209, col: 15, offset: 4745},
																	run: (*parser).callonrvalue19,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 236, col: 9, offset: 5361},
										run: (*parser).callonrvalue20,
										expr: &labeledExpr{
											pos:   position{line: 236, col: 9, offset: 5361},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 221, col: 5, offset: 5013},
												run: (*parser).callonrvalue22,
												expr: &seqExpr{
													pos: position{line: 221, col: 7, offset: 5015},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 221, col: 7, offset: 5015},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 221, col: 11, offset: 5019},
															expr: &choiceExpr{
																pos: position{line: 221, col: 13, offset: 5021},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 221, col: 13, offset: 5021},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 221, col: 20, offset: 5028},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 221, col: 20, offset: 5028},
																				expr: &litMatcher{
																					pos:        position{line: 221, col: 21, offset: 5029},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 221, col: 25, offset: 5033,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 222, col: 9, offset: 5048},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 222, col: 9, offset: 5048},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 222, col: 15, offset: 5054},
																	run: (*parser).callonrvalue34,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 5861},
						run: (*parser).callonrvalue35,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 5861},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 261, col: 5, offset: 5861},
									expr: &litMatcher{
										pos:        position{line: 261, col: 5, offset: 5861},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 261, col: 10, offset: 5866},
									expr: &charClassMatcher{
										pos:        position{line: 261, col: 10, offset: 5866},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 17, offset: 5873},
									expr: &seqExpr{
										pos: position{line: 261, col: 18, offset: 5874},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 261, col: 18, offset: 5874},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 261, col: 22, offset: 5878},
												expr: &charClassMatcher{
													pos:        position{line: 261, col: 22, offset: 5878},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 14852},
						run: (*parser).callonrvalue46,
						expr: &labeledExpr{
							pos:   position{line: 631, col: 5, offset: 14852},
							label: "ses",
							expr: &oneOrMoreExpr{
								pos: position{line: 631, col: 9, offset: 14856},
								expr: &actionExpr{
									pos: position{line: 641, col: 5, offset: 15045},
									run: (*parser).callonrvalue49,
									expr: &seqExpr{
										pos: position{line: 641, col: 5, offset: 15045},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 641, col: 5, offset: 15045},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 641, col: 9, offset: 15049},
												expr: &charClassMatcher{
													pos:        position{line: 641, col: 9, offset: 15049},
													val:        "[^][,]",
													chars:      []rune{']', '[', ','},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&choiceExpr{
												pos: position{line: 642, col: 9, offset: 15068},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 642, col: 9, offset: 15068},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
													&andCodeExpr{
														pos: position{line: 642, col: 15, offset: 15074},
														run: (*parser).callonrvalue56,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 39, offset: 12688},
						name: "array",
					},
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 5581},
						run: (*parser).callonrvalue58,
						expr: &seqExpr{
							pos: position{line: 247, col: 7, offset: 5583},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 247, col: 7, offset: 5583},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 247, col: 11, offset: 5587},
									expr: &choiceExpr{
										pos: position{line: 247, col: 13, offset: 5589},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 247, col: 13, offset: 5589},
												val:        "\\/",
												ignoreCase: false,
												want:       "\"\\\\/\"",
											},
											&seqExpr{
												pos: position{line: 247, col: 20, offset: 5596},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 247, col: 20, offset: 5596},
														expr: &litMatcher{
															pos:        position{line: 247, col: 21, offset: 5597},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
													},
													&anyMatcher{
														line: 247, col: 25, offset: 5601,
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 248, col: 9, offset: 5616},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 248, col: 9, offset: 5616},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
										&andCodeExpr{
											pos: position{line: 248, col: 15, offset: 5622},
											run: (*parser).callonrvalue70,
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 541, col: 56, offset: 12705},
						run: (*parser).callonrvalue71,
					},
				},
			},
		},
		{
			name: "compareExpression",
			pos:  position{line: 575, col: 1, offset: 13442},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 13466},
				run: (*parser).calloncompareExpression1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 13466},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 13466},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 8, offset: 13469},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).calloncompareExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).calloncompareExpression8,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloncompareExpression12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).calloncompareExpression24,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).calloncompareExpression27,
						},
						&labeledExpr{
							pos:   position{line: 576, col: 18, offset: 13479},
							label: "co",
							expr: &actionExpr{
								pos: position{line: 586, col: 5, offset: 13724},
								run: (*parser).calloncompareExpression29,
								expr: &choiceExpr{
									pos: position{line: 586, col: 6, offset: 13725},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 586, col: 6, offset: 13725},
											val:        "==",
											ignoreCase: false,
											want:       "\"==\"",
										},
										&litMatcher{
											pos:        position{line: 586, col: 13, offset: 13732},
											val:        "!=",
											ignoreCase: false,
											want:       "\"!=\"",
										},
										&litMatcher{
											pos:        position{line: 586, col: 20, offset: 13739},
											val:        "<=",
											ignoreCase: false,
											want:       "\"<=\"",
										},
										&litMatcher{
											pos:        position{line: 586, col: 27, offset: 13746},
											val:        ">=",
											ignoreCase: false,
											want:       "\">=\"",
										},
										&charClassMatcher{
											pos:        position{line: 586, col: 34, offset: 13753},
											val:        "[<>]",
											chars:      []rune{'<', '>'},
											ignoreCase: false,
											inverted:   false,
										},
										&andCodeExpr{
											pos: position{line: 586, col: 46, offset: 13765},
											run: (*parser).calloncompareExpression36,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).calloncompareExpression37,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).calloncompareExpression40,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).calloncompareExpression44,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).calloncompareExpression56,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).calloncompareExpression59,
						},
						&labeledExpr{
							pos:   position{line: 576, col: 40, offset: 13501},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 43, offset: 13504},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "regexpExpression",
			pos:  position{line: 597, col: 1, offset: 14036},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 14059},
				run: (*parser).callonregexpExpression1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 14059},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 14059},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 8, offset: 14062},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonregexpExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonregexpExpression8,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonregexpExpression12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonregexpExpression24,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonregexpExpression27,
						},
						&labeledExpr{
							pos:   position{line: 598, col: 19, offset: 14073},
							label: "ro",
							expr: &actionExpr{
								pos: position{line: 607, col: 5, offset: 14293},
								run: (*parser).callonregexpExpression29,
								expr: &choiceExpr{
									pos: position{line: 607, col: 6, offset: 14294},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 607, col: 6, offset: 14294},
											val:        "=~",
											ignoreCase: false,
											want:       "\"=~\"",
										},
										&litMatcher{
											pos:        position{line: 607, col: 13, offset: 14301},
											val:        "!~",
											ignoreCase: false,
											want:       "\"!~\"",
										},
										&andCodeExpr{
											pos: position{line: 607, col: 20, offset: 14308},
											run: (*parser).callonregexpExpression33,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 58, col: 7, offset: 1366},
							run: (*parser).callonregexpExpression34,
							expr: &zeroOrMoreExpr{
								pos: position{line: 58, col: 7, offset: 1366},
								expr: &choiceExpr{
									pos: position{line: 58, col: 8, offset: 1367},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 43, col: 5, offset: 996},
											run: (*parser).callonregexpExpression37,
											expr: &oneOrMoreExpr{
												pos: position{line: 43, col: 5, offset: 996},
												expr: &seqExpr{
													pos: position{line: 43, col: 6, offset: 997},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 43, col: 6, offset: 997},
															expr: &actionExpr{
																pos: position{line: 69, col: 5, offset: 1563},
																run: (*parser).callonregexpExpression41,
																expr: &oneOrMoreExpr{
																	pos: position{line: 69, col: 5, offset: 1563},
																	expr: &charClassMatcher{
																		pos:        position{line: 69, col: 5, offset: 1563},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 43, col: 18, offset: 1009},
															val:        "#",
															ignoreCase: false,
															want:       "\"#\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 43, col: 22, offset: 1013},
															expr: &charClassMatcher{
																pos:        position{line: 43, col: 22, offset: 1013},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&zeroOrOneExpr{
															pos: position{line: 43, col: 31, offset: 1022},
															expr: &litMatcher{
																pos:        position{line: 43, col: 31, offset: 1022},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
														&choiceExpr{
															pos: position{line: 43, col: 38, offset: 1029},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 43, col: 38, offset: 1029},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&notExpr{
																	pos: position{line: 649, col: 7, offset: 15207},
																	expr: &anyMatcher{
																		line: 649, col: 8, offset: 15208,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 69, col: 5, offset: 1563},
											run: (*parser).callonregexpExpression53,
											expr: &oneOrMoreExpr{
												pos: position{line: 69, col: 5, offset: 1563},
												expr: &charClassMatcher{
													pos:        position{line: 69, col: 5, offset: 1563},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 60, col: 9, offset: 1423},
							run: (*parser).callonregexpExpression56,
						},
						&labeledExpr{
							pos:   position{line: 598, col: 40, offset: 14094},
							label: "rv",
							expr: &choiceExpr{
								pos: position{line: 598, col: 44, offset: 14098},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 234, col: 5, offset: 5280},
										run: (*parser).callonregexpExpression59,
										expr: &labeledExpr{
											pos:   position{line: 234, col: 5, offset: 5280},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 234, col: 11, offset: 5286},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 234, col: 11, offset: 5286},
														run: (*parser).callonregexpExpression62,
														expr: &labeledExpr{
															pos:   position{line: 234, col: 11, offset: 5286},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 208, col: 5, offset: 4704},
																run: (*parser).callonregexpExpression64,
																expr: &seqExpr{
																	pos: position{line: 208, col: 7, offset: 4706},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 208, col: 7, offset: 4706},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 208, col: 11, offset: 4710},
																			expr: &choiceExpr{
																				pos: position{line: 208, col: 13, offset: 4712},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 208, col: 13, offset: 4712},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 208, col: 20, offset: 4719},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 208, col: 20, offset: 4719},
																								expr: &litMatcher{
																									pos:        position{line: 208, col: 21, offset: 4720},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 208, col: 25, offset: 4724,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 209, col: 9, offset: 4739},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 209, col: 9, offset: 4739},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 209, col: 15, offset: 4745},
																					run: (*parser).callonregexpExpression76,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 236, col: 9, offset: 5361},
														run: (*parser).callonregexpExpression77,
														expr: &labeledExpr{
															pos:   position{line: 236, col: 9, offset: 5361},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 221, col: 5, offset: 5013},
																run: (*parser).callonregexpExpression79,
																expr: &seqExpr{
																	pos: position{line: 221, col: 7, offset: 5015},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 221, col: 7, offset: 5015},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 221, col: 11, offset: 5019},
																			expr: &choiceExpr{
																				pos: position{line: 221, col: 13, offset: 5021},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 221, col: 13, offset: 5021},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 221, col: 20, offset: 5028},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 221, col: 20, offset: 5028},
																								expr: &litMatcher{
																									pos:        position{line: 221, col: 21, offset: 5029},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 221, col: 25, offset: 5033,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 222, col: 9, offset: 5048},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 222, col: 9, offset: 5048},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 222, col: 15, offset: 5054},
																					run: (*parser).callonregexpExpression91,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 247, col: 5, offset: 5581},
										run: (*parser).callonregexpExpression92,
										expr: &seqExpr{
											pos: position{line: 247, col: 7, offset: 5583},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 247, col: 7, offset: 5583},
													val:        "/",
													ignoreCase: false,
													want:       "\"/\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 247, col: 11, offset: 5587},
													expr: &choiceExpr{
														pos: position{line: 247, col: 13, offset: 5589},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 247, col: 13, offset: 5589},
																val:        "\\/",
																ignoreCase: false,
																want:       "\"\\\\/\"",
															},
															&seqExpr{
																pos: position{line: 247, col: 20, offset: 5596},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 247, col: 20, offset: 5596},
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 21, offset: 5597},
																			val:        "/",
																			ignoreCase: false,
																			want:       "\"/\"",
																		},
																	},
																	&anyMatcher{
																		line: 247, col: 25, offset: 5601,
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 248, col: 9, offset: 5616},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 248, col: 9, offset: 5616},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
														&andCodeExpr{
															pos: position{line: 248, col: 15, offset: 5622},
															run: (*parser).callonregexpExpression104,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) oninit3() error {
	return c.initState()

}

func (p *parser) calloninit3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit3()
}

func (c *current) oninit4() (bool, error) {
	return c.initParser()

}

func (p *parser) calloninit4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit4()
}

func (c *current) oninit7(conf interface{}) (interface{}, error) {
	return c.ret(conf)

}

func (p *parser) calloninit7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit7(stack["conf"])
}

func (c *current) oninit21() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninit21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit21()
}

func (c *current) oninit17() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloninit17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit17()
}

func (c *current) oninit33() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninit33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit33()
}

func (c *current) oninit13() (interface{}, error) {
	return ast.NewConfig(nil, nil, nil), nil

}

func (p *parser) calloninit13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit13()
}

func (c *current) oninit1(conf interface{}) (interface{}, error) {
	return c.retConfig(conf)

}

func (p *parser) calloninit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit1(stack["conf"])
}

func (c *current) onconfig10() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig10()
}

func (c *current) onconfig6() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonconfig6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig6()
}

func (c *current) onconfig22() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig22()
}

func (c *current) onconfig38() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig38()
}

func (c *current) onconfig34() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonconfig34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig34()
}

func (c *current) onconfig50() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig50()
}

func (c *current) onconfig29(psComment, ps interface{}) (interface{}, error) {
	return c.configSection(ps, psComment)

}

func (p *parser) callonconfig29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig29(stack["psComment"], stack["ps"])
}

func (c *current) onconfig62() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig62()
}

func (c *current) onconfig58() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonconfig58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig58()
}

func (c *current) onconfig74() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonconfig74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig74()
}

func (c *current) onconfig1(psComment, ps, pss, footerComment interface{}) (interface{}, error) {
	return c.config(ps, pss, psComment, footerComment)

}

func (p *parser) callonconfig1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig1(stack["psComment"], stack["ps"], stack["pss"], stack["footerComment"])
}

func (c *current) onpluginSection5() (interface{}, error) {
	return ast.Input, nil

}

func (p *parser) callonpluginSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection5()
}

func (c *current) onpluginSection7() (interface{}, error) {
	return ast.Filter, nil

}

func (p *parser) callonpluginSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection7()
}

func (c *current) onpluginSection9() (interface{}, error) {
	return ast.Output, nil

}

func (p *parser) callonpluginSection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection9()
}

func (c *current) onpluginSection11() (bool, error) {
	return c.pushError("expect plugin type (input, filter, output)")

}

func (p *parser) callonpluginSection11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection11()
}

func (c *current) onpluginSection19() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonpluginSection19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection19()
}

func (c *current) onpluginSection15() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonpluginSection15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection15()
}

func (c *current) onpluginSection31() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonpluginSection31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection31()
}

func (c *current) onpluginSection12(pt interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonpluginSection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection12(stack["pt"])
}

func (c *current) onpluginSection34(pt interface{}) error {
	return c.warnComment()

}

func (p *parser) callonpluginSection34() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection34(stack["pt"])
}

func (c *current) onpluginSection38(bop interface{}) (interface{}, error) {
	return c.ret(bop)

}

func (p *parser) callonpluginSection38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection38(stack["bop"])
}

func (c *current) onpluginSection48() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonpluginSection48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection48()
}

func (c *current) onpluginSection44() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonpluginSection44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection44()
}

func (c *current) onpluginSection60() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonpluginSection60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection60()
}

func (c *current) onpluginSection65() (bool, error) {
	return c.pushError("expect closing curly bracket")

}

func (p *parser) callonpluginSection65() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection65()
}

func (c *current) onpluginSection1(pt, bops, footerComment interface{}) (interface{}, error) {
	return c.pluginSection(pt, bops, footerComment)

}

func (p *parser) callonpluginSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection1(stack["pt"], stack["bops"], stack["footerComment"])
}

func (c *current) onplugin10() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin10()
}

func (c *current) onplugin6() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonplugin6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin6()
}

func (c *current) onplugin22() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin22()
}

func (c *current) onplugin27() (interface{}, error) {
	return c.string(ast.Bareword)

}

func (p *parser) callonplugin27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin27()
}

func (c *current) onplugin49() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonplugin49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin49()
}

func (c *current) onplugin37() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonplugin37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin37()
}

func (c *current) onplugin35(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonplugin35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin35(stack["str"])
}

func (c *current) onplugin64() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonplugin64() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin64()
}

func (c *current) onplugin52() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonplugin52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin52()
}

func (c *current) onplugin50(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonplugin50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin50(stack["str"])
}

func (c *current) onplugin32(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonplugin32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin32(stack["str"])
}

func (c *current) onplugin30(value interface{}) (interface{}, error) {
	return c.ret(value)

}

func (p *parser) callonplugin30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin30(stack["value"])
}

func (c *current) onplugin72() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin72()
}

func (c *current) onplugin68() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonplugin68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin68()
}

func (c *current) onplugin84() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin84()
}

func (c *current) onplugin65(comment, name interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonplugin65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin65(stack["comment"], stack["name"])
}

func (c *current) onplugin87(comment, name interface{}) error {
	return c.warnComment()

}

func (p *parser) callonplugin87() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin87(stack["comment"], stack["name"])
}

func (c *current) onplugin100() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin100()
}

func (c *current) onplugin96() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonplugin96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin96()
}

func (c *current) onplugin112() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin112()
}

func (c *current) onplugin121() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin121()
}

func (c *current) onplugin131() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin131()
}

func (c *current) onplugin127() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonplugin127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin127()
}

func (c *current) onplugin143() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin143()
}

func (c *current) onplugin119(comment, attribute interface{}) (interface{}, error) {
	return c.attributeComment(attribute, comment, true)

}

func (p *parser) callonplugin119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin119(stack["comment"], stack["attribute"])
}

func (c *current) onplugin91(comment, attribute, attrs interface{}) (interface{}, error) {
	return c.attributes(attribute, attrs, comment)

}

func (p *parser) callonplugin91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin91(stack["comment"], stack["attribute"], stack["attrs"])
}

func (c *current) onplugin155() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin155()
}

func (c *current) onplugin151() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonplugin151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin151()
}

func (c *current) onplugin167() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonplugin167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin167()
}

func (c *current) onplugin172() (bool, error) {
	return c.fatalError("expect closing curly bracket")

}

func (p *parser) callonplugin172() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin172()
}

func (c *current) onplugin1(comment, name, attributes, footerComment interface{}) (interface{}, error) {
	return c.plugin(name, attributes, comment, footerComment)

}

func (p *parser) callonplugin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin1(stack["comment"], stack["name"], stack["attributes"], stack["footerComment"])
}

func (c *current) onattribute5() (interface{}, error) {
	return c.string(ast.Bareword)

}

func (p *parser) callonattribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute5()
}

func (c *current) onattribute27() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonattribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute27()
}

func (c *current) onattribute15() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonattribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute15()
}

func (c *current) onattribute13(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonattribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute13(stack["str"])
}

func (c *current) onattribute42() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonattribute42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute42()
}

func (c *current) onattribute30() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonattribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute30()
}

func (c *current) onattribute28(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonattribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute28(stack["str"])
}

func (c *current) onattribute10(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonattribute10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute10(stack["str"])
}

func (c *current) onattribute8(value interface{}) (interface{}, error) {
	return c.ret(value)

}

func (p *parser) callonattribute8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute8(stack["value"])
}

func (c *current) onattribute50() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonattribute50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute50()
}

func (c *current) onattribute46() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonattribute46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute46()
}

func (c *current) onattribute62() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonattribute62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute62()
}

func (c *current) onattribute43(name interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonattribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute43(stack["name"])
}

func (c *current) onattribute65(name interface{}) error {
	return c.warnComment()

}

func (p *parser) callonattribute65() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute65(stack["name"])
}

func (c *current) onattribute74() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonattribute74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute74()
}

func (c *current) onattribute70() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonattribute70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute70()
}

func (c *current) onattribute86() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonattribute86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute86()
}

func (c *current) onattribute67(name interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonattribute67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute67(stack["name"])
}

func (c *current) onattribute89(name interface{}) error {
	return c.warnComment()

}

func (p *parser) callonattribute89() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute89(stack["name"])
}

func (c *current) onattribute1(name, value interface{}) (interface{}, error) {
	return c.attribute(name, value)

}

func (p *parser) callonattribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute1(stack["name"], stack["value"])
}

func (c *current) onvalue3() (interface{}, error) {
	return c.string(ast.Bareword)

}

func (p *parser) callonvalue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue3()
}

func (c *current) onvalue25() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonvalue25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue25()
}

func (c *current) onvalue13() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonvalue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue13()
}

func (c *current) onvalue11(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonvalue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue11(stack["str"])
}

func (c *current) onvalue40() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonvalue40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue40()
}

func (c *current) onvalue28() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonvalue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue28()
}

func (c *current) onvalue26(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonvalue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue26(stack["str"])
}

func (c *current) onvalue8(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonvalue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue8(stack["str"])
}

func (c *current) onvalue41() (interface{}, error) {
	return c.number()

}

func (p *parser) callonvalue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue41()
}

func (c *current) onvalue54() (bool, error) {
	return c.pushError("invalid value")

}

func (p *parser) callonvalue54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue54()
}

func (c *current) onarray15() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray15()
}

func (c *current) onarray11() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonarray11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray11()
}

func (c *current) onarray27() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray27()
}

func (c *current) onarray43() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray43()
}

func (c *current) onarray39() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonarray39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray39()
}

func (c *current) onarray55() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray55()
}

func (c *current) onarray36() (interface{}, error) {
	return c.str()

}

func (p *parser) callonarray36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray36()
}

func (c *current) onarray58() error {
	return c.warnComment()

}

func (p *parser) callonarray58() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray58()
}

func (c *current) onarray67() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray67()
}

func (c *current) onarray63() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonarray63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray63()
}

func (c *current) onarray79() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray79()
}

func (c *current) onarray34(comment, value interface{}) (interface{}, error) {
	return c.attributeComment(value, comment, true)

}

func (p *parser) callonarray34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray34(stack["comment"], stack["value"])
}

func (c *current) onarray6(comment, value, values interface{}) (interface{}, error) {
	return c.attributes(value, values, comment)

}

func (p *parser) callonarray6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray6(stack["comment"], stack["value"], stack["values"])
}

func (c *current) onarray91() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray91()
}

func (c *current) onarray87() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonarray87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray87()
}

func (c *current) onarray103() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonarray103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray103()
}

func (c *current) onarray108() (bool, error) {
	return c.fatalError("expect closing square bracket")

}

func (p *parser) callonarray108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray108()
}

func (c *current) onarray1(values, footerComment interface{}) (interface{}, error) {
	return c.array(values, footerComment)

}

func (p *parser) callonarray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray1(stack["values"], stack["footerComment"])
}

func (c *current) onhash14() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhash14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash14()
}

func (c *current) onhash10() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonhash10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash10()
}

func (c *current) onhash26() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhash26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash26()
}

func (c *current) onhash31() (bool, error) {
	return c.fatalError("expect closing curly bracket")

}

func (p *parser) callonhash31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash31()
}

func (c *current) onhash1(entries, footerComment interface{}) (interface{}, error) {
	return c.hash(entries, footerComment)

}

func (p *parser) callonhash1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash1(stack["entries"], stack["footerComment"])
}

func (c *current) onhashentries9() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries9()
}

func (c *current) onhashentries7(hashentry interface{}) (interface{}, error) {
	return c.ret(hashentry)

}

func (p *parser) callonhashentries7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries7(stack["hashentry"])
}

func (c *current) onhashentries1(hashentry, hashentries1 interface{}) (interface{}, error) {
	return c.hashentries(hashentry, hashentries1)

}

func (p *parser) callonhashentries1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries1(stack["hashentry"], stack["hashentries1"])
}

func (c *current) onhashentry10() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry10()
}

func (c *current) onhashentry6() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonhashentry6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry6()
}

func (c *current) onhashentry22() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry22()
}

func (c *current) onhashentry27() (interface{}, error) {
	return c.number()

}

func (p *parser) callonhashentry27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry27()
}

func (c *current) onhashentry38() (interface{}, error) {
	return c.string(ast.Bareword)

}

func (p *parser) callonhashentry38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry38()
}

func (c *current) onhashentry60() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonhashentry60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry60()
}

func (c *current) onhashentry48() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonhashentry48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry48()
}

func (c *current) onhashentry46(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonhashentry46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry46(stack["str"])
}

func (c *current) onhashentry75() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonhashentry75() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry75()
}

func (c *current) onhashentry63() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonhashentry63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry63()
}

func (c *current) onhashentry61(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonhashentry61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry61(stack["str"])
}

func (c *current) onhashentry43(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonhashentry43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry43(stack["str"])
}

func (c *current) onhashentry83() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry83()
}

func (c *current) onhashentry79() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonhashentry79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry79()
}

func (c *current) onhashentry95() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry95()
}

func (c *current) onhashentry76(comment, name interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonhashentry76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry76(stack["comment"], stack["name"])
}

func (c *current) onhashentry98(comment, name interface{}) error {
	return c.warnComment()

}

func (p *parser) callonhashentry98() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry98(stack["comment"], stack["name"])
}

func (c *current) onhashentry107() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry107()
}

func (c *current) onhashentry103() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonhashentry103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry103()
}

func (c *current) onhashentry119() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonhashentry119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry119()
}

func (c *current) onhashentry100(comment, name interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonhashentry100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry100(stack["comment"], stack["name"])
}

func (c *current) onhashentry122(comment, name interface{}) error {
	return c.warnComment()

}

func (p *parser) callonhashentry122() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry122(stack["comment"], stack["name"])
}

func (c *current) onhashentry1(comment, name, value interface{}) (interface{}, error) {
	return c.hashentry(name, value, comment)

}

func (p *parser) callonhashentry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry1(stack["comment"], stack["name"], stack["value"])
}

func (c *current) onbranch10() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch10()
}

func (c *current) onbranch6() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonbranch6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch6()
}

func (c *current) onbranch22() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch22()
}

func (c *current) onbranch38() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch38()
}

func (c *current) onbranch34() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonbranch34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch34()
}

func (c *current) onbranch50() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch50()
}

func (c *current) onbranch29(eibComment, eib interface{}) (interface{}, error) {
	return c.elseIfComment(eib, eibComment)

}

func (p *parser) callonbranch29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch29(stack["eibComment"], stack["eib"])
}

func (c *current) onbranch66() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch66()
}

func (c *current) onbranch62() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonbranch62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch62()
}

func (c *current) onbranch78() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonbranch78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch78()
}

func (c *current) onbranch57(ebComment, eb interface{}) (interface{}, error) {
	return c.elseComment(eb, ebComment)

}

func (p *parser) callonbranch57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch57(stack["ebComment"], stack["eb"])
}

func (c *current) onbranch1(ifComment, ifBlock, elseIfBlocks, elseBlock interface{}) (interface{}, error) {
	return c.branch(ifBlock, elseIfBlocks, elseBlock, ifComment)

}

func (p *parser) callonbranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch1(stack["ifComment"], stack["ifBlock"], stack["elseIfBlocks"], stack["elseBlock"])
}

func (c *current) onifCond11() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond11()
}

func (c *current) onifCond7() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonifCond7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond7()
}

func (c *current) onifCond23() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond23()
}

func (c *current) onifCond4() (interface{}, error) {
	return c.str()

}

func (p *parser) callonifCond4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond4()
}

func (c *current) onifCond26() error {
	return c.warnComment()

}

func (p *parser) callonifCond26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond26()
}

func (c *current) onifCond36() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond36()
}

func (c *current) onifCond32() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonifCond32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond32()
}

func (c *current) onifCond48() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond48()
}

func (c *current) onifCond29(cond interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonifCond29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond29(stack["cond"])
}

func (c *current) onifCond51(cond interface{}) error {
	return c.warnComment()

}

func (p *parser) callonifCond51() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond51(stack["cond"])
}

func (c *current) onifCond64() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond64()
}

func (c *current) onifCond60() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonifCond60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond60()
}

func (c *current) onifCond76() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond76()
}

func (c *current) onifCond55(comment, bop interface{}) (interface{}, error) {
	return c.branchOrPluginComment(bop, comment)

}

func (p *parser) callonifCond55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond55(stack["comment"], stack["bop"])
}

func (c *current) onifCond88() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond88()
}

func (c *current) onifCond84() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonifCond84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond84()
}

func (c *current) onifCond100() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonifCond100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond100()
}

func (c *current) onifCond105() (bool, error) {
	return c.fatalError("expect closing curly bracket")

}

func (p *parser) callonifCond105() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond105()
}

func (c *current) onifCond1(cond, bops, footerComment interface{}) (interface{}, error) {
	return c.ifBlock(cond, bops, footerComment)

}

func (p *parser) callonifCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond1(stack["cond"], stack["bops"], stack["footerComment"])
}

func (c *current) onelseIf11() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf11()
}

func (c *current) onelseIf7() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseIf7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf7()
}

func (c *current) onelseIf23() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf23()
}

func (c *current) onelseIf4() (interface{}, error) {
	return c.str()

}

func (p *parser) callonelseIf4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf4()
}

func (c *current) onelseIf26() error {
	return c.warnComment()

}

func (p *parser) callonelseIf26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf26()
}

func (c *current) onelseIf35() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf35()
}

func (c *current) onelseIf31() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseIf31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf31()
}

func (c *current) onelseIf47() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf47()
}

func (c *current) onelseIf28() (interface{}, error) {
	return c.str()

}

func (p *parser) callonelseIf28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf28()
}

func (c *current) onelseIf50() error {
	return c.warnComment()

}

func (p *parser) callonelseIf50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf50()
}

func (c *current) onelseIf60() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf60()
}

func (c *current) onelseIf56() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseIf56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf56()
}

func (c *current) onelseIf72() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf72()
}

func (c *current) onelseIf53(cond interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonelseIf53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf53(stack["cond"])
}

func (c *current) onelseIf75(cond interface{}) error {
	return c.warnComment()

}

func (p *parser) callonelseIf75() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf75(stack["cond"])
}

func (c *current) onelseIf88() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf88()
}

func (c *current) onelseIf84() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseIf84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf84()
}

func (c *current) onelseIf100() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf100()
}

func (c *current) onelseIf79(comment, bop interface{}) (interface{}, error) {
	return c.branchOrPluginComment(bop, comment)

}

func (p *parser) callonelseIf79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf79(stack["comment"], stack["bop"])
}

func (c *current) onelseIf112() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf112()
}

func (c *current) onelseIf108() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseIf108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf108()
}

func (c *current) onelseIf124() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseIf124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf124()
}

func (c *current) onelseIf129() (bool, error) {
	return c.fatalError("expect closing curly bracket")

}

func (p *parser) callonelseIf129() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf129()
}

func (c *current) onelseIf1(cond, bops, footerComment interface{}) (interface{}, error) {
	return c.elseIfBlock(cond, bops, footerComment)

}

func (p *parser) callonelseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf1(stack["cond"], stack["bops"], stack["footerComment"])
}

func (c *current) onelseCond11() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond11()
}

func (c *current) onelseCond7() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseCond7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond7()
}

func (c *current) onelseCond23() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond23()
}

func (c *current) onelseCond4() (interface{}, error) {
	return c.str()

}

func (p *parser) callonelseCond4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond4()
}

func (c *current) onelseCond26() error {
	return c.warnComment()

}

func (p *parser) callonelseCond26() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond26()
}

func (c *current) onelseCond39() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond39()
}

func (c *current) onelseCond35() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseCond35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond35()
}

func (c *current) onelseCond51() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond51()
}

func (c *current) onelseCond30(comment, bop interface{}) (interface{}, error) {
	return c.branchOrPluginComment(bop, comment)

}

func (p *parser) callonelseCond30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond30(stack["comment"], stack["bop"])
}

func (c *current) onelseCond63() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond63()
}

func (c *current) onelseCond59() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonelseCond59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond59()
}

func (c *current) onelseCond75() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonelseCond75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond75()
}

func (c *current) onelseCond80() (bool, error) {
	return c.fatalError("expect closing curly bracket")

}

func (p *parser) callonelseCond80() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond80()
}

func (c *current) onelseCond1(bops, footerComment interface{}) (interface{}, error) {
	return c.elseBlock(bops, footerComment)

}

func (p *parser) callonelseCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond1(stack["bops"], stack["footerComment"])
}

func (c *current) oncondition16() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncondition16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition16()
}

func (c *current) oncondition12() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloncondition12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition12()
}

func (c *current) oncondition28() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncondition28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28()
}

func (c *current) oncondition9() (interface{}, error) {
	return c.str()

}

func (p *parser) calloncondition9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition9()
}

func (c *current) oncondition31() error {
	return c.warnComment()

}

func (p *parser) calloncondition31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition31()
}

func (c *current) oncondition39() (bool, error) {
	return c.pushError("expect boolean operator (and, or, xor, nand)")

}

func (p *parser) calloncondition39() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition39()
}

func (c *current) oncondition33() (interface{}, error) {
	return c.booleanOperator()

}

func (p *parser) calloncondition33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition33()
}

func (c *current) oncondition47() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncondition47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition47()
}

func (c *current) oncondition43() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloncondition43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition43()
}

func (c *current) oncondition59() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncondition59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition59()
}

func (c *current) oncondition40(bo interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) calloncondition40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition40(stack["bo"])
}

func (c *current) oncondition62(bo interface{}) error {
	return c.warnComment()

}

func (p *parser) calloncondition62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition62(stack["bo"])
}

func (c *current) oncondition7(bo, cond interface{}) (interface{}, error) {
	return c.expression(bo, cond)

}

func (p *parser) calloncondition7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition7(stack["bo"], stack["cond"])
}

func (c *current) oncondition1(cond, conds interface{}) (interface{}, error) {
	return c.condition(cond, conds)

}

func (p *parser) calloncondition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition1(stack["cond"], stack["conds"])
}

func (c *current) onexpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonexpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression12()
}

func (c *current) onexpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonexpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression8()
}

func (c *current) onexpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonexpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression24()
}

func (c *current) onexpression5() (interface{}, error) {
	return c.str()

}

func (p *parser) callonexpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression5()
}

func (c *current) onexpression27() error {
	return c.warnComment()

}

func (p *parser) callonexpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression27()
}

func (c *current) onexpression37() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonexpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression37()
}

func (c *current) onexpression33() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonexpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression33()
}

func (c *current) onexpression49() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonexpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression49()
}

func (c *current) onexpression30(cond interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonexpression30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression30(stack["cond"])
}

func (c *current) onexpression52(cond interface{}) error {
	return c.warnComment()

}

func (p *parser) callonexpression52() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression52(stack["cond"])
}

func (c *current) onexpression2(cond interface{}) (interface{}, error) {
	return c.conditionExpression(cond)

}

func (p *parser) callonexpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression2(stack["cond"])
}

func (c *current) onexpression59(rv interface{}) (interface{}, error) {
	return c.rvalue(rv)

}

func (p *parser) callonexpression59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression59(stack["rv"])
}

func (c *current) onnegativeExpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression12()
}

func (c *current) onnegativeExpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnegativeExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression8()
}

func (c *current) onnegativeExpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression24()
}

func (c *current) onnegativeExpression5() (interface{}, error) {
	return c.str()

}

func (p *parser) callonnegativeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression5()
}

func (c *current) onnegativeExpression27() error {
	return c.warnComment()

}

func (p *parser) callonnegativeExpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression27()
}

func (c *current) onnegativeExpression36() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression36()
}

func (c *current) onnegativeExpression32() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnegativeExpression32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression32()
}

func (c *current) onnegativeExpression48() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression48()
}

func (c *current) onnegativeExpression29() (interface{}, error) {
	return c.str()

}

func (p *parser) callonnegativeExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression29()
}

func (c *current) onnegativeExpression51() error {
	return c.warnComment()

}

func (p *parser) callonnegativeExpression51() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression51()
}

func (c *current) onnegativeExpression61() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression61()
}

func (c *current) onnegativeExpression57() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnegativeExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression57()
}

func (c *current) onnegativeExpression73() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression73()
}

func (c *current) onnegativeExpression54(cond interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonnegativeExpression54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression54(stack["cond"])
}

func (c *current) onnegativeExpression76(cond interface{}) error {
	return c.warnComment()

}

func (p *parser) callonnegativeExpression76() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression76(stack["cond"])
}

func (c *current) onnegativeExpression79() (bool, error) {
	return c.fatalError("expect closing parenthesis")

}

func (p *parser) callonnegativeExpression79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression79()
}

func (c *current) onnegativeExpression2(cond interface{}) (interface{}, error) {
	return c.negativeExpression(cond)

}

func (p *parser) callonnegativeExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression2(stack["cond"])
}

func (c *current) onnegativeExpression90() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression90()
}

func (c *current) onnegativeExpression86() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnegativeExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression86()
}

func (c *current) onnegativeExpression102() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnegativeExpression102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression102()
}

func (c *current) onnegativeExpression83() (interface{}, error) {
	return c.str()

}

func (p *parser) callonnegativeExpression83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression83()
}

func (c *current) onnegativeExpression105() error {
	return c.warnComment()

}

func (p *parser) callonnegativeExpression105() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression105()
}

func (c *current) onnegativeExpression117() (bool, error) {
	return c.pushError("expect closing square bracket")

}

func (p *parser) callonnegativeExpression117() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression117()
}

func (c *current) onnegativeExpression110() (interface{}, error) {
	return c.selectorElement()

}

func (p *parser) callonnegativeExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression110()
}

func (c *current) onnegativeExpression107(ses interface{}) (interface{}, error) {
	return c.selector(ses)

}

func (p *parser) callonnegativeExpression107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression107(stack["ses"])
}

func (c *current) onnegativeExpression80(sel interface{}) (interface{}, error) {
	return c.negativeSelector(sel)

}

func (p *parser) callonnegativeExpression80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression80(stack["sel"])
}

func (c *current) oninExpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression12()
}

func (c *current) oninExpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloninExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression8()
}

func (c *current) oninExpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression24()
}

func (c *current) oninExpression5(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) calloninExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression5(stack["lv"])
}

func (c *current) oninExpression27(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) calloninExpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression27(stack["lv"])
}

func (c *current) oninExpression30() (bool, error) {
	return c.pushError("expect in operator (in)")

}

func (p *parser) calloninExpression30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression30()
}

func (c *current) oninExpression38() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression38()
}

func (c *current) oninExpression34() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloninExpression34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression34()
}

func (c *current) oninExpression50() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloninExpression50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression50()
}

func (c *current) oninExpression31(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) calloninExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression31(stack["lv"])
}

func (c *current) oninExpression53(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) calloninExpression53() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression53(stack["lv"])
}

func (c *current) oninExpression1(lv, rv interface{}) (interface{}, error) {
	return c.inExpression(lv, rv)

}

func (p *parser) calloninExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression1(stack["lv"], stack["rv"])
}

func (c *current) onnotInExpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression12()
}

func (c *current) onnotInExpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnotInExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression8()
}

func (c *current) onnotInExpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression24()
}

func (c *current) onnotInExpression5(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonnotInExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression5(stack["lv"])
}

func (c *current) onnotInExpression27(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) callonnotInExpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression27(stack["lv"])
}

func (c *current) onnotInExpression38() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression38()
}

func (c *current) onnotInExpression34() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnotInExpression34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression34()
}

func (c *current) onnotInExpression50() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression50()
}

func (c *current) onnotInExpression31() (interface{}, error) {
	return c.str()

}

func (p *parser) callonnotInExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression31()
}

func (c *current) onnotInExpression53() error {
	return c.warnComment()

}

func (p *parser) callonnotInExpression53() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression53()
}

func (c *current) onnotInExpression55() (bool, error) {
	return c.pushError("expect not in operator (not in)")

}

func (p *parser) callonnotInExpression55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression55()
}

func (c *current) onnotInExpression63() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression63()
}

func (c *current) onnotInExpression59() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonnotInExpression59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression59()
}

func (c *current) onnotInExpression75() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonnotInExpression75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression75()
}

func (c *current) onnotInExpression56(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonnotInExpression56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression56(stack["lv"])
}

func (c *current) onnotInExpression78(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) callonnotInExpression78() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression78(stack["lv"])
}

func (c *current) onnotInExpression1(lv, rv interface{}) (interface{}, error) {
	return c.notInExpression(lv, rv)

}

func (p *parser) callonnotInExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression1(stack["lv"], stack["rv"])
}

func (c *current) onrvalue19() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonrvalue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue19()
}

func (c *current) onrvalue7() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonrvalue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue7()
}

func (c *current) onrvalue5(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonrvalue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue5(stack["str"])
}

func (c *current) onrvalue34() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonrvalue34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue34()
}

func (c *current) onrvalue22() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonrvalue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue22()
}

func (c *current) onrvalue20(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonrvalue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue20(stack["str"])
}

func (c *current) onrvalue2(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonrvalue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue2(stack["str"])
}

func (c *current) onrvalue35() (interface{}, error) {
	return c.number()

}

func (p *parser) callonrvalue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue35()
}

func (c *current) onrvalue56() (bool, error) {
	return c.pushError("expect closing square bracket")

}

func (p *parser) callonrvalue56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue56()
}

func (c *current) onrvalue49() (interface{}, error) {
	return c.selectorElement()

}

func (p *parser) callonrvalue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue49()
}

func (c *current) onrvalue46(ses interface{}) (interface{}, error) {
	return c.selector(ses)

}

func (p *parser) callonrvalue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue46(stack["ses"])
}

func (c *current) onrvalue70() (bool, error) {
	return c.fatalError("expect closing slash (/) for regexp")

}

func (p *parser) callonrvalue70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue70()
}

func (c *current) onrvalue58() (interface{}, error) {
	return c.regexp()

}

func (p *parser) callonrvalue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue58()
}

func (c *current) onrvalue71() (bool, error) {
	return c.pushError("invalid value for expression")

}

func (p *parser) callonrvalue71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue71()
}

func (c *current) oncompareExpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncompareExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression12()
}

func (c *current) oncompareExpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloncompareExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression8()
}

func (c *current) oncompareExpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncompareExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression24()
}

func (c *current) oncompareExpression5(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) calloncompareExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression5(stack["lv"])
}

func (c *current) oncompareExpression27(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) calloncompareExpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression27(stack["lv"])
}

func (c *current) oncompareExpression36() (bool, error) {
	return c.pushError("expect compare operator (==, !=, <=, >=, <, >)")

}

func (p *parser) calloncompareExpression36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression36()
}

func (c *current) oncompareExpression29() (interface{}, error) {
	return c.compareOperator()

}

func (p *parser) calloncompareExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression29()
}

func (c *current) oncompareExpression44() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncompareExpression44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression44()
}

func (c *current) oncompareExpression40() (interface{}, error) {
	return c.comment()

}

func (p *parser) calloncompareExpression40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression40()
}

func (c *current) oncompareExpression56() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) calloncompareExpression56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression56()
}

func (c *current) oncompareExpression37(lv, co interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) calloncompareExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression37(stack["lv"], stack["co"])
}

func (c *current) oncompareExpression59(lv, co interface{}) error {
	return c.warnComment()

}

func (p *parser) calloncompareExpression59() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression59(stack["lv"], stack["co"])
}

func (c *current) oncompareExpression1(lv, co, rv interface{}) (interface{}, error) {
	return c.compareExpression(lv, co, rv)

}

func (p *parser) calloncompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression1(stack["lv"], stack["co"], stack["rv"])
}

func (c *current) onregexpExpression12() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonregexpExpression12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression12()
}

func (c *current) onregexpExpression8() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonregexpExpression8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression8()
}

func (c *current) onregexpExpression24() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonregexpExpression24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression24()
}

func (c *current) onregexpExpression5(lv interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonregexpExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression5(stack["lv"])
}

func (c *current) onregexpExpression27(lv interface{}) error {
	return c.warnComment()

}

func (p *parser) callonregexpExpression27() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression27(stack["lv"])
}

func (c *current) onregexpExpression33() (bool, error) {
	return c.pushError("expect regexp comparison operator (=~, !~)")

}

func (p *parser) callonregexpExpression33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression33()
}

func (c *current) onregexpExpression29() (interface{}, error) {
	return c.regexpOperator()

}

func (p *parser) callonregexpExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression29()
}

func (c *current) onregexpExpression41() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonregexpExpression41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression41()
}

func (c *current) onregexpExpression37() (interface{}, error) {
	return c.comment()

}

func (p *parser) callonregexpExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression37()
}

func (c *current) onregexpExpression53() (interface{}, error) {
	return c.whitespace()

}

func (p *parser) callonregexpExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression53()
}

func (c *current) onregexpExpression34(lv, ro interface{}) (interface{}, error) {
	return c.str()

}

func (p *parser) callonregexpExpression34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression34(stack["lv"], stack["ro"])
}

func (c *current) onregexpExpression56(lv, ro interface{}) error {
	return c.warnComment()

}

func (p *parser) callonregexpExpression56() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression56(stack["lv"], stack["ro"])
}

func (c *current) onregexpExpression76() (bool, error) {
	return c.fatalError("expect closing double quotes (\")")

}

func (p *parser) callonregexpExpression76() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression76()
}

func (c *current) onregexpExpression64() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonregexpExpression64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression64()
}

func (c *current) onregexpExpression62(str interface{}) (interface{}, error) {
	return c.string(ast.DoubleQuoted)

}

func (p *parser) callonregexpExpression62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression62(stack["str"])
}

func (c *current) onregexpExpression91() (bool, error) {
	return c.fatalError("expect closing single quote (')")

}

func (p *parser) callonregexpExpression91() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression91()
}

func (c *current) onregexpExpression79() (interface{}, error) {
	return c.enclosedValue()

}

func (p *parser) callonregexpExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression79()
}

func (c *current) onregexpExpression77(str interface{}) (interface{}, error) {
	return c.string(ast.SingleQuoted)

}

func (p *parser) callonregexpExpression77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression77(stack["str"])
}

func (c *current) onregexpExpression59(str interface{}) (interface{}, error) {
	return c.ret(str)

}

func (p *parser) callonregexpExpression59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression59(stack["str"])
}

func (c *current) onregexpExpression104() (bool, error) {
	return c.fatalError("expect closing slash (/) for regexp")

}

func (p *parser) callonregexpExpression104() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression104()
}

func (c *current) onregexpExpression92() (interface{}, error) {
	return c.regexp()

}

func (p *parser) callonregexpExpression92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression92()
}

func (c *current) onregexpExpression1(lv, ro, rv interface{}) (interface{}, error) {
	return c.regexpExpression(lv, ro, rv)

}

func (p *parser) callonregexpExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression1(stack["lv"], stack["ro"], stack["rv"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) { // nolint: deadcode
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []interface{}
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

// nolint: structcheck
type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr        // nolint: structcheck
type notExpr expr        // nolint: structcheck
type zeroOrOneExpr expr  // nolint: structcheck
type zeroOrMoreExpr expr // nolint: structcheck
type oneOrMoreExpr expr  // nolint: structcheck

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
