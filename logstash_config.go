// Code generated by pigeon; DO NOT EDIT.

package config

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/breml/logstash-config/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "init",
			pos:  position{line: 7, col: 1, offset: 171},
			expr: &actionExpr{
				pos: position{line: 8, col: 5, offset: 182},
				run: (*parser).calloninit1,
				expr: &seqExpr{
					pos: position{line: 8, col: 5, offset: 182},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 8, col: 5, offset: 182},
							run: (*parser).calloninit3,
						},
						&andCodeExpr{
							pos: position{line: 11, col: 5, offset: 223},
							run: (*parser).calloninit4,
						},
						&labeledExpr{
							pos:   position{line: 13, col: 7, offset: 260},
							label: "conf",
							expr: &choiceExpr{
								pos: position{line: 14, col: 9, offset: 275},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 14, col: 9, offset: 275},
										run: (*parser).calloninit7,
										expr: &seqExpr{
											pos: position{line: 14, col: 9, offset: 275},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 14, col: 9, offset: 275},
													label: "conf",
													expr: &ruleRefExpr{
														pos:  position{line: 14, col: 14, offset: 280},
														name: "config",
													},
												},
												&notExpr{
													pos: position{line: 628, col: 7, offset: 13916},
													expr: &anyMatcher{
														line: 628, col: 8, offset: 13917,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 16, col: 13, offset: 334},
										run: (*parser).calloninit13,
										expr: &seqExpr{
											pos: position{line: 16, col: 13, offset: 334},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 50, col: 5, offset: 1049},
													expr: &choiceExpr{
														pos: position{line: 50, col: 6, offset: 1050},
														alternatives: []interface{}{
															&oneOrMoreExpr{
																pos: position{line: 43, col: 5, offset: 907},
																expr: &seqExpr{
																	pos: position{line: 43, col: 6, offset: 908},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 6, offset: 908},
																			expr: &oneOrMoreExpr{
																				pos: position{line: 67, col: 5, offset: 1444},
																				expr: &charClassMatcher{
																					pos:        position{line: 67, col: 5, offset: 1444},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 43, col: 18, offset: 920},
																			val:        "#",
																			ignoreCase: false,
																			want:       "\"#\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 43, col: 22, offset: 924},
																			expr: &charClassMatcher{
																				pos:        position{line: 43, col: 22, offset: 924},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 31, offset: 933},
																			expr: &litMatcher{
																				pos:        position{line: 43, col: 31, offset: 933},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 43, col: 38, offset: 940},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 43, col: 38, offset: 940},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&notExpr{
																					pos: position{line: 628, col: 7, offset: 13916},
																					expr: &anyMatcher{
																						line: 628, col: 8, offset: 13917,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 67, col: 5, offset: 1444},
																expr: &charClassMatcher{
																	pos:        position{line: 67, col: 5, offset: 1444},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 628, col: 7, offset: 13916},
													expr: &anyMatcher{
														line: 628, col: 8, offset: 13917,
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "config",
			pos:  position{line: 29, col: 1, offset: 632},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 645},
				run: (*parser).callonconfig1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 645},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 7, offset: 647},
							label: "ps",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 10, offset: 650},
								name: "pluginSection",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 24, offset: 664},
							label: "pss",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 28, offset: 668},
								expr: &actionExpr{
									pos: position{line: 31, col: 9, offset: 678},
									run: (*parser).callonconfig25,
									expr: &seqExpr{
										pos: position{line: 31, col: 9, offset: 678},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 31, col: 11, offset: 680},
												label: "ps",
												expr: &ruleRefExpr{
													pos:  position{line: 31, col: 14, offset: 683},
													name: "pluginSection",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 628, col: 7, offset: 13916},
							expr: &anyMatcher{
								line: 628, col: 8, offset: 13917,
							},
						},
					},
				},
			},
		},
		{
			name: "pluginSection",
			pos:  position{line: 78, col: 1, offset: 1679},
			expr: &actionExpr{
				pos: position{line: 79, col: 5, offset: 1699},
				run: (*parser).callonpluginSection1,
				expr: &seqExpr{
					pos: position{line: 79, col: 5, offset: 1699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 79, col: 5, offset: 1699},
							label: "pt",
							expr: &choiceExpr{
								pos: position{line: 103, col: 5, offset: 2136},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 103, col: 5, offset: 2136},
										run: (*parser).callonpluginSection5,
										expr: &litMatcher{
											pos:        position{line: 103, col: 5, offset: 2136},
											val:        "input",
											ignoreCase: false,
											want:       "\"input\"",
										},
									},
									&actionExpr{
										pos: position{line: 105, col: 9, offset: 2184},
										run: (*parser).callonpluginSection7,
										expr: &litMatcher{
											pos:        position{line: 105, col: 9, offset: 2184},
											val:        "filter",
											ignoreCase: false,
											want:       "\"filter\"",
										},
									},
									&actionExpr{
										pos: position{line: 107, col: 9, offset: 2234},
										run: (*parser).callonpluginSection9,
										expr: &litMatcher{
											pos:        position{line: 107, col: 9, offset: 2234},
											val:        "output",
											ignoreCase: false,
											want:       "\"output\"",
										},
									},
									&andCodeExpr{
										pos: position{line: 109, col: 9, offset: 2284},
										run: (*parser).callonpluginSection11,
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonpluginSection12,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonpluginSection31,
						},
						&litMatcher{
							pos:        position{line: 79, col: 22, offset: 1716},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 26, offset: 1720},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 79, col: 31, offset: 1725},
								expr: &actionExpr{
									pos: position{line: 80, col: 9, offset: 1735},
									run: (*parser).callonpluginSection35,
									expr: &seqExpr{
										pos: position{line: 80, col: 9, offset: 1735},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 80, col: 9, offset: 1735},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 80, col: 13, offset: 1739},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 84, col: 9, offset: 1813},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 84, col: 9, offset: 1813},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 84, col: 15, offset: 1819},
									run: (*parser).callonpluginSection59,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "branchOrPlugin",
			pos:  position{line: 95, col: 1, offset: 2010},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 2031},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2031},
						name: "branch",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 14, offset: 2040},
						name: "plugin",
					},
				},
			},
		},
		{
			name: "plugin",
			pos:  position{line: 127, col: 1, offset: 2642},
			expr: &actionExpr{
				pos: position{line: 128, col: 5, offset: 2655},
				run: (*parser).callonplugin1,
				expr: &seqExpr{
					pos: position{line: 128, col: 5, offset: 2655},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 7, offset: 2657},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 152, col: 7, offset: 3183},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 152, col: 7, offset: 3183},
										run: (*parser).callonplugin23,
										expr: &oneOrMoreExpr{
											pos: position{line: 152, col: 8, offset: 3184},
											expr: &charClassMatcher{
												pos:        position{line: 152, col: 8, offset: 3184},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 154, col: 9, offset: 3245},
										run: (*parser).callonplugin26,
										expr: &labeledExpr{
											pos:   position{line: 154, col: 9, offset: 3245},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 227, col: 5, offset: 4850},
												run: (*parser).callonplugin28,
												expr: &labeledExpr{
													pos:   position{line: 227, col: 5, offset: 4850},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 227, col: 11, offset: 4856},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 227, col: 11, offset: 4856},
																run: (*parser).callonplugin31,
																expr: &labeledExpr{
																	pos:   position{line: 227, col: 11, offset: 4856},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 201, col: 5, offset: 4274},
																		run: (*parser).callonplugin33,
																		expr: &seqExpr{
																			pos: position{line: 201, col: 7, offset: 4276},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 201, col: 7, offset: 4276},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 201, col: 11, offset: 4280},
																					expr: &choiceExpr{
																						pos: position{line: 201, col: 13, offset: 4282},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 201, col: 13, offset: 4282},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 201, col: 20, offset: 4289},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 201, col: 20, offset: 4289},
																										expr: &litMatcher{
																											pos:        position{line: 201, col: 21, offset: 4290},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 201, col: 25, offset: 4294,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 202, col: 9, offset: 4309},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 202, col: 9, offset: 4309},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 202, col: 15, offset: 4315},
																							run: (*parser).callonplugin45,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 9, offset: 4968},
																run: (*parser).callonplugin46,
																expr: &labeledExpr{
																	pos:   position{line: 229, col: 9, offset: 4968},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 214, col: 5, offset: 4583},
																		run: (*parser).callonplugin48,
																		expr: &seqExpr{
																			pos: position{line: 214, col: 7, offset: 4585},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 214, col: 7, offset: 4585},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 214, col: 11, offset: 4589},
																					expr: &choiceExpr{
																						pos: position{line: 214, col: 13, offset: 4591},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 214, col: 13, offset: 4591},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 214, col: 20, offset: 4598},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 214, col: 20, offset: 4598},
																										expr: &litMatcher{
																											pos:        position{line: 214, col: 21, offset: 4599},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 214, col: 25, offset: 4603,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 215, col: 9, offset: 4618},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 215, col: 9, offset: 4618},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 215, col: 15, offset: 4624},
																							run: (*parser).callonplugin60,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonplugin61,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonplugin80,
						},
						&litMatcher{
							pos:        position{line: 128, col: 20, offset: 2670},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 128, col: 26, offset: 2676},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 128, col: 37, offset: 2687},
								expr: &actionExpr{
									pos: position{line: 129, col: 9, offset: 2697},
									run: (*parser).callonplugin102,
									expr: &seqExpr{
										pos: position{line: 129, col: 9, offset: 2697},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 129, col: 9, offset: 2697},
												label: "attribute",
												expr: &ruleRefExpr{
													pos:  position{line: 129, col: 19, offset: 2707},
													name: "attribute",
												},
											},
											&labeledExpr{
												pos:   position{line: 129, col: 29, offset: 2717},
												label: "attrs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 129, col: 35, offset: 2723},
													expr: &actionExpr{
														pos: position{line: 130, col: 13, offset: 2737},
														run: (*parser).callonplugin108,
														expr: &seqExpr{
															pos: position{line: 130, col: 13, offset: 2737},
															exprs: []interface{}{
																&oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 50, col: 5, offset: 1049},
																	expr: &choiceExpr{
																		pos: position{line: 50, col: 6, offset: 1050},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 43, col: 5, offset: 907},
																				expr: &seqExpr{
																					pos: position{line: 43, col: 6, offset: 908},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 43, col: 6, offset: 908},
																							expr: &oneOrMoreExpr{
																								pos: position{line: 67, col: 5, offset: 1444},
																								expr: &charClassMatcher{
																									pos:        position{line: 67, col: 5, offset: 1444},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 43, col: 18, offset: 920},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 43, col: 22, offset: 924},
																							expr: &charClassMatcher{
																								pos:        position{line: 43, col: 22, offset: 924},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 43, col: 31, offset: 933},
																							expr: &litMatcher{
																								pos:        position{line: 43, col: 31, offset: 933},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 43, col: 38, offset: 940},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 43, col: 38, offset: 940},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&notExpr{
																									pos: position{line: 628, col: 7, offset: 13916},
																									expr: &anyMatcher{
																										line: 628, col: 8, offset: 13917,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 67, col: 5, offset: 1444},
																				expr: &charClassMatcher{
																					pos:        position{line: 67, col: 5, offset: 1444},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 130, col: 26, offset: 2750},
																	label: "attribute",
																	expr: &ruleRefExpr{
																		pos:  position{line: 130, col: 36, offset: 2760},
																		name: "attribute",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 137, col: 9, offset: 2914},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 137, col: 9, offset: 2914},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 137, col: 15, offset: 2920},
									run: (*parser).callonplugin152,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "attribute",
			pos:  position{line: 163, col: 1, offset: 3399},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 3415},
				run: (*parser).callonattribute1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 3415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 164, col: 5, offset: 3415},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 152, col: 7, offset: 3183},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 152, col: 7, offset: 3183},
										run: (*parser).callonattribute5,
										expr: &oneOrMoreExpr{
											pos: position{line: 152, col: 8, offset: 3184},
											expr: &charClassMatcher{
												pos:        position{line: 152, col: 8, offset: 3184},
												val:        "[_-A-Za-z0-9]",
												chars:      []rune{'_', '-'},
												ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&actionExpr{
										pos: position{line: 154, col: 9, offset: 3245},
										run: (*parser).callonattribute8,
										expr: &labeledExpr{
											pos:   position{line: 154, col: 9, offset: 3245},
											label: "value",
											expr: &actionExpr{
												pos: position{line: 227, col: 5, offset: 4850},
												run: (*parser).callonattribute10,
												expr: &labeledExpr{
													pos:   position{line: 227, col: 5, offset: 4850},
													label: "str",
													expr: &choiceExpr{
														pos: position{line: 227, col: 11, offset: 4856},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 227, col: 11, offset: 4856},
																run: (*parser).callonattribute13,
																expr: &labeledExpr{
																	pos:   position{line: 227, col: 11, offset: 4856},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 201, col: 5, offset: 4274},
																		run: (*parser).callonattribute15,
																		expr: &seqExpr{
																			pos: position{line: 201, col: 7, offset: 4276},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 201, col: 7, offset: 4276},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 201, col: 11, offset: 4280},
																					expr: &choiceExpr{
																						pos: position{line: 201, col: 13, offset: 4282},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 201, col: 13, offset: 4282},
																								val:        "\\\"",
																								ignoreCase: false,
																								want:       "\"\\\\\\\"\"",
																							},
																							&seqExpr{
																								pos: position{line: 201, col: 20, offset: 4289},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 201, col: 20, offset: 4289},
																										expr: &litMatcher{
																											pos:        position{line: 201, col: 21, offset: 4290},
																											val:        "\"",
																											ignoreCase: false,
																											want:       "\"\\\"\"",
																										},
																									},
																									&anyMatcher{
																										line: 201, col: 25, offset: 4294,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 202, col: 9, offset: 4309},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 202, col: 9, offset: 4309},
																							val:        "\"",
																							ignoreCase: false,
																							want:       "\"\\\"\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 202, col: 15, offset: 4315},
																							run: (*parser).callonattribute27,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 9, offset: 4968},
																run: (*parser).callonattribute28,
																expr: &labeledExpr{
																	pos:   position{line: 229, col: 9, offset: 4968},
																	label: "str",
																	expr: &actionExpr{
																		pos: position{line: 214, col: 5, offset: 4583},
																		run: (*parser).callonattribute30,
																		expr: &seqExpr{
																			pos: position{line: 214, col: 7, offset: 4585},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 214, col: 7, offset: 4585},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 214, col: 11, offset: 4589},
																					expr: &choiceExpr{
																						pos: position{line: 214, col: 13, offset: 4591},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 214, col: 13, offset: 4591},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&seqExpr{
																								pos: position{line: 214, col: 20, offset: 4598},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 214, col: 20, offset: 4598},
																										expr: &litMatcher{
																											pos:        position{line: 214, col: 21, offset: 4599},
																											val:        "'",
																											ignoreCase: false,
																											want:       "\"'\"",
																										},
																									},
																									&anyMatcher{
																										line: 214, col: 25, offset: 4603,
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 215, col: 9, offset: 4618},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 215, col: 9, offset: 4618},
																							val:        "'",
																							ignoreCase: false,
																							want:       "\"'\"",
																						},
																						&andCodeExpr{
																							pos: position{line: 215, col: 15, offset: 4624},
																							run: (*parser).callonattribute42,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonattribute43,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonattribute62,
						},
						&litMatcher{
							pos:        position{line: 164, col: 18, offset: 3428},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonattribute64,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonattribute83,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 26, offset: 3436},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 32, offset: 3442},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "value",
			pos:  position{line: 172, col: 1, offset: 3579},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 3591},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 3591},
						name: "plugin",
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 4029},
						run: (*parser).callonvalue3,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 4029},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 192, col: 5, offset: 4029},
									val:        "[_A-Za-z]",
									chars:      []rune{'_'},
									ranges:     []rune{'A', 'Z', 'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&oneOrMoreExpr{
									pos: position{line: 192, col: 15, offset: 4039},
									expr: &charClassMatcher{
										pos:        position{line: 192, col: 15, offset: 4039},
										val:        "[_A-Za-z0-9]",
										chars:      []rune{'_'},
										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 4850},
						run: (*parser).callonvalue8,
						expr: &labeledExpr{
							pos:   position{line: 227, col: 5, offset: 4850},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 4856},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 227, col: 11, offset: 4856},
										run: (*parser).callonvalue11,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 11, offset: 4856},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 201, col: 5, offset: 4274},
												run: (*parser).callonvalue13,
												expr: &seqExpr{
													pos: position{line: 201, col: 7, offset: 4276},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 201, col: 7, offset: 4276},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 201, col: 11, offset: 4280},
															expr: &choiceExpr{
																pos: position{line: 201, col: 13, offset: 4282},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 201, col: 13, offset: 4282},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 201, col: 20, offset: 4289},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 201, col: 20, offset: 4289},
																				expr: &litMatcher{
																					pos:        position{line: 201, col: 21, offset: 4290},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 201, col: 25, offset: 4294,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 202, col: 9, offset: 4309},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 202, col: 9, offset: 4309},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 202, col: 15, offset: 4315},
																	run: (*parser).callonvalue25,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 229, col: 9, offset: 4968},
										run: (*parser).callonvalue26,
										expr: &labeledExpr{
											pos:   position{line: 229, col: 9, offset: 4968},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 214, col: 5, offset: 4583},
												run: (*parser).callonvalue28,
												expr: &seqExpr{
													pos: position{line: 214, col: 7, offset: 4585},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 214, col: 7, offset: 4585},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 214, col: 11, offset: 4589},
															expr: &choiceExpr{
																pos: position{line: 214, col: 13, offset: 4591},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 214, col: 13, offset: 4591},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 214, col: 20, offset: 4598},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 214, col: 20, offset: 4598},
																				expr: &litMatcher{
																					pos:        position{line: 214, col: 21, offset: 4599},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 214, col: 25, offset: 4603,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 215, col: 9, offset: 4618},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 215, col: 9, offset: 4618},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 215, col: 15, offset: 4624},
																	run: (*parser).callonvalue40,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 5503},
						run: (*parser).callonvalue41,
						expr: &seqExpr{
							pos: position{line: 254, col: 5, offset: 5503},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 254, col: 5, offset: 5503},
									expr: &litMatcher{
										pos:        position{line: 254, col: 5, offset: 5503},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 254, col: 10, offset: 5508},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 10, offset: 5508},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 254, col: 17, offset: 5515},
									expr: &seqExpr{
										pos: position{line: 254, col: 18, offset: 5516},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 254, col: 18, offset: 5516},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 254, col: 22, offset: 5520},
												expr: &charClassMatcher{
													pos:        position{line: 254, col: 22, offset: 5520},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 48, offset: 3634},
						name: "array",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 56, offset: 3642},
						name: "hash",
					},
					&andCodeExpr{
						pos: position{line: 173, col: 63, offset: 3649},
						run: (*parser).callonvalue54,
					},
				},
			},
		},
		{
			name: "array",
			pos:  position{line: 270, col: 1, offset: 5837},
			expr: &actionExpr{
				pos: position{line: 271, col: 5, offset: 5849},
				run: (*parser).callonarray1,
				expr: &seqExpr{
					pos: position{line: 271, col: 5, offset: 5849},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 5, offset: 5849},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 271, col: 11, offset: 5855},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 271, col: 17, offset: 5861},
								expr: &actionExpr{
									pos: position{line: 272, col: 9, offset: 5871},
									run: (*parser).callonarray24,
									expr: &seqExpr{
										pos: position{line: 272, col: 9, offset: 5871},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 272, col: 9, offset: 5871},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 272, col: 15, offset: 5877},
													name: "value",
												},
											},
											&labeledExpr{
												pos:   position{line: 272, col: 21, offset: 5883},
												label: "values",
												expr: &zeroOrMoreExpr{
													pos: position{line: 272, col: 28, offset: 5890},
													expr: &actionExpr{
														pos: position{line: 273, col: 13, offset: 5904},
														run: (*parser).callonarray30,
														expr: &seqExpr{
															pos: position{line: 273, col: 13, offset: 5904},
															exprs: []interface{}{
																&actionExpr{
																	pos: position{line: 56, col: 7, offset: 1244},
																	run: (*parser).callonarray32,
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 56, col: 7, offset: 1244},
																		expr: &choiceExpr{
																			pos: position{line: 56, col: 8, offset: 1245},
																			alternatives: []interface{}{
																				&oneOrMoreExpr{
																					pos: position{line: 43, col: 5, offset: 907},
																					expr: &seqExpr{
																						pos: position{line: 43, col: 6, offset: 908},
																						exprs: []interface{}{
																							&zeroOrOneExpr{
																								pos: position{line: 43, col: 6, offset: 908},
																								expr: &oneOrMoreExpr{
																									pos: position{line: 67, col: 5, offset: 1444},
																									expr: &charClassMatcher{
																										pos:        position{line: 67, col: 5, offset: 1444},
																										val:        "[ \\t\\r\\n]",
																										chars:      []rune{' ', '\t', '\r', '\n'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 43, col: 18, offset: 920},
																								val:        "#",
																								ignoreCase: false,
																								want:       "\"#\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 43, col: 22, offset: 924},
																								expr: &charClassMatcher{
																									pos:        position{line: 43, col: 22, offset: 924},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																							&zeroOrOneExpr{
																								pos: position{line: 43, col: 31, offset: 933},
																								expr: &litMatcher{
																									pos:        position{line: 43, col: 31, offset: 933},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 43, col: 38, offset: 940},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 43, col: 38, offset: 940},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&notExpr{
																										pos: position{line: 628, col: 7, offset: 13916},
																										expr: &anyMatcher{
																											line: 628, col: 8, offset: 13917,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 67, col: 5, offset: 1444},
																					expr: &charClassMatcher{
																						pos:        position{line: 67, col: 5, offset: 1444},
																						val:        "[ \\t\\r\\n]",
																						chars:      []rune{' ', '\t', '\r', '\n'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&stateCodeExpr{
																	pos: position{line: 58, col: 9, offset: 1305},
																	run: (*parser).callonarray51,
																},
																&litMatcher{
																	pos:        position{line: 273, col: 16, offset: 5907},
																	val:        ",",
																	ignoreCase: false,
																	want:       "\",\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 50, col: 5, offset: 1049},
																	expr: &choiceExpr{
																		pos: position{line: 50, col: 6, offset: 1050},
																		alternatives: []interface{}{
																			&oneOrMoreExpr{
																				pos: position{line: 43, col: 5, offset: 907},
																				expr: &seqExpr{
																					pos: position{line: 43, col: 6, offset: 908},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 43, col: 6, offset: 908},
																							expr: &oneOrMoreExpr{
																								pos: position{line: 67, col: 5, offset: 1444},
																								expr: &charClassMatcher{
																									pos:        position{line: 67, col: 5, offset: 1444},
																									val:        "[ \\t\\r\\n]",
																									chars:      []rune{' ', '\t', '\r', '\n'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 43, col: 18, offset: 920},
																							val:        "#",
																							ignoreCase: false,
																							want:       "\"#\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 43, col: 22, offset: 924},
																							expr: &charClassMatcher{
																								pos:        position{line: 43, col: 22, offset: 924},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 43, col: 31, offset: 933},
																							expr: &litMatcher{
																								pos:        position{line: 43, col: 31, offset: 933},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 43, col: 38, offset: 940},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 43, col: 38, offset: 940},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&notExpr{
																									pos: position{line: 628, col: 7, offset: 13916},
																									expr: &anyMatcher{
																										line: 628, col: 8, offset: 13917,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 67, col: 5, offset: 1444},
																				expr: &charClassMatcher{
																					pos:        position{line: 67, col: 5, offset: 1444},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 273, col: 22, offset: 5913},
																	label: "value",
																	expr: &ruleRefExpr{
																		pos:  position{line: 273, col: 28, offset: 5919},
																		name: "value",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 280, col: 9, offset: 6062},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 280, col: 9, offset: 6062},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&andCodeExpr{
									pos: position{line: 280, col: 15, offset: 6068},
									run: (*parser).callonarray93,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hash",
			pos:  position{line: 296, col: 1, offset: 6318},
			expr: &actionExpr{
				pos: position{line: 297, col: 5, offset: 6329},
				run: (*parser).callonhash1,
				expr: &seqExpr{
					pos: position{line: 297, col: 5, offset: 6329},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 5, offset: 6329},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 11, offset: 6335},
							label: "entries",
							expr: &zeroOrOneExpr{
								pos: position{line: 297, col: 19, offset: 6343},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 19, offset: 6343},
									name: "hashentries",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 298, col: 9, offset: 6368},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 9, offset: 6368},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 298, col: 15, offset: 6374},
									run: (*parser).callonhash45,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentries",
			pos:  position{line: 310, col: 1, offset: 6613},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 6631},
				run: (*parser).callonhashentries1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 6631},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 311, col: 5, offset: 6631},
							label: "hashentry",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 15, offset: 6641},
								name: "hashentry",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 25, offset: 6651},
							label: "hashentries1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 311, col: 38, offset: 6664},
								expr: &actionExpr{
									pos: position{line: 312, col: 9, offset: 6674},
									run: (*parser).callonhashentries7,
									expr: &seqExpr{
										pos: position{line: 312, col: 9, offset: 6674},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 67, col: 5, offset: 1444},
												expr: &charClassMatcher{
													pos:        position{line: 67, col: 5, offset: 1444},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&labeledExpr{
												pos:   position{line: 312, col: 20, offset: 6685},
												label: "hashentry",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 30, offset: 6695},
													name: "hashentry",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "hashentry",
			pos:  position{line: 324, col: 1, offset: 6947},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 6963},
				run: (*parser).callonhashentry1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 6963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 6963},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 325, col: 11, offset: 6969},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 254, col: 5, offset: 5503},
										run: (*parser).callonhashentry5,
										expr: &seqExpr{
											pos: position{line: 254, col: 5, offset: 5503},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 254, col: 5, offset: 5503},
													expr: &litMatcher{
														pos:        position{line: 254, col: 5, offset: 5503},
														val:        "-",
														ignoreCase: false,
														want:       "\"-\"",
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 254, col: 10, offset: 5508},
													expr: &charClassMatcher{
														pos:        position{line: 254, col: 10, offset: 5508},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 254, col: 17, offset: 5515},
													expr: &seqExpr{
														pos: position{line: 254, col: 18, offset: 5516},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 254, col: 18, offset: 5516},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 254, col: 22, offset: 5520},
																expr: &charClassMatcher{
																	pos:        position{line: 254, col: 22, offset: 5520},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 192, col: 5, offset: 4029},
										run: (*parser).callonhashentry16,
										expr: &seqExpr{
											pos: position{line: 192, col: 5, offset: 4029},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 192, col: 5, offset: 4029},
													val:        "[_A-Za-z]",
													chars:      []rune{'_'},
													ranges:     []rune{'A', 'Z', 'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&oneOrMoreExpr{
													pos: position{line: 192, col: 15, offset: 4039},
													expr: &charClassMatcher{
														pos:        position{line: 192, col: 15, offset: 4039},
														val:        "[_A-Za-z0-9]",
														chars:      []rune{'_'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 227, col: 5, offset: 4850},
										run: (*parser).callonhashentry21,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 5, offset: 4850},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 227, col: 11, offset: 4856},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 227, col: 11, offset: 4856},
														run: (*parser).callonhashentry24,
														expr: &labeledExpr{
															pos:   position{line: 227, col: 11, offset: 4856},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 201, col: 5, offset: 4274},
																run: (*parser).callonhashentry26,
																expr: &seqExpr{
																	pos: position{line: 201, col: 7, offset: 4276},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 201, col: 7, offset: 4276},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 201, col: 11, offset: 4280},
																			expr: &choiceExpr{
																				pos: position{line: 201, col: 13, offset: 4282},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 201, col: 13, offset: 4282},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 201, col: 20, offset: 4289},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 201, col: 20, offset: 4289},
																								expr: &litMatcher{
																									pos:        position{line: 201, col: 21, offset: 4290},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 201, col: 25, offset: 4294,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 202, col: 9, offset: 4309},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 202, col: 9, offset: 4309},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 202, col: 15, offset: 4315},
																					run: (*parser).callonhashentry38,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 229, col: 9, offset: 4968},
														run: (*parser).callonhashentry39,
														expr: &labeledExpr{
															pos:   position{line: 229, col: 9, offset: 4968},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 214, col: 5, offset: 4583},
																run: (*parser).callonhashentry41,
																expr: &seqExpr{
																	pos: position{line: 214, col: 7, offset: 4585},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 214, col: 7, offset: 4585},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 214, col: 11, offset: 4589},
																			expr: &choiceExpr{
																				pos: position{line: 214, col: 13, offset: 4591},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 214, col: 13, offset: 4591},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 214, col: 20, offset: 4598},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 214, col: 20, offset: 4598},
																								expr: &litMatcher{
																									pos:        position{line: 214, col: 21, offset: 4599},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 214, col: 25, offset: 4603,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 215, col: 9, offset: 4618},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 215, col: 9, offset: 4618},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 215, col: 15, offset: 4624},
																					run: (*parser).callonhashentry53,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonhashentry54,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonhashentry73,
						},
						&litMatcher{
							pos:        position{line: 325, col: 47, offset: 7005},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonhashentry75,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonhashentry94,
						},
						&labeledExpr{
							pos:   position{line: 325, col: 55, offset: 7013},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 61, offset: 7019},
								name: "value",
							},
						},
					},
				},
			},
		},
		{
			name: "branch",
			pos:  position{line: 338, col: 1, offset: 7242},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 7255},
				run: (*parser).callonbranch1,
				expr: &seqExpr{
					pos: position{line: 339, col: 5, offset: 7255},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 7, offset: 7257},
							label: "ifBlock",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 15, offset: 7265},
								name: "ifCond",
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 22, offset: 7272},
							label: "elseIfBlocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 339, col: 35, offset: 7285},
								expr: &actionExpr{
									pos: position{line: 340, col: 9, offset: 7295},
									run: (*parser).callonbranch25,
									expr: &seqExpr{
										pos: position{line: 340, col: 9, offset: 7295},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 340, col: 11, offset: 7297},
												label: "eib",
												expr: &ruleRefExpr{
													pos:  position{line: 340, col: 15, offset: 7301},
													name: "elseIf",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 343, col: 12, offset: 7367},
							label: "elseBlock",
							expr: &zeroOrOneExpr{
								pos: position{line: 343, col: 22, offset: 7377},
								expr: &actionExpr{
									pos: position{line: 344, col: 13, offset: 7391},
									run: (*parser).callonbranch49,
									expr: &seqExpr{
										pos: position{line: 344, col: 13, offset: 7391},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 344, col: 15, offset: 7393},
												label: "eb",
												expr: &ruleRefExpr{
													pos:  position{line: 344, col: 18, offset: 7396},
													name: "elseCond",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ifCond",
			pos:  position{line: 356, col: 1, offset: 7644},
			expr: &actionExpr{
				pos: position{line: 357, col: 5, offset: 7657},
				run: (*parser).callonifCond1,
				expr: &seqExpr{
					pos: position{line: 357, col: 5, offset: 7657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 5, offset: 7657},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonifCond4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonifCond23,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 13, offset: 7665},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 18, offset: 7670},
								name: "condition",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonifCond26,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonifCond45,
						},
						&litMatcher{
							pos:        position{line: 357, col: 31, offset: 7683},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 37, offset: 7689},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 42, offset: 7694},
								expr: &actionExpr{
									pos: position{line: 358, col: 13, offset: 7708},
									run: (*parser).callonifCond67,
									expr: &seqExpr{
										pos: position{line: 358, col: 13, offset: 7708},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 358, col: 13, offset: 7708},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 358, col: 17, offset: 7712},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 362, col: 13, offset: 7802},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 362, col: 13, offset: 7802},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 362, col: 19, offset: 7808},
									run: (*parser).callonifCond91,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseIf",
			pos:  position{line: 374, col: 1, offset: 8082},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 8095},
				run: (*parser).callonelseIf1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 8095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 8095},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonelseIf4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonelseIf23,
						},
						&litMatcher{
							pos:        position{line: 375, col: 15, offset: 8105},
							val:        "if",
							ignoreCase: false,
							want:       "\"if\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonelseIf25,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonelseIf44,
						},
						&labeledExpr{
							pos:   position{line: 375, col: 23, offset: 8113},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 28, offset: 8118},
								name: "condition",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonelseIf47,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonelseIf66,
						},
						&litMatcher{
							pos:        position{line: 375, col: 41, offset: 8131},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 47, offset: 8137},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 375, col: 52, offset: 8142},
								expr: &actionExpr{
									pos: position{line: 376, col: 9, offset: 8152},
									run: (*parser).callonelseIf88,
									expr: &seqExpr{
										pos: position{line: 376, col: 9, offset: 8152},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 376, col: 9, offset: 8152},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 376, col: 13, offset: 8156},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 380, col: 9, offset: 8230},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 380, col: 9, offset: 8230},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 380, col: 15, offset: 8236},
									run: (*parser).callonelseIf112,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "elseCond",
			pos:  position{line: 392, col: 1, offset: 8478},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 8493},
				run: (*parser).callonelseCond1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 8493},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 8493},
							val:        "else",
							ignoreCase: false,
							want:       "\"else\"",
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonelseCond4,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonelseCond23,
						},
						&litMatcher{
							pos:        position{line: 393, col: 15, offset: 8503},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 50, col: 5, offset: 1049},
							expr: &choiceExpr{
								pos: position{line: 50, col: 6, offset: 1050},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 43, col: 5, offset: 907},
										expr: &seqExpr{
											pos: position{line: 43, col: 6, offset: 908},
											exprs: []interface{}{
												&zeroOrOneExpr{
													pos: position{line: 43, col: 6, offset: 908},
													expr: &oneOrMoreExpr{
														pos: position{line: 67, col: 5, offset: 1444},
														expr: &charClassMatcher{
															pos:        position{line: 67, col: 5, offset: 1444},
															val:        "[ \\t\\r\\n]",
															chars:      []rune{' ', '\t', '\r', '\n'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 43, col: 18, offset: 920},
													val:        "#",
													ignoreCase: false,
													want:       "\"#\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 43, col: 22, offset: 924},
													expr: &charClassMatcher{
														pos:        position{line: 43, col: 22, offset: 924},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 43, col: 31, offset: 933},
													expr: &litMatcher{
														pos:        position{line: 43, col: 31, offset: 933},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
												&choiceExpr{
													pos: position{line: 43, col: 38, offset: 940},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 43, col: 38, offset: 940},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&notExpr{
															pos: position{line: 628, col: 7, offset: 13916},
															expr: &anyMatcher{
																line: 628, col: 8, offset: 13917,
															},
														},
													},
												},
											},
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 67, col: 5, offset: 1444},
										expr: &charClassMatcher{
											pos:        position{line: 67, col: 5, offset: 1444},
											val:        "[ \\t\\r\\n]",
											chars:      []rune{' ', '\t', '\r', '\n'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 21, offset: 8509},
							label: "bops",
							expr: &zeroOrMoreExpr{
								pos: position{line: 393, col: 26, offset: 8514},
								expr: &actionExpr{
									pos: position{line: 394, col: 9, offset: 8524},
									run: (*parser).callonelseCond45,
									expr: &seqExpr{
										pos: position{line: 394, col: 9, offset: 8524},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 394, col: 9, offset: 8524},
												label: "bop",
												expr: &ruleRefExpr{
													pos:  position{line: 394, col: 13, offset: 8528},
													name: "branchOrPlugin",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 50, col: 5, offset: 1049},
												expr: &choiceExpr{
													pos: position{line: 50, col: 6, offset: 1050},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 398, col: 9, offset: 8602},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 398, col: 9, offset: 8602},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
								&andCodeExpr{
									pos: position{line: 398, col: 15, offset: 8608},
									run: (*parser).callonelseCond69,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "condition",
			pos:  position{line: 410, col: 1, offset: 8857},
			expr: &actionExpr{
				pos: position{line: 411, col: 5, offset: 8873},
				run: (*parser).calloncondition1,
				expr: &seqExpr{
					pos: position{line: 411, col: 5, offset: 8873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 411, col: 5, offset: 8873},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 10, offset: 8878},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 21, offset: 8889},
							label: "conds",
							expr: &zeroOrMoreExpr{
								pos: position{line: 411, col: 27, offset: 8895},
								expr: &actionExpr{
									pos: position{line: 412, col: 9, offset: 8905},
									run: (*parser).calloncondition7,
									expr: &seqExpr{
										pos: position{line: 412, col: 9, offset: 8905},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 56, col: 7, offset: 1244},
												run: (*parser).calloncondition9,
												expr: &zeroOrMoreExpr{
													pos: position{line: 56, col: 7, offset: 1244},
													expr: &choiceExpr{
														pos: position{line: 56, col: 8, offset: 1245},
														alternatives: []interface{}{
															&oneOrMoreExpr{
																pos: position{line: 43, col: 5, offset: 907},
																expr: &seqExpr{
																	pos: position{line: 43, col: 6, offset: 908},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 6, offset: 908},
																			expr: &oneOrMoreExpr{
																				pos: position{line: 67, col: 5, offset: 1444},
																				expr: &charClassMatcher{
																					pos:        position{line: 67, col: 5, offset: 1444},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 43, col: 18, offset: 920},
																			val:        "#",
																			ignoreCase: false,
																			want:       "\"#\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 43, col: 22, offset: 924},
																			expr: &charClassMatcher{
																				pos:        position{line: 43, col: 22, offset: 924},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 31, offset: 933},
																			expr: &litMatcher{
																				pos:        position{line: 43, col: 31, offset: 933},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 43, col: 38, offset: 940},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 43, col: 38, offset: 940},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&notExpr{
																					pos: position{line: 628, col: 7, offset: 13916},
																					expr: &anyMatcher{
																						line: 628, col: 8, offset: 13917,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 67, col: 5, offset: 1444},
																expr: &charClassMatcher{
																	pos:        position{line: 67, col: 5, offset: 1444},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 58, col: 9, offset: 1305},
												run: (*parser).calloncondition28,
											},
											&labeledExpr{
												pos:   position{line: 412, col: 12, offset: 8908},
												label: "bo",
												expr: &actionExpr{
													pos: position{line: 598, col: 5, offset: 13265},
													run: (*parser).calloncondition30,
													expr: &choiceExpr{
														pos: position{line: 598, col: 6, offset: 13266},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 598, col: 6, offset: 13266},
																val:        "and",
																ignoreCase: false,
																want:       "\"and\"",
															},
															&litMatcher{
																pos:        position{line: 598, col: 14, offset: 13274},
																val:        "or",
																ignoreCase: false,
																want:       "\"or\"",
															},
															&litMatcher{
																pos:        position{line: 598, col: 21, offset: 13281},
																val:        "xor",
																ignoreCase: false,
																want:       "\"xor\"",
															},
															&litMatcher{
																pos:        position{line: 598, col: 29, offset: 13289},
																val:        "nand",
																ignoreCase: false,
																want:       "\"nand\"",
															},
															&andCodeExpr{
																pos: position{line: 598, col: 38, offset: 13298},
																run: (*parser).calloncondition36,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 56, col: 7, offset: 1244},
												run: (*parser).calloncondition37,
												expr: &zeroOrMoreExpr{
													pos: position{line: 56, col: 7, offset: 1244},
													expr: &choiceExpr{
														pos: position{line: 56, col: 8, offset: 1245},
														alternatives: []interface{}{
															&oneOrMoreExpr{
																pos: position{line: 43, col: 5, offset: 907},
																expr: &seqExpr{
																	pos: position{line: 43, col: 6, offset: 908},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 6, offset: 908},
																			expr: &oneOrMoreExpr{
																				pos: position{line: 67, col: 5, offset: 1444},
																				expr: &charClassMatcher{
																					pos:        position{line: 67, col: 5, offset: 1444},
																					val:        "[ \\t\\r\\n]",
																					chars:      []rune{' ', '\t', '\r', '\n'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 43, col: 18, offset: 920},
																			val:        "#",
																			ignoreCase: false,
																			want:       "\"#\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 43, col: 22, offset: 924},
																			expr: &charClassMatcher{
																				pos:        position{line: 43, col: 22, offset: 924},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																		&zeroOrOneExpr{
																			pos: position{line: 43, col: 31, offset: 933},
																			expr: &litMatcher{
																				pos:        position{line: 43, col: 31, offset: 933},
																				val:        "\r",
																				ignoreCase: false,
																				want:       "\"\\r\"",
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 43, col: 38, offset: 940},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 43, col: 38, offset: 940},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&notExpr{
																					pos: position{line: 628, col: 7, offset: 13916},
																					expr: &anyMatcher{
																						line: 628, col: 8, offset: 13917,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&oneOrMoreExpr{
																pos: position{line: 67, col: 5, offset: 1444},
																expr: &charClassMatcher{
																	pos:        position{line: 67, col: 5, offset: 1444},
																	val:        "[ \\t\\r\\n]",
																	chars:      []rune{' ', '\t', '\r', '\n'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
											&stateCodeExpr{
												pos: position{line: 58, col: 9, offset: 1305},
												run: (*parser).calloncondition56,
											},
											&labeledExpr{
												pos:   position{line: 412, col: 34, offset: 8930},
												label: "cond",
												expr: &ruleRefExpr{
													pos:  position{line: 412, col: 39, offset: 8935},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "expression",
			pos:  position{line: 431, col: 1, offset: 9334},
			expr: &choiceExpr{
				pos: position{line: 433, col: 9, offset: 9361},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 9375},
						run: (*parser).callonexpression2,
						expr: &seqExpr{
							pos: position{line: 434, col: 13, offset: 9375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 434, col: 13, offset: 9375},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonexpression5,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonexpression24,
								},
								&labeledExpr{
									pos:   position{line: 434, col: 20, offset: 9382},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 434, col: 25, offset: 9387},
										name: "condition",
									},
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonexpression27,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonexpression46,
								},
								&litMatcher{
									pos:        position{line: 434, col: 38, offset: 9400},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 438, col: 9, offset: 9487},
						name: "negativeExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 439, col: 9, offset: 9514},
						name: "inExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 440, col: 9, offset: 9535},
						name: "notInExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 441, col: 9, offset: 9559},
						name: "compareExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 9, offset: 9585},
						name: "regexpExpression",
					},
					&actionExpr{
						pos: position{line: 443, col: 9, offset: 9610},
						run: (*parser).callonexpression53,
						expr: &labeledExpr{
							pos:   position{line: 443, col: 9, offset: 9610},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 12, offset: 9613},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "negativeExpression",
			pos:  position{line: 456, col: 1, offset: 9897},
			expr: &choiceExpr{
				pos: position{line: 458, col: 9, offset: 9932},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 459, col: 13, offset: 9946},
						run: (*parser).callonnegativeExpression2,
						expr: &seqExpr{
							pos: position{line: 459, col: 13, offset: 9946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 459, col: 13, offset: 9946},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonnegativeExpression5,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonnegativeExpression24,
								},
								&litMatcher{
									pos:        position{line: 459, col: 20, offset: 9953},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonnegativeExpression26,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonnegativeExpression45,
								},
								&labeledExpr{
									pos:   position{line: 459, col: 27, offset: 9960},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 459, col: 32, offset: 9965},
										name: "condition",
									},
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonnegativeExpression48,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonnegativeExpression67,
								},
								&choiceExpr{
									pos: position{line: 460, col: 17, offset: 9996},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 460, col: 17, offset: 9996},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
										&andCodeExpr{
											pos: position{line: 460, col: 23, offset: 10002},
											run: (*parser).callonnegativeExpression70,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 468, col: 11, offset: 10202},
						run: (*parser).callonnegativeExpression71,
						expr: &seqExpr{
							pos: position{line: 468, col: 11, offset: 10202},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 468, col: 11, offset: 10202},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&actionExpr{
									pos: position{line: 56, col: 7, offset: 1244},
									run: (*parser).callonnegativeExpression74,
									expr: &zeroOrMoreExpr{
										pos: position{line: 56, col: 7, offset: 1244},
										expr: &choiceExpr{
											pos: position{line: 56, col: 8, offset: 1245},
											alternatives: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 43, col: 5, offset: 907},
													expr: &seqExpr{
														pos: position{line: 43, col: 6, offset: 908},
														exprs: []interface{}{
															&zeroOrOneExpr{
																pos: position{line: 43, col: 6, offset: 908},
																expr: &oneOrMoreExpr{
																	pos: position{line: 67, col: 5, offset: 1444},
																	expr: &charClassMatcher{
																		pos:        position{line: 67, col: 5, offset: 1444},
																		val:        "[ \\t\\r\\n]",
																		chars:      []rune{' ', '\t', '\r', '\n'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 43, col: 18, offset: 920},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 43, col: 22, offset: 924},
																expr: &charClassMatcher{
																	pos:        position{line: 43, col: 22, offset: 924},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&zeroOrOneExpr{
																pos: position{line: 43, col: 31, offset: 933},
																expr: &litMatcher{
																	pos:        position{line: 43, col: 31, offset: 933},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
															&choiceExpr{
																pos: position{line: 43, col: 38, offset: 940},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 43, col: 38, offset: 940},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&notExpr{
																		pos: position{line: 628, col: 7, offset: 13916},
																		expr: &anyMatcher{
																			line: 628, col: 8, offset: 13917,
																		},
																	},
																},
															},
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 67, col: 5, offset: 1444},
													expr: &charClassMatcher{
														pos:        position{line: 67, col: 5, offset: 1444},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&stateCodeExpr{
									pos: position{line: 58, col: 9, offset: 1305},
									run: (*parser).callonnegativeExpression93,
								},
								&labeledExpr{
									pos:   position{line: 468, col: 18, offset: 10209},
									label: "sel",
									expr: &actionExpr{
										pos: position{line: 610, col: 5, offset: 13550},
										run: (*parser).callonnegativeExpression95,
										expr: &labeledExpr{
											pos:   position{line: 610, col: 5, offset: 13550},
											label: "ses",
											expr: &oneOrMoreExpr{
												pos: position{line: 610, col: 9, offset: 13554},
												expr: &actionExpr{
													pos: position{line: 620, col: 5, offset: 13741},
													run: (*parser).callonnegativeExpression98,
													expr: &seqExpr{
														pos: position{line: 620, col: 5, offset: 13741},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 620, col: 5, offset: 13741},
																val:        "[",
																ignoreCase: false,
																want:       "\"[\"",
															},
															&oneOrMoreExpr{
																pos: position{line: 620, col: 9, offset: 13745},
																expr: &charClassMatcher{
																	pos:        position{line: 620, col: 9, offset: 13745},
																	val:        "[^][,]",
																	chars:      []rune{']', '[', ','},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&choiceExpr{
																pos: position{line: 621, col: 9, offset: 13764},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 621, col: 9, offset: 13764},
																		val:        "]",
																		ignoreCase: false,
																		want:       "\"]\"",
																	},
																	&andCodeExpr{
																		pos: position{line: 621, col: 15, offset: 13770},
																		run: (*parser).callonnegativeExpression105,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "inExpression",
			pos:  position{line: 479, col: 1, offset: 10412},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 10431},
				run: (*parser).calloninExpression1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 10431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 480, col: 5, offset: 10431},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 8, offset: 10434},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).calloninExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).calloninExpression24,
						},
						&choiceExpr{
							pos: position{line: 499, col: 5, offset: 10811},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 499, col: 5, offset: 10811},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&andCodeExpr{
									pos: position{line: 499, col: 12, offset: 10818},
									run: (*parser).calloninExpression27,
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).calloninExpression28,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).calloninExpression47,
						},
						&labeledExpr{
							pos:   position{line: 480, col: 32, offset: 10458},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 35, offset: 10461},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "notInExpression",
			pos:  position{line: 489, col: 1, offset: 10640},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 10662},
				run: (*parser).callonnotInExpression1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 10662},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 10662},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 8, offset: 10665},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonnotInExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonnotInExpression24,
						},
						&choiceExpr{
							pos: position{line: 508, col: 5, offset: 10960},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 508, col: 5, offset: 10960},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 508, col: 5, offset: 10960},
											val:        "not ",
											ignoreCase: false,
											want:       "\"not \"",
										},
										&actionExpr{
											pos: position{line: 56, col: 7, offset: 1244},
											run: (*parser).callonnotInExpression28,
											expr: &zeroOrMoreExpr{
												pos: position{line: 56, col: 7, offset: 1244},
												expr: &choiceExpr{
													pos: position{line: 56, col: 8, offset: 1245},
													alternatives: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 43, col: 5, offset: 907},
															expr: &seqExpr{
																pos: position{line: 43, col: 6, offset: 908},
																exprs: []interface{}{
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 6, offset: 908},
																		expr: &oneOrMoreExpr{
																			pos: position{line: 67, col: 5, offset: 1444},
																			expr: &charClassMatcher{
																				pos:        position{line: 67, col: 5, offset: 1444},
																				val:        "[ \\t\\r\\n]",
																				chars:      []rune{' ', '\t', '\r', '\n'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 43, col: 18, offset: 920},
																		val:        "#",
																		ignoreCase: false,
																		want:       "\"#\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 43, col: 22, offset: 924},
																		expr: &charClassMatcher{
																			pos:        position{line: 43, col: 22, offset: 924},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 43, col: 31, offset: 933},
																		expr: &litMatcher{
																			pos:        position{line: 43, col: 31, offset: 933},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 43, col: 38, offset: 940},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 43, col: 38, offset: 940},
																				val:        "\n",
																				ignoreCase: false,
																				want:       "\"\\n\"",
																			},
																			&notExpr{
																				pos: position{line: 628, col: 7, offset: 13916},
																				expr: &anyMatcher{
																					line: 628, col: 8, offset: 13917,
																				},
																			},
																		},
																	},
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&stateCodeExpr{
											pos: position{line: 58, col: 9, offset: 1305},
											run: (*parser).callonnotInExpression47,
										},
										&litMatcher{
											pos:        position{line: 508, col: 15, offset: 10970},
											val:        "in",
											ignoreCase: false,
											want:       "\"in\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 508, col: 22, offset: 10977},
									run: (*parser).callonnotInExpression49,
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonnotInExpression50,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonnotInExpression69,
						},
						&labeledExpr{
							pos:   position{line: 490, col: 35, offset: 10692},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 38, offset: 10695},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "rvalue",
			pos:  position{line: 519, col: 1, offset: 11303},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 11316},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 4850},
						run: (*parser).callonrvalue2,
						expr: &labeledExpr{
							pos:   position{line: 227, col: 5, offset: 4850},
							label: "str",
							expr: &choiceExpr{
								pos: position{line: 227, col: 11, offset: 4856},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 227, col: 11, offset: 4856},
										run: (*parser).callonrvalue5,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 11, offset: 4856},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 201, col: 5, offset: 4274},
												run: (*parser).callonrvalue7,
												expr: &seqExpr{
													pos: position{line: 201, col: 7, offset: 4276},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 201, col: 7, offset: 4276},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 201, col: 11, offset: 4280},
															expr: &choiceExpr{
																pos: position{line: 201, col: 13, offset: 4282},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 201, col: 13, offset: 4282},
																		val:        "\\\"",
																		ignoreCase: false,
																		want:       "\"\\\\\\\"\"",
																	},
																	&seqExpr{
																		pos: position{line: 201, col: 20, offset: 4289},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 201, col: 20, offset: 4289},
																				expr: &litMatcher{
																					pos:        position{line: 201, col: 21, offset: 4290},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																			},
																			&anyMatcher{
																				line: 201, col: 25, offset: 4294,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 202, col: 9, offset: 4309},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 202, col: 9, offset: 4309},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
																&andCodeExpr{
																	pos: position{line: 202, col: 15, offset: 4315},
																	run: (*parser).callonrvalue19,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 229, col: 9, offset: 4968},
										run: (*parser).callonrvalue20,
										expr: &labeledExpr{
											pos:   position{line: 229, col: 9, offset: 4968},
											label: "str",
											expr: &actionExpr{
												pos: position{line: 214, col: 5, offset: 4583},
												run: (*parser).callonrvalue22,
												expr: &seqExpr{
													pos: position{line: 214, col: 7, offset: 4585},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 214, col: 7, offset: 4585},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 214, col: 11, offset: 4589},
															expr: &choiceExpr{
																pos: position{line: 214, col: 13, offset: 4591},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 214, col: 13, offset: 4591},
																		val:        "\\'",
																		ignoreCase: false,
																		want:       "\"\\\\'\"",
																	},
																	&seqExpr{
																		pos: position{line: 214, col: 20, offset: 4598},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 214, col: 20, offset: 4598},
																				expr: &litMatcher{
																					pos:        position{line: 214, col: 21, offset: 4599},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																			},
																			&anyMatcher{
																				line: 214, col: 25, offset: 4603,
																			},
																		},
																	},
																},
															},
														},
														&choiceExpr{
															pos: position{line: 215, col: 9, offset: 4618},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 215, col: 9, offset: 4618},
																	val:        "'",
																	ignoreCase: false,
																	want:       "\"'\"",
																},
																&andCodeExpr{
																	pos: position{line: 215, col: 15, offset: 4624},
																	run: (*parser).callonrvalue34,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 5503},
						run: (*parser).callonrvalue35,
						expr: &seqExpr{
							pos: position{line: 254, col: 5, offset: 5503},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 254, col: 5, offset: 5503},
									expr: &litMatcher{
										pos:        position{line: 254, col: 5, offset: 5503},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 254, col: 10, offset: 5508},
									expr: &charClassMatcher{
										pos:        position{line: 254, col: 10, offset: 5508},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 254, col: 17, offset: 5515},
									expr: &seqExpr{
										pos: position{line: 254, col: 18, offset: 5516},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 254, col: 18, offset: 5516},
												val:        ".",
												ignoreCase: false,
												want:       "\".\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 254, col: 22, offset: 5520},
												expr: &charClassMatcher{
													pos:        position{line: 254, col: 22, offset: 5520},
													val:        "[0-9]",
													ranges:     []rune{'0', '9'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 610, col: 5, offset: 13550},
						run: (*parser).callonrvalue46,
						expr: &labeledExpr{
							pos:   position{line: 610, col: 5, offset: 13550},
							label: "ses",
							expr: &oneOrMoreExpr{
								pos: position{line: 610, col: 9, offset: 13554},
								expr: &actionExpr{
									pos: position{line: 620, col: 5, offset: 13741},
									run: (*parser).callonrvalue49,
									expr: &seqExpr{
										pos: position{line: 620, col: 5, offset: 13741},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 620, col: 5, offset: 13741},
												val:        "[",
												ignoreCase: false,
												want:       "\"[\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 620, col: 9, offset: 13745},
												expr: &charClassMatcher{
													pos:        position{line: 620, col: 9, offset: 13745},
													val:        "[^][,]",
													chars:      []rune{']', '[', ','},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&choiceExpr{
												pos: position{line: 621, col: 9, offset: 13764},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 621, col: 9, offset: 13764},
														val:        "]",
														ignoreCase: false,
														want:       "\"]\"",
													},
													&andCodeExpr{
														pos: position{line: 621, col: 15, offset: 13770},
														run: (*parser).callonrvalue56,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 39, offset: 11350},
						name: "array",
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 5223},
						run: (*parser).callonrvalue58,
						expr: &seqExpr{
							pos: position{line: 240, col: 7, offset: 5225},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 240, col: 7, offset: 5225},
									val:        "/",
									ignoreCase: false,
									want:       "\"/\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 240, col: 11, offset: 5229},
									expr: &choiceExpr{
										pos: position{line: 240, col: 13, offset: 5231},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 240, col: 13, offset: 5231},
												val:        "\\/",
												ignoreCase: false,
												want:       "\"\\\\/\"",
											},
											&seqExpr{
												pos: position{line: 240, col: 20, offset: 5238},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 240, col: 20, offset: 5238},
														expr: &litMatcher{
															pos:        position{line: 240, col: 21, offset: 5239},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
													},
													&anyMatcher{
														line: 240, col: 25, offset: 5243,
													},
												},
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 241, col: 9, offset: 5258},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 241, col: 9, offset: 5258},
											val:        "/",
											ignoreCase: false,
											want:       "\"/\"",
										},
										&andCodeExpr{
											pos: position{line: 241, col: 15, offset: 5264},
											run: (*parser).callonrvalue70,
										},
									},
								},
							},
						},
					},
					&andCodeExpr{
						pos: position{line: 520, col: 56, offset: 11367},
						run: (*parser).callonrvalue71,
					},
				},
			},
		},
		{
			name: "compareExpression",
			pos:  position{line: 554, col: 1, offset: 12105},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 12129},
				run: (*parser).calloncompareExpression1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 12129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 12129},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 8, offset: 12132},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).calloncompareExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).calloncompareExpression24,
						},
						&labeledExpr{
							pos:   position{line: 555, col: 18, offset: 12142},
							label: "co",
							expr: &actionExpr{
								pos: position{line: 565, col: 5, offset: 12385},
								run: (*parser).calloncompareExpression26,
								expr: &choiceExpr{
									pos: position{line: 565, col: 6, offset: 12386},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 565, col: 6, offset: 12386},
											val:        "==",
											ignoreCase: false,
											want:       "\"==\"",
										},
										&litMatcher{
											pos:        position{line: 565, col: 13, offset: 12393},
											val:        "!=",
											ignoreCase: false,
											want:       "\"!=\"",
										},
										&litMatcher{
											pos:        position{line: 565, col: 20, offset: 12400},
											val:        "<=",
											ignoreCase: false,
											want:       "\"<=\"",
										},
										&litMatcher{
											pos:        position{line: 565, col: 27, offset: 12407},
											val:        ">=",
											ignoreCase: false,
											want:       "\">=\"",
										},
										&charClassMatcher{
											pos:        position{line: 565, col: 34, offset: 12414},
											val:        "[<>]",
											chars:      []rune{'<', '>'},
											ignoreCase: false,
											inverted:   false,
										},
										&andCodeExpr{
											pos: position{line: 565, col: 46, offset: 12426},
											run: (*parser).calloncompareExpression33,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).calloncompareExpression34,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).calloncompareExpression53,
						},
						&labeledExpr{
							pos:   position{line: 555, col: 40, offset: 12164},
							label: "rv",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 43, offset: 12167},
								name: "rvalue",
							},
						},
					},
				},
			},
		},
		{
			name: "regexpExpression",
			pos:  position{line: 576, col: 1, offset: 12710},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 12733},
				run: (*parser).callonregexpExpression1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 12733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 577, col: 5, offset: 12733},
							label: "lv",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 8, offset: 12736},
								name: "rvalue",
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonregexpExpression5,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonregexpExpression24,
						},
						&labeledExpr{
							pos:   position{line: 577, col: 19, offset: 12747},
							label: "ro",
							expr: &actionExpr{
								pos: position{line: 586, col: 5, offset: 12965},
								run: (*parser).callonregexpExpression26,
								expr: &choiceExpr{
									pos: position{line: 586, col: 6, offset: 12966},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 586, col: 6, offset: 12966},
											val:        "=~",
											ignoreCase: false,
											want:       "\"=~\"",
										},
										&litMatcher{
											pos:        position{line: 586, col: 13, offset: 12973},
											val:        "!~",
											ignoreCase: false,
											want:       "\"!~\"",
										},
										&andCodeExpr{
											pos: position{line: 586, col: 20, offset: 12980},
											run: (*parser).callonregexpExpression30,
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 56, col: 7, offset: 1244},
							run: (*parser).callonregexpExpression31,
							expr: &zeroOrMoreExpr{
								pos: position{line: 56, col: 7, offset: 1244},
								expr: &choiceExpr{
									pos: position{line: 56, col: 8, offset: 1245},
									alternatives: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 43, col: 5, offset: 907},
											expr: &seqExpr{
												pos: position{line: 43, col: 6, offset: 908},
												exprs: []interface{}{
													&zeroOrOneExpr{
														pos: position{line: 43, col: 6, offset: 908},
														expr: &oneOrMoreExpr{
															pos: position{line: 67, col: 5, offset: 1444},
															expr: &charClassMatcher{
																pos:        position{line: 67, col: 5, offset: 1444},
																val:        "[ \\t\\r\\n]",
																chars:      []rune{' ', '\t', '\r', '\n'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&litMatcher{
														pos:        position{line: 43, col: 18, offset: 920},
														val:        "#",
														ignoreCase: false,
														want:       "\"#\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 43, col: 22, offset: 924},
														expr: &charClassMatcher{
															pos:        position{line: 43, col: 22, offset: 924},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 43, col: 31, offset: 933},
														expr: &litMatcher{
															pos:        position{line: 43, col: 31, offset: 933},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
													&choiceExpr{
														pos: position{line: 43, col: 38, offset: 940},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 43, col: 38, offset: 940},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&notExpr{
																pos: position{line: 628, col: 7, offset: 13916},
																expr: &anyMatcher{
																	line: 628, col: 8, offset: 13917,
																},
															},
														},
													},
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 67, col: 5, offset: 1444},
											expr: &charClassMatcher{
												pos:        position{line: 67, col: 5, offset: 1444},
												val:        "[ \\t\\r\\n]",
												chars:      []rune{' ', '\t', '\r', '\n'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&stateCodeExpr{
							pos: position{line: 58, col: 9, offset: 1305},
							run: (*parser).callonregexpExpression50,
						},
						&labeledExpr{
							pos:   position{line: 577, col: 40, offset: 12768},
							label: "rv",
							expr: &choiceExpr{
								pos: position{line: 577, col: 44, offset: 12772},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 227, col: 5, offset: 4850},
										run: (*parser).callonregexpExpression53,
										expr: &labeledExpr{
											pos:   position{line: 227, col: 5, offset: 4850},
											label: "str",
											expr: &choiceExpr{
												pos: position{line: 227, col: 11, offset: 4856},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 227, col: 11, offset: 4856},
														run: (*parser).callonregexpExpression56,
														expr: &labeledExpr{
															pos:   position{line: 227, col: 11, offset: 4856},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 201, col: 5, offset: 4274},
																run: (*parser).callonregexpExpression58,
																expr: &seqExpr{
																	pos: position{line: 201, col: 7, offset: 4276},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 201, col: 7, offset: 4276},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 201, col: 11, offset: 4280},
																			expr: &choiceExpr{
																				pos: position{line: 201, col: 13, offset: 4282},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 201, col: 13, offset: 4282},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																					&seqExpr{
																						pos: position{line: 201, col: 20, offset: 4289},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 201, col: 20, offset: 4289},
																								expr: &litMatcher{
																									pos:        position{line: 201, col: 21, offset: 4290},
																									val:        "\"",
																									ignoreCase: false,
																									want:       "\"\\\"\"",
																								},
																							},
																							&anyMatcher{
																								line: 201, col: 25, offset: 4294,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 202, col: 9, offset: 4309},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 202, col: 9, offset: 4309},
																					val:        "\"",
																					ignoreCase: false,
																					want:       "\"\\\"\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 202, col: 15, offset: 4315},
																					run: (*parser).callonregexpExpression70,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 229, col: 9, offset: 4968},
														run: (*parser).callonregexpExpression71,
														expr: &labeledExpr{
															pos:   position{line: 229, col: 9, offset: 4968},
															label: "str",
															expr: &actionExpr{
																pos: position{line: 214, col: 5, offset: 4583},
																run: (*parser).callonregexpExpression73,
																expr: &seqExpr{
																	pos: position{line: 214, col: 7, offset: 4585},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 214, col: 7, offset: 4585},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 214, col: 11, offset: 4589},
																			expr: &choiceExpr{
																				pos: position{line: 214, col: 13, offset: 4591},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 214, col: 13, offset: 4591},
																						val:        "\\'",
																						ignoreCase: false,
																						want:       "\"\\\\'\"",
																					},
																					&seqExpr{
																						pos: position{line: 214, col: 20, offset: 4598},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 214, col: 20, offset: 4598},
																								expr: &litMatcher{
																									pos:        position{line: 214, col: 21, offset: 4599},
																									val:        "'",
																									ignoreCase: false,
																									want:       "\"'\"",
																								},
																							},
																							&anyMatcher{
																								line: 214, col: 25, offset: 4603,
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 215, col: 9, offset: 4618},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 215, col: 9, offset: 4618},
																					val:        "'",
																					ignoreCase: false,
																					want:       "\"'\"",
																				},
																				&andCodeExpr{
																					pos: position{line: 215, col: 15, offset: 4624},
																					run: (*parser).callonregexpExpression85,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 240, col: 5, offset: 5223},
										run: (*parser).callonregexpExpression86,
										expr: &seqExpr{
											pos: position{line: 240, col: 7, offset: 5225},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 240, col: 7, offset: 5225},
													val:        "/",
													ignoreCase: false,
													want:       "\"/\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 240, col: 11, offset: 5229},
													expr: &choiceExpr{
														pos: position{line: 240, col: 13, offset: 5231},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 240, col: 13, offset: 5231},
																val:        "\\/",
																ignoreCase: false,
																want:       "\"\\\\/\"",
															},
															&seqExpr{
																pos: position{line: 240, col: 20, offset: 5238},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 240, col: 20, offset: 5238},
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 21, offset: 5239},
																			val:        "/",
																			ignoreCase: false,
																			want:       "\"/\"",
																		},
																	},
																	&anyMatcher{
																		line: 240, col: 25, offset: 5243,
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 241, col: 9, offset: 5258},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 241, col: 9, offset: 5258},
															val:        "/",
															ignoreCase: false,
															want:       "\"/\"",
														},
														&andCodeExpr{
															pos: position{line: 241, col: 15, offset: 5264},
															run: (*parser).callonregexpExpression98,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) oninit3() error {
	return initState(c)

}

func (p *parser) calloninit3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit3()
}

func (c *current) oninit4() (bool, error) {
	return initParser()

}

func (p *parser) calloninit4() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit4()
}

func (c *current) oninit7(conf interface{}) (interface{}, error) {
	return ret(conf)

}

func (p *parser) calloninit7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit7(stack["conf"])
}

func (c *current) oninit13() (interface{}, error) {
	return ast.NewConfig(nil, nil, nil), nil

}

func (p *parser) calloninit13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit13()
}

func (c *current) oninit1(conf interface{}) (interface{}, error) {
	return retConfig(c, conf)

}

func (p *parser) calloninit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninit1(stack["conf"])
}

func (c *current) onconfig25(ps interface{}) (interface{}, error) {
	return ret(ps)

}

func (p *parser) callonconfig25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig25(stack["ps"])
}

func (c *current) onconfig1(ps, pss interface{}) (interface{}, error) {
	return config(ps, pss)

}

func (p *parser) callonconfig1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onconfig1(stack["ps"], stack["pss"])
}

func (c *current) onpluginSection5() (interface{}, error) {
	return ast.Input, nil

}

func (p *parser) callonpluginSection5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection5()
}

func (c *current) onpluginSection7() (interface{}, error) {
	return ast.Filter, nil

}

func (p *parser) callonpluginSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection7()
}

func (c *current) onpluginSection9() (interface{}, error) {
	return ast.Output, nil

}

func (p *parser) callonpluginSection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection9()
}

func (c *current) onpluginSection11() (bool, error) {
	return pushError("expect plugin type (input, filter, output)", c)

}

func (p *parser) callonpluginSection11() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection11()
}

func (c *current) onpluginSection12(pt interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonpluginSection12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection12(stack["pt"])
}

func (c *current) onpluginSection31(pt interface{}) error {
	return warnComment(c)

}

func (p *parser) callonpluginSection31() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection31(stack["pt"])
}

func (c *current) onpluginSection35(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonpluginSection35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection35(stack["bop"])
}

func (c *current) onpluginSection59() (bool, error) {
	return pushError("expect closing curly bracket", c)

}

func (p *parser) callonpluginSection59() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection59()
}

func (c *current) onpluginSection1(pt, bops interface{}) (interface{}, error) {
	return pluginSection(pt, bops)

}

func (p *parser) callonpluginSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpluginSection1(stack["pt"], stack["bops"])
}

func (c *current) onplugin23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonplugin23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin23()
}

func (c *current) onplugin45() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonplugin45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin45()
}

func (c *current) onplugin33() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonplugin33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin33()
}

func (c *current) onplugin31(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonplugin31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin31(stack["str"])
}

func (c *current) onplugin60() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonplugin60() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin60()
}

func (c *current) onplugin48() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonplugin48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin48()
}

func (c *current) onplugin46(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonplugin46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin46(stack["str"])
}

func (c *current) onplugin28(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonplugin28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin28(stack["str"])
}

func (c *current) onplugin26(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonplugin26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin26(stack["value"])
}

func (c *current) onplugin61(name interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonplugin61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin61(stack["name"])
}

func (c *current) onplugin80(name interface{}) error {
	return warnComment(c)

}

func (p *parser) callonplugin80() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin80(stack["name"])
}

func (c *current) onplugin108(attribute interface{}) (interface{}, error) {
	return ret(attribute)

}

func (p *parser) callonplugin108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin108(stack["attribute"])
}

func (c *current) onplugin102(attribute, attrs interface{}) (interface{}, error) {
	return attributes(attribute, attrs)

}

func (p *parser) callonplugin102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin102(stack["attribute"], stack["attrs"])
}

func (c *current) onplugin152() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonplugin152() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin152()
}

func (c *current) onplugin1(name, attributes interface{}) (interface{}, error) {
	return plugin(name, attributes)

}

func (p *parser) callonplugin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onplugin1(stack["name"], stack["attributes"])
}

func (c *current) onattribute5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonattribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute5()
}

func (c *current) onattribute27() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonattribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute27()
}

func (c *current) onattribute15() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonattribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute15()
}

func (c *current) onattribute13(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonattribute13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute13(stack["str"])
}

func (c *current) onattribute42() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonattribute42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute42()
}

func (c *current) onattribute30() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonattribute30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute30()
}

func (c *current) onattribute28(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonattribute28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute28(stack["str"])
}

func (c *current) onattribute10(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonattribute10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute10(stack["str"])
}

func (c *current) onattribute8(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonattribute8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute8(stack["value"])
}

func (c *current) onattribute43(name interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonattribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute43(stack["name"])
}

func (c *current) onattribute62(name interface{}) error {
	return warnComment(c)

}

func (p *parser) callonattribute62() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute62(stack["name"])
}

func (c *current) onattribute64(name interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonattribute64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute64(stack["name"])
}

func (c *current) onattribute83(name interface{}) error {
	return warnComment(c)

}

func (p *parser) callonattribute83() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute83(stack["name"])
}

func (c *current) onattribute1(name, value interface{}) (interface{}, error) {
	return attribute(name, value)

}

func (p *parser) callonattribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onattribute1(stack["name"], stack["value"])
}

func (c *current) onvalue3() (interface{}, error) {
	return ast.NewStringAttribute("", string(c.text), ast.Bareword), nil

}

func (p *parser) callonvalue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue3()
}

func (c *current) onvalue25() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonvalue25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue25()
}

func (c *current) onvalue13() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonvalue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue13()
}

func (c *current) onvalue11(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonvalue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue11(stack["str"])
}

func (c *current) onvalue40() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonvalue40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue40()
}

func (c *current) onvalue28() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonvalue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue28()
}

func (c *current) onvalue26(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonvalue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue26(stack["str"])
}

func (c *current) onvalue8(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonvalue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue8(stack["str"])
}

func (c *current) onvalue41() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonvalue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue41()
}

func (c *current) onvalue54() (bool, error) {
	return pushError("invalid value", c)

}

func (p *parser) callonvalue54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalue54()
}

func (c *current) onarray32() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonarray32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray32()
}

func (c *current) onarray51() error {
	return warnComment(c)

}

func (p *parser) callonarray51() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray51()
}

func (c *current) onarray30(value interface{}) (interface{}, error) {
	return ret(value)

}

func (p *parser) callonarray30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray30(stack["value"])
}

func (c *current) onarray24(value, values interface{}) (interface{}, error) {
	return attributes(value, values)

}

func (p *parser) callonarray24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray24(stack["value"], stack["values"])
}

func (c *current) onarray93() (bool, error) {
	return fatalError("expect closing square bracket", c)

}

func (p *parser) callonarray93() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray93()
}

func (c *current) onarray1(value interface{}) (interface{}, error) {
	return array(value)

}

func (p *parser) callonarray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onarray1(stack["value"])
}

func (c *current) onhash45() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonhash45() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash45()
}

func (c *current) onhash1(entries interface{}) (interface{}, error) {
	return hash(entries)

}

func (p *parser) callonhash1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhash1(stack["entries"])
}

func (c *current) onhashentries7(hashentry interface{}) (interface{}, error) {
	return ret(hashentry)

}

func (p *parser) callonhashentries7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries7(stack["hashentry"])
}

func (c *current) onhashentries1(hashentry, hashentries1 interface{}) (interface{}, error) {
	return hashentries(hashentry, hashentries1)

}

func (p *parser) callonhashentries1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentries1(stack["hashentry"], stack["hashentries1"])
}

func (c *current) onhashentry5() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonhashentry5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry5()
}

func (c *current) onhashentry16() (interface{}, error) {
	return ast.NewStringAttribute("", string(c.text), ast.Bareword), nil

}

func (p *parser) callonhashentry16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry16()
}

func (c *current) onhashentry38() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonhashentry38() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry38()
}

func (c *current) onhashentry26() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonhashentry26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry26()
}

func (c *current) onhashentry24(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonhashentry24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry24(stack["str"])
}

func (c *current) onhashentry53() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonhashentry53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry53()
}

func (c *current) onhashentry41() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonhashentry41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry41()
}

func (c *current) onhashentry39(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonhashentry39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry39(stack["str"])
}

func (c *current) onhashentry21(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonhashentry21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry21(stack["str"])
}

func (c *current) onhashentry54(name interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonhashentry54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry54(stack["name"])
}

func (c *current) onhashentry73(name interface{}) error {
	return warnComment(c)

}

func (p *parser) callonhashentry73() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry73(stack["name"])
}

func (c *current) onhashentry75(name interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonhashentry75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry75(stack["name"])
}

func (c *current) onhashentry94(name interface{}) error {
	return warnComment(c)

}

func (p *parser) callonhashentry94() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry94(stack["name"])
}

func (c *current) onhashentry1(name, value interface{}) (interface{}, error) {
	return hashentry(name, value)

}

func (p *parser) callonhashentry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onhashentry1(stack["name"], stack["value"])
}

func (c *current) onbranch25(eib interface{}) (interface{}, error) {
	return ret(eib)

}

func (p *parser) callonbranch25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch25(stack["eib"])
}

func (c *current) onbranch49(eb interface{}) (interface{}, error) {
	return ret(eb)

}

func (p *parser) callonbranch49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch49(stack["eb"])
}

func (c *current) onbranch1(ifBlock, elseIfBlocks, elseBlock interface{}) (interface{}, error) {
	return branch(ifBlock, elseIfBlocks, elseBlock)

}

func (p *parser) callonbranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onbranch1(stack["ifBlock"], stack["elseIfBlocks"], stack["elseBlock"])
}

func (c *current) onifCond4() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonifCond4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond4()
}

func (c *current) onifCond23() error {
	return warnComment(c)

}

func (p *parser) callonifCond23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond23()
}

func (c *current) onifCond26(cond interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonifCond26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond26(stack["cond"])
}

func (c *current) onifCond45(cond interface{}) error {
	return warnComment(c)

}

func (p *parser) callonifCond45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond45(stack["cond"])
}

func (c *current) onifCond67(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonifCond67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond67(stack["bop"])
}

func (c *current) onifCond91() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonifCond91() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond91()
}

func (c *current) onifCond1(cond, bops interface{}) (interface{}, error) {
	return ifBlock(cond, bops)

}

func (p *parser) callonifCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onifCond1(stack["cond"], stack["bops"])
}

func (c *current) onelseIf4() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonelseIf4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf4()
}

func (c *current) onelseIf23() error {
	return warnComment(c)

}

func (p *parser) callonelseIf23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf23()
}

func (c *current) onelseIf25() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonelseIf25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf25()
}

func (c *current) onelseIf44() error {
	return warnComment(c)

}

func (p *parser) callonelseIf44() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf44()
}

func (c *current) onelseIf47(cond interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonelseIf47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf47(stack["cond"])
}

func (c *current) onelseIf66(cond interface{}) error {
	return warnComment(c)

}

func (p *parser) callonelseIf66() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf66(stack["cond"])
}

func (c *current) onelseIf88(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonelseIf88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf88(stack["bop"])
}

func (c *current) onelseIf112() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonelseIf112() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf112()
}

func (c *current) onelseIf1(cond, bops interface{}) (interface{}, error) {
	return elseIfBlock(cond, bops)

}

func (p *parser) callonelseIf1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseIf1(stack["cond"], stack["bops"])
}

func (c *current) onelseCond4() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonelseCond4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond4()
}

func (c *current) onelseCond23() error {
	return warnComment(c)

}

func (p *parser) callonelseCond23() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond23()
}

func (c *current) onelseCond45(bop interface{}) (interface{}, error) {
	return ret(bop)

}

func (p *parser) callonelseCond45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond45(stack["bop"])
}

func (c *current) onelseCond69() (bool, error) {
	return fatalError("expect closing curly bracket", c)

}

func (p *parser) callonelseCond69() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond69()
}

func (c *current) onelseCond1(bops interface{}) (interface{}, error) {
	return elseBlock(bops)

}

func (p *parser) callonelseCond1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onelseCond1(stack["bops"])
}

func (c *current) oncondition9() (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloncondition9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition9()
}

func (c *current) oncondition28() error {
	return warnComment(c)

}

func (p *parser) calloncondition28() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition28()
}

func (c *current) oncondition36() (bool, error) {
	return pushError("expect boolean operator (and, or, xor, nand)", c)

}

func (p *parser) calloncondition36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition36()
}

func (c *current) oncondition30() (interface{}, error) {
	return booleanOperator(string(c.text))

}

func (p *parser) calloncondition30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition30()
}

func (c *current) oncondition37(bo interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloncondition37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition37(stack["bo"])
}

func (c *current) oncondition56(bo interface{}) error {
	return warnComment(c)

}

func (p *parser) calloncondition56() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition56(stack["bo"])
}

func (c *current) oncondition7(bo, cond interface{}) (interface{}, error) {
	return expression(bo, cond)

}

func (p *parser) calloncondition7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition7(stack["bo"], stack["cond"])
}

func (c *current) oncondition1(cond, conds interface{}) (interface{}, error) {
	return condition(cond, conds)

}

func (p *parser) calloncondition1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition1(stack["cond"], stack["conds"])
}

func (c *current) onexpression5() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonexpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression5()
}

func (c *current) onexpression24() error {
	return warnComment(c)

}

func (p *parser) callonexpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression24()
}

func (c *current) onexpression27(cond interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonexpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression27(stack["cond"])
}

func (c *current) onexpression46(cond interface{}) error {
	return warnComment(c)

}

func (p *parser) callonexpression46() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression46(stack["cond"])
}

func (c *current) onexpression2(cond interface{}) (interface{}, error) {
	return conditionExpression(cond)

}

func (p *parser) callonexpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression2(stack["cond"])
}

func (c *current) onexpression53(rv interface{}) (interface{}, error) {
	return rvalue(rv)

}

func (p *parser) callonexpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression53(stack["rv"])
}

func (c *current) onnegativeExpression5() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnegativeExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression5()
}

func (c *current) onnegativeExpression24() error {
	return warnComment(c)

}

func (p *parser) callonnegativeExpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression24()
}

func (c *current) onnegativeExpression26() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnegativeExpression26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression26()
}

func (c *current) onnegativeExpression45() error {
	return warnComment(c)

}

func (p *parser) callonnegativeExpression45() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression45()
}

func (c *current) onnegativeExpression48(cond interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnegativeExpression48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression48(stack["cond"])
}

func (c *current) onnegativeExpression67(cond interface{}) error {
	return warnComment(c)

}

func (p *parser) callonnegativeExpression67() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression67(stack["cond"])
}

func (c *current) onnegativeExpression70() (bool, error) {
	return fatalError("expect closing parenthesis", c)

}

func (p *parser) callonnegativeExpression70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression70()
}

func (c *current) onnegativeExpression2(cond interface{}) (interface{}, error) {
	return negativeExpression(cond)

}

func (p *parser) callonnegativeExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression2(stack["cond"])
}

func (c *current) onnegativeExpression74() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnegativeExpression74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression74()
}

func (c *current) onnegativeExpression93() error {
	return warnComment(c)

}

func (p *parser) callonnegativeExpression93() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression93()
}

func (c *current) onnegativeExpression105() (bool, error) {
	return pushError("expect closing square bracket", c)

}

func (p *parser) callonnegativeExpression105() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression105()
}

func (c *current) onnegativeExpression98() (interface{}, error) {
	return selectorElement(string(c.text))

}

func (p *parser) callonnegativeExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression98()
}

func (c *current) onnegativeExpression95(ses interface{}) (interface{}, error) {
	return selector(ses)

}

func (p *parser) callonnegativeExpression95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression95(stack["ses"])
}

func (c *current) onnegativeExpression71(sel interface{}) (interface{}, error) {
	return negativeSelector(sel)

}

func (p *parser) callonnegativeExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnegativeExpression71(stack["sel"])
}

func (c *current) oninExpression5(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloninExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression5(stack["lv"])
}

func (c *current) oninExpression24(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) calloninExpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression24(stack["lv"])
}

func (c *current) oninExpression27() (bool, error) {
	return pushError("expect in operator (in)", c)

}

func (p *parser) calloninExpression27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression27()
}

func (c *current) oninExpression28(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloninExpression28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression28(stack["lv"])
}

func (c *current) oninExpression47(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) calloninExpression47() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression47(stack["lv"])
}

func (c *current) oninExpression1(lv, rv interface{}) (interface{}, error) {
	return inExpression(lv, rv)

}

func (p *parser) calloninExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninExpression1(stack["lv"], stack["rv"])
}

func (c *current) onnotInExpression5(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnotInExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression5(stack["lv"])
}

func (c *current) onnotInExpression24(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) callonnotInExpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression24(stack["lv"])
}

func (c *current) onnotInExpression28() (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnotInExpression28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression28()
}

func (c *current) onnotInExpression47() error {
	return warnComment(c)

}

func (p *parser) callonnotInExpression47() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression47()
}

func (c *current) onnotInExpression49() (bool, error) {
	return pushError("expect not in operator (not in)", c)

}

func (p *parser) callonnotInExpression49() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression49()
}

func (c *current) onnotInExpression50(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonnotInExpression50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression50(stack["lv"])
}

func (c *current) onnotInExpression69(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) callonnotInExpression69() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression69(stack["lv"])
}

func (c *current) onnotInExpression1(lv, rv interface{}) (interface{}, error) {
	return notInExpression(lv, rv)

}

func (p *parser) callonnotInExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnotInExpression1(stack["lv"], stack["rv"])
}

func (c *current) onrvalue19() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonrvalue19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue19()
}

func (c *current) onrvalue7() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonrvalue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue7()
}

func (c *current) onrvalue5(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonrvalue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue5(stack["str"])
}

func (c *current) onrvalue34() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonrvalue34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue34()
}

func (c *current) onrvalue22() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonrvalue22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue22()
}

func (c *current) onrvalue20(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonrvalue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue20(stack["str"])
}

func (c *current) onrvalue2(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonrvalue2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue2(stack["str"])
}

func (c *current) onrvalue35() (interface{}, error) {
	return number(string(c.text))

}

func (p *parser) callonrvalue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue35()
}

func (c *current) onrvalue56() (bool, error) {
	return pushError("expect closing square bracket", c)

}

func (p *parser) callonrvalue56() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue56()
}

func (c *current) onrvalue49() (interface{}, error) {
	return selectorElement(string(c.text))

}

func (p *parser) callonrvalue49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue49()
}

func (c *current) onrvalue46(ses interface{}) (interface{}, error) {
	return selector(ses)

}

func (p *parser) callonrvalue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue46(stack["ses"])
}

func (c *current) onrvalue70() (bool, error) {
	return fatalError("expect closing slash (/) for regexp", c)

}

func (p *parser) callonrvalue70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue70()
}

func (c *current) onrvalue58() (interface{}, error) {
	return regexp(c)

}

func (p *parser) callonrvalue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue58()
}

func (c *current) onrvalue71() (bool, error) {
	return pushError("invalid value for expression", c)

}

func (p *parser) callonrvalue71() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onrvalue71()
}

func (c *current) oncompareExpression5(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloncompareExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression5(stack["lv"])
}

func (c *current) oncompareExpression24(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) calloncompareExpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression24(stack["lv"])
}

func (c *current) oncompareExpression33() (bool, error) {
	return pushError("expect compare operator (==, !=, <=, >=, <, >)", c)

}

func (p *parser) calloncompareExpression33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression33()
}

func (c *current) oncompareExpression26() (interface{}, error) {
	return compareOperator(string(c.text))

}

func (p *parser) calloncompareExpression26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression26()
}

func (c *current) oncompareExpression34(lv, co interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) calloncompareExpression34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression34(stack["lv"], stack["co"])
}

func (c *current) oncompareExpression53(lv, co interface{}) error {
	return warnComment(c)

}

func (p *parser) calloncompareExpression53() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression53(stack["lv"], stack["co"])
}

func (c *current) oncompareExpression1(lv, co, rv interface{}) (interface{}, error) {
	return compareExpression(lv, co, rv)

}

func (p *parser) calloncompareExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncompareExpression1(stack["lv"], stack["co"], stack["rv"])
}

func (c *current) onregexpExpression5(lv interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonregexpExpression5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression5(stack["lv"])
}

func (c *current) onregexpExpression24(lv interface{}) error {
	return warnComment(c)

}

func (p *parser) callonregexpExpression24() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression24(stack["lv"])
}

func (c *current) onregexpExpression30() (bool, error) {
	return pushError("expect regexp comparison operator (=~, !~)", c)

}

func (p *parser) callonregexpExpression30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression30()
}

func (c *current) onregexpExpression26() (interface{}, error) {
	return regexpOperator(string(c.text))

}

func (p *parser) callonregexpExpression26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression26()
}

func (c *current) onregexpExpression31(lv, ro interface{}) (interface{}, error) {
	return c.text, nil

}

func (p *parser) callonregexpExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression31(stack["lv"], stack["ro"])
}

func (c *current) onregexpExpression50(lv, ro interface{}) error {
	return warnComment(c)

}

func (p *parser) callonregexpExpression50() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression50(stack["lv"], stack["ro"])
}

func (c *current) onregexpExpression70() (bool, error) {
	return fatalError("expect closing double quotes (\")", c)

}

func (p *parser) callonregexpExpression70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression70()
}

func (c *current) onregexpExpression58() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonregexpExpression58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression58()
}

func (c *current) onregexpExpression56(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil

}

func (p *parser) callonregexpExpression56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression56(stack["str"])
}

func (c *current) onregexpExpression85() (bool, error) {
	return fatalError("expect closing single quote (')", c)

}

func (p *parser) callonregexpExpression85() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression85()
}

func (c *current) onregexpExpression73() (interface{}, error) {
	return enclosedValue(c)

}

func (p *parser) callonregexpExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression73()
}

func (c *current) onregexpExpression71(str interface{}) (interface{}, error) {
	return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil

}

func (p *parser) callonregexpExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression71(stack["str"])
}

func (c *current) onregexpExpression53(str interface{}) (interface{}, error) {
	return ret(str)

}

func (p *parser) callonregexpExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression53(stack["str"])
}

func (c *current) onregexpExpression98() (bool, error) {
	return fatalError("expect closing slash (/) for regexp", c)

}

func (p *parser) callonregexpExpression98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression98()
}

func (c *current) onregexpExpression86() (interface{}, error) {
	return regexp(c)

}

func (p *parser) callonregexpExpression86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression86()
}

func (c *current) onregexpExpression1(lv, ro, rv interface{}) (interface{}, error) {
	return regexpExpression(lv, ro, rv)

}

func (p *parser) callonregexpExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onregexpExpression1(stack["lv"], stack["ro"], stack["rv"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) { // nolint: deadcode
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) { // nolint: deadcode
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

// nolint: structcheck
type grammar struct {
	pos   position
	rules []*rule
}

// nolint: structcheck
type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

// nolint: structcheck
type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

// nolint: structcheck
type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

// nolint: structcheck
type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

// nolint: structcheck
type seqExpr struct {
	pos   position
	exprs []interface{}
}

// nolint: structcheck
type throwExpr struct {
	pos   position
	label string
}

// nolint: structcheck
type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

// nolint: structcheck
type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr        // nolint: structcheck
type notExpr expr        // nolint: structcheck
type zeroOrOneExpr expr  // nolint: structcheck
type zeroOrMoreExpr expr // nolint: structcheck
type oneOrMoreExpr expr  // nolint: structcheck

// nolint: structcheck
type ruleRefExpr struct {
	pos  position
	name string
}

// nolint: structcheck
type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

// nolint: structcheck
type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

// nolint: structcheck
type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

// nolint: structcheck
type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position // nolint: structcheck

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

// nolint: structcheck,deadcode
type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

// nolint: varcheck
const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

// nolint: structcheck,maligned
type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

// nolint: gocyclo
func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

// nolint: gocyclo
func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

// nolint: gocyclo
func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
