// Parsing rules based on https://github.com/elastic/logstash/blob/master/logstash-core/lib/logstash/config/grammar.treetop
{
    package config
}

// Parsing entry point
init =
    &{
        return initParser();
    } conf:(
        conf:config EOF {
            return ret(conf)
        } / _ EOF {
            return ast.NewConfig(nil, nil, nil), nil
        }
    ) {
        return ret(conf)
    }

//  rule config
//    _ plugin_section _ (_ plugin_section)* _ <LogStash::Config::AST::Config>
//  end

// Removed _ after initial pluginSection (ps), because it is not needed.

config =
    _ ps:pluginSection pss:(
        _ ps:pluginSection {
            return ret(ps)
        }
    )* _ EOF {
        return config(ps, pss)
    }

//  rule comment
//    (whitespace? "#" [^\r\n]* "\r"? "\n")+ <LogStash::Config::AST::Comment>
//  end

comment =
    (whitespace? "#" [^\r\n]* "\r"? ("\n" / EOF))+

//  rule _
//    (comment / whitespace)* <LogStash::Config::AST::Whitespace>
//  end

_ =
    (comment / whitespace)*

//  rule whitespace
//    [ \t\r\n]+ <LogStash::Config::AST::Whitespace>
//  end

whitespace =
    [ \t\r\n]+

//  rule plugin_section
//    plugin_type _ "{"
//       _ (branch_or_plugin _)*
//    "}"
//    <LogStash::Config::AST::PluginSection>
//  end

pluginSection =
    pt:pluginType _ "{" _ bops:(
        bop:branchOrPlugin _ {
            return ret(bop)
        }
    )* (
        "}" / &{
            return pushError("expect closing curly bracket", c)
        }
    ) {
        return pluginSection(pt, bops)
    }

//   rule branch_or_plugin
//     branch / plugin
//   end

branchOrPlugin =
    branch / plugin

//   rule plugin_type
//     ("input" / "filter" / "output")
//   end

pluginType =
    "input" {
        return ast.Input, nil
    } / "filter" {
        return ast.Filter, nil
    } / "output" {
        return ast.Output, nil
    } / &{
        return pushError("expect plugin type (input, filter, output)", c)
    }

//   rule plugins
//     (plugin (_ plugin)*)?
//     <LogStash::Config::AST::Plugins>
//   end

// plugins =
//     (
//         p:plugin ps:(
//             _ p:plugin {
//                 fmt.Println("plugin")
//                 return ret(p)
//             }
//         )* {
//             fmt.Println("plugins")
//             return plugins(p, ps)
//         }
//     )?

//   rule plugin
//     name _ "{"
//       _
//       attributes:( attribute (whitespace _ attribute)*)?
//       _
//     "}"
//     <LogStash::Config::AST::Plugin>
//   end

plugin =
    name:name _ "{" _ attributes:(
        attribute:attribute attrs:(
            whitespace _ attribute:attribute {
                return ret(attribute)
            }
        )* {
            return attributes(attribute, attrs)
        }
    )? _ (
        "}" / &{
            return fatalError("expect closing curly bracket", c)
        }
    ) {
        return plugin(name, attributes)
    }

//   rule name
//     (
//       ([A-Za-z0-9_-]+ <LogStash::Config::AST::Name>)
//       / string
//     )
//   end

name =
    ( ([A-Za-z0-9_-]+) {
        return string(c.text), nil
    } / value:stringValue {
        return ret(value)
    } )

//   rule attribute
//     name _ "=>" _ value
//     <LogStash::Config::AST::Attribute>
//   end

attribute =
    name:name _ "=>" _ value:value {
        return attribute(name, value)
    }

//   rule value
//     plugin / bareword / string / number / array / hash
//   end

value =
    plugin / bareword / stringValue / number / array / hash / &{
        return pushError("invalid value", c)
    }

//   rule array_value
//     bareword / string / number / array / hash
//   end

arrayValue =
    bareword / stringValue / number / array / hash / &{
        return fatalError("invalid array value", c)
    }

//   rule bareword
//     [A-Za-z_] [A-Za-z0-9_]+
//     <LogStash::Config::AST::Bareword>
//   end

bareword =
    [A-Za-z_] [A-Za-z0-9_]+ {
        return ast.NewStringAttribute("", string(c.text), ast.Bareword), nil
    }

//   rule double_quoted_string
//     ( '"' ( '\"' / !'"' . )* '"' <LogStash::Config::AST::String>)
//   end

doubleQuotedString =
    ( `"` ( `\"` / !`"` . )* (
        `"` / &{
            return fatalError("expect closing double quotes (\")", c)
        }
    ) ) {
        return enclosedValue(c)
    }

//   rule single_quoted_string
//     ( "'" ( "\\'" / !"'" . )* "'" <LogStash::Config::AST::String>)
//   end

singleQuotedString =
    ( `'` ( `\'` / !`'` . )* (
        `'` / &{
            return fatalError("expect closing single quote (')", c)
        }
    ) ) {
        return enclosedValue(c)
    }

//   rule string
//     double_quoted_string / single_quoted_string
//   end

stringValue =
    str:( str:doubleQuotedString {
        return ast.NewStringAttribute("", str.(string), ast.DoubleQuoted), nil
    } / str:singleQuotedString {
        return ast.NewStringAttribute("", str.(string), ast.SingleQuoted), nil
    } ) {
        return ret(str)
    }

//   rule regexp
//     ( '/' ( '\/' / !'/' . )* '/'  <LogStash::Config::AST::RegExp>)
//   end

regexp =
    ( `/` ( `\/` / !`/` . )* (
        `/` / &{
            return fatalError("expect closing slash (/) for regexp", c)
        }
    ) ) {
        return regexp(c)
    }

//   rule number
//     "-"? [0-9]+ ("." [0-9]*)?
//     <LogStash::Config::AST::Number>
//   end

number =
    "-"? [0-9]+ ("." [0-9]*)? {
        return number(string(c.text))
    }

//   rule array
//     "["
//     _
//     (
//       value (_ "," _ value)*
//     )?
//     _
//     "]"
//     <LogStash::Config::AST::Array>
//   end

// TODO: value should be changed to to array_value due to https://github.com/elastic/logstash/issues/6580
array =
    "[" _ value:(
        value:value values:(
            _ "," _ value:value {
                return ret(value)
            }
        )* {
            return attributes(value, values)
        }
    )? _ (
        "]" / &{
            return fatalError("expect closing square bracket", c)
        }
    ) {
        return array(value)
    }

//   rule hash
//     "{"
//       _
//       hashentries?
//       _
//     "}"
//     <LogStash::Config::AST::Hash>
//   end

hash =
    "{" _ entries:hashentries? _ (
        "}" / &{
            return fatalError("expect closing curly bracket", c)
        }
    ) {
        return hash(entries)
    }

//   rule hashentries
//     hashentry (whitespace hashentry)*
//     <LogStash::Config::AST::HashEntries>
//   end

hashentries =
    hashentry:hashentry hashentries1:(
        whitespace hashentry:hashentry {
            return ret(hashentry)
        }
    )* {
        return hashentries(hashentry, hashentries1)
    }

//   rule hashentry
//     name:(number / bareword / string) _ "=>" _ value
//     <LogStash::Config::AST::HashEntry>
//   end

hashentry =
    name:(number / bareword / stringValue) _ "=>" _ value:value {
        return hashentry(name, value)
    }

// Conditions

//   rule branch
//     if (_ else_if)* (_ else)?
//     <LogStash::Config::AST::Branch>
//   end

branch =
    ifBlock:ifCond elseIfBlocks:(
        _ eib:elseIf {
                return ret(eib)
            }
        )* elseBlock:(
            _ eb:elseCond {
                return ret(eb)
            }
        )? {
        return branch(ifBlock, elseIfBlocks, elseBlock)
    }

//   rule if
//     "if" _ condition _ "{" _ (branch_or_plugin _)* "}"
//     <LogStash::Config::AST::If>
//   end

ifCond =
    "if" _ cond:condition _ "{" _ bops:(
            bop:branchOrPlugin _ {
                return ret(bop)
            }
        )* (
            "}" / &{
                return fatalError("expect closing curly bracket", c)
            }
        ) {
        return ifBlock(cond, bops)
    }

//   rule else_if
//     "else" _ "if" _ condition _ "{" _ ( branch_or_plugin _)* "}"
//     <LogStash::Config::AST::Elsif>
//   end

elseIf =
    "else" _ "if" _ cond:condition _ "{" _ bops:(
        bop:branchOrPlugin _ {
            return ret(bop)
        }
    )* (
        "}" / &{
            return fatalError("expect closing curly bracket", c)
        }
    ) {
        return elseIfBlock(cond, bops)
    }

//   rule else
//     "else" _ "{" _ (branch_or_plugin _)* "}"
//     <LogStash::Config::AST::Else>
//   end

elseCond =
    "else" _ "{" _ bops:(
        bop:branchOrPlugin _ {
            return ret(bop)
        }
    )* (
        "}" / &{
            return fatalError("expect closing curly bracket", c)
        }
    ) {
        return elseBlock(bops)
    }

//   rule condition
//     expression (_ boolean_operator _ expression)*
//     <LogStash::Config::AST::Condition>
//   end

condition =
    cond:expression conds:(
        _ bo:booleanOperator _ cond:expression {
            return expression(bo, cond)
        }
    )* {
        return condition(cond, conds)
    }

//   rule expression
//     (
//         ("(" _ condition _ ")")
//       / negative_expression
//       / in_expression
//       / not_in_expression
//       / compare_expression
//       / regexp_expression
//       / rvalue
//     ) <LogStash::Config::AST::Expression>
//   end

expression =
    (
        (
            "(" _ cond:condition _ ")" {
                return conditionExpression(cond)
            }
        )
      / negativeExpression
      / inExpression
      / notInExpression
      / compareExpression
      / regexpExpression
      / rv:rvalue {
          return rvalue(rv)
      }
      // &{ return pushError("expect valid expression", c) }
    )

//   rule negative_expression
//     (
//         ("!" _ "(" _ condition _ ")")
//       / ("!" _ selector)
//     ) <LogStash::Config::AST::NegativeExpression>
//   end

negativeExpression =
    (
        (
            "!" _ "(" _ cond:condition _ (
                ")" / &{
                    return fatalError("expect closing parenthesis", c)
                }
            ) {
                return negativeExpression(cond)
            }
        )
      / (
          "!" _ sel:selector {
              return negativeSelector(sel)
          }
        )
    )

//   rule in_expression
//     rvalue _ in_operator _ rvalue
//     <LogStash::Config::AST::InExpression>
//   end

inExpression =
    lv:rvalue _ inOperator _ rv:rvalue {
        return inExpression(lv, rv)
    }

//   rule not_in_expression
//     rvalue _ not_in_operator _ rvalue
//     <LogStash::Config::AST::NotInExpression>
//   end

notInExpression =
    lv:rvalue _ notInOperator _ rv:rvalue {
        return notInExpression(lv, rv)
    }

//   rule in_operator
//     "in"
//   end

inOperator =
    "in" / &{
        return pushError("expect in operator (in)", c)
    }

//   rule not_in_operator
//     "not " _ "in"
//   end

notInOperator =
    "not " _ "in" / &{
        return pushError("expect not in operator (not in)", c)
    }

//   rule rvalue
//     string / number / selector / array / method_call / regexp
//   end

// Removed method_call due to https://github.com/elastic/logstash/issues/6698
// rvalue =
//     string_value / number / selector / array / method_call / regexp
rvalue =
    stringValue / number / selector / array / regexp / &{
        return pushError("invalid value for expression", c)
    }

//   rule method_call
//       method _ "(" _
//         (
//           rvalue ( _ "," _ rvalue )*
//         )?
//       _ ")"
//     <LogStash::Config::AST::MethodCall>
//   end

// Removed method_call due to https://github.com/elastic/logstash/issues/6698
// method_call  =
//       method _ "(" _
//         (
//           rvalue ( _ "," _ rvalue )*
//         )?
//       _ ")"

//   rule method
//     bareword
//   end

// Removed method_call due to https://github.com/elastic/logstash/issues/6698
// method =
//     bareword

//   rule compare_expression
//     rvalue _ compare_operator _ rvalue
//     <LogStash::Config::AST::ComparisonExpression>
//   end

compareExpression =
    lv:rvalue _ co:compareOperator _ rv:rvalue {
        return compareExpression(lv, co, rv)
    }

//   rule compare_operator
//     ("==" / "!=" / "<=" / ">=" / "<" / ">")
//     <LogStash::Config::AST::ComparisonOperator>
//   end

compareOperator =
    ("==" / "!=" / "<=" / ">=" / "<" / ">" / &{
        return pushError("expect compare operator (==, !=, <=, >=, <, >)", c)
    }) {
        return compareOperator(string(c.text))
    }

//   rule regexp_expression
//     rvalue _  regexp_operator _ (string / regexp)
//     <LogStash::Config::AST::RegexpExpression>
//   end

regexpExpression =
    lv:rvalue _  ro:regexpOperator _ rv:(stringValue / regexp) {
        return regexpExpression(lv, ro, rv)
    }

//   rule regexp_operator
//     ("=~" / "!~") <LogStash::Config::AST::RegExpOperator>
//   end

regexpOperator =
    ("=~" / "!~" / &{
        return pushError("expect regexp comparison operator (=~, !~)", c)
    }) {
        return regexpOperator(string(c.text))
    }

//   rule boolean_operator
//     ("and" / "or" / "xor" / "nand")
//     <LogStash::Config::AST::BooleanOperator>
//   end

booleanOperator =
    ("and" / "or" / "xor" / "nand" / &{
        return pushError("expect boolean operator (and, or, xor, nand)", c)
    }) {
        return booleanOperator(string(c.text))
    }

//   rule selector
//     selector_element+
//     <LogStash::Config::AST::Selector>
//   end

selector =
    ses:selectorElement+ {
        return selector(ses)
    }

//   rule selector_element
//     "[" [^\]\[,]+ "]"
//     <LogStash::Config::AST::SelectorElement>
//   end

selectorElement =
    "[" [^\][,]+ (
        "]" / &{
            return pushError("expect closing square bracket", c)
        }
    ) {
        return selectorElement(string(c.text))
    }

EOF = !.